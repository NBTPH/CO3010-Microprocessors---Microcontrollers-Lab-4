
Lab4SCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003148  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003254  08003254  00004254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033ac  080033ac  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080033ac  080033ac  000043ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b4  080033b4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b4  080033b4  000043b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033b8  080033b8  000043b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080033bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  2000005c  08003418  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  08003418  00005668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc5  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da5  00000000  00000000  00010e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00012bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000977  00000000  00000000  00013810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db8  00000000  00000000  00014187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd2c  00000000  00000000  0002bf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088411  00000000  00000000  00039c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c207c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  000c20c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c5828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800323c 	.word	0x0800323c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800323c 	.word	0x0800323c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fe7d 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f85d 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f90d 	bl	8000388 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f895 	bl	800029c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8df 	bl	8000334 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8000176:	f000 fa1f 	bl	80005b8 <SCH_Init>
  SCH_Add_Task(toggle_led_1, 5, 50);
 800017a:	2232      	movs	r2, #50	@ 0x32
 800017c:	2105      	movs	r1, #5
 800017e:	481f      	ldr	r0, [pc, #124]	@ (80001fc <main+0xa0>)
 8000180:	f000 fa94 	bl	80006ac <SCH_Add_Task>
  SCH_Add_Task(toggle_led_2, 5, 100);
 8000184:	2264      	movs	r2, #100	@ 0x64
 8000186:	2105      	movs	r1, #5
 8000188:	481d      	ldr	r0, [pc, #116]	@ (8000200 <main+0xa4>)
 800018a:	f000 fa8f 	bl	80006ac <SCH_Add_Task>
  SCH_Add_Task(toggle_led_3, 5, 150);
 800018e:	2296      	movs	r2, #150	@ 0x96
 8000190:	2105      	movs	r1, #5
 8000192:	481c      	ldr	r0, [pc, #112]	@ (8000204 <main+0xa8>)
 8000194:	f000 fa8a 	bl	80006ac <SCH_Add_Task>
  SCH_Add_Task(toggle_led_4, 5, 200);
 8000198:	22c8      	movs	r2, #200	@ 0xc8
 800019a:	2105      	movs	r1, #5
 800019c:	481a      	ldr	r0, [pc, #104]	@ (8000208 <main+0xac>)
 800019e:	f000 fa85 	bl	80006ac <SCH_Add_Task>
  SCH_Add_Task(toggle_led_5, 5, 250);
 80001a2:	22fa      	movs	r2, #250	@ 0xfa
 80001a4:	2105      	movs	r1, #5
 80001a6:	4819      	ldr	r0, [pc, #100]	@ (800020c <main+0xb0>)
 80001a8:	f000 fa80 	bl	80006ac <SCH_Add_Task>
  SCH_Add_Task(toggle_led_6, 500, 0);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80001b2:	4817      	ldr	r0, [pc, #92]	@ (8000210 <main+0xb4>)
 80001b4:	f000 fa7a 	bl	80006ac <SCH_Add_Task>
  HAL_TIM_Base_Start_IT(&htim2);
 80001b8:	4816      	ldr	r0, [pc, #88]	@ (8000214 <main+0xb8>)
 80001ba:	f001 fdcf 	bl	8001d5c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  uint32_t delay = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80001c2:	f000 fba9 	bl	8000918 <SCH_Dispatch_Tasks>
	  if(delay >= 10000){
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80001cc:	4293      	cmp	r3, r2
 80001ce:	d910      	bls.n	80001f2 <main+0x96>
		  sprintf(c, "Current tick: %6ld\r\n\n", ticks);
 80001d0:	4b11      	ldr	r3, [pc, #68]	@ (8000218 <main+0xbc>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	461a      	mov	r2, r3
 80001d6:	4911      	ldr	r1, [pc, #68]	@ (800021c <main+0xc0>)
 80001d8:	4811      	ldr	r0, [pc, #68]	@ (8000220 <main+0xc4>)
 80001da:	f002 fc2d 	bl	8002a38 <siprintf>
		  UART_Print(c, strlen(c));
 80001de:	4810      	ldr	r0, [pc, #64]	@ (8000220 <main+0xc4>)
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	480d      	ldr	r0, [pc, #52]	@ (8000220 <main+0xc4>)
 80001ea:	f000 f9cb 	bl	8000584 <UART_Print>
		  delay = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
	  }
	  delay++;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3301      	adds	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	  SCH_Dispatch_Tasks();
 80001f8:	e7e3      	b.n	80001c2 <main+0x66>
 80001fa:	bf00      	nop
 80001fc:	08000405 	.word	0x08000405
 8000200:	08000445 	.word	0x08000445
 8000204:	08000485 	.word	0x08000485
 8000208:	080004c5 	.word	0x080004c5
 800020c:	08000505 	.word	0x08000505
 8000210:	08000545 	.word	0x08000545
 8000214:	20000078 	.word	0x20000078
 8000218:	20000108 	.word	0x20000108
 800021c:	08003254 	.word	0x08003254
 8000220:	2000010c 	.word	0x2000010c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fc22 	bl	8002a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f001 f91e 	bl	800149c <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f9a1 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fb8c 	bl	80019a0 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f98d 	bl	80005ac <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002c2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c8:	4b19      	ldr	r3, [pc, #100]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002ce:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002d0:	2209      	movs	r2, #9
 80002d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d4:	4b16      	ldr	r3, [pc, #88]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e0:	4813      	ldr	r0, [pc, #76]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002e2:	f001 fceb 	bl	8001cbc <HAL_TIM_Base_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002ec:	f000 f95e 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	4619      	mov	r1, r3
 80002fc:	480c      	ldr	r0, [pc, #48]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002fe:	f001 fe69 	bl	8001fd4 <HAL_TIM_ConfigClockSource>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000308:	f000 f950 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_TIM2_Init+0x94>)
 800031a:	f002 f841 	bl	80023a0 <HAL_TIMEx_MasterConfigSynchronization>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000324:	f000 f942 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000078 	.word	0x20000078

08000334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000338:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	@ (8000384 <MX_USART1_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800036c:	f002 f882 	bl	8002474 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f919 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000c0 	.word	0x200000c0
 8000384:	40013800 	.word	0x40013800

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_GPIO_Init+0x74>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a16      	ldr	r2, [pc, #88]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a10      	ldr	r2, [pc, #64]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003cc:	2201      	movs	r2, #1
 80003ce:	217e      	movs	r1, #126	@ 0x7e
 80003d0:	480b      	ldr	r0, [pc, #44]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003d2:	f001 f831 	bl	8001438 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003d6:	237e      	movs	r3, #126	@ 0x7e
 80003d8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4619      	mov	r1, r3
 80003ec:	4804      	ldr	r0, [pc, #16]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003ee:	f000 fea7 	bl	8001140 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010800 	.word	0x40010800

08000404 <toggle_led_1>:

/* USER CODE BEGIN 4 */
void toggle_led_1(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000408:	2102      	movs	r1, #2
 800040a:	480a      	ldr	r0, [pc, #40]	@ (8000434 <toggle_led_1+0x30>)
 800040c:	f001 f82c 	bl	8001468 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 1 RED CALLED AT %6ld TICK \r\n", ticks);
 8000410:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <toggle_led_1+0x34>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4909      	ldr	r1, [pc, #36]	@ (800043c <toggle_led_1+0x38>)
 8000418:	4809      	ldr	r0, [pc, #36]	@ (8000440 <toggle_led_1+0x3c>)
 800041a:	f002 fb0d 	bl	8002a38 <siprintf>
	UART_Print(c, strlen(c));
 800041e:	4808      	ldr	r0, [pc, #32]	@ (8000440 <toggle_led_1+0x3c>)
 8000420:	f7ff fe94 	bl	800014c <strlen>
 8000424:	4603      	mov	r3, r0
 8000426:	4619      	mov	r1, r3
 8000428:	4805      	ldr	r0, [pc, #20]	@ (8000440 <toggle_led_1+0x3c>)
 800042a:	f000 f8ab 	bl	8000584 <UART_Print>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40010800 	.word	0x40010800
 8000438:	20000108 	.word	0x20000108
 800043c:	0800326c 	.word	0x0800326c
 8000440:	2000010c 	.word	0x2000010c

08000444 <toggle_led_2>:
void toggle_led_2(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000448:	2104      	movs	r1, #4
 800044a:	480a      	ldr	r0, [pc, #40]	@ (8000474 <toggle_led_2+0x30>)
 800044c:	f001 f80c 	bl	8001468 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 2 YELLOW CALLED AT %6ld TICK \r\n", ticks);
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <toggle_led_2+0x34>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	4909      	ldr	r1, [pc, #36]	@ (800047c <toggle_led_2+0x38>)
 8000458:	4809      	ldr	r0, [pc, #36]	@ (8000480 <toggle_led_2+0x3c>)
 800045a:	f002 faed 	bl	8002a38 <siprintf>
	UART_Print(c, strlen(c));
 800045e:	4808      	ldr	r0, [pc, #32]	@ (8000480 <toggle_led_2+0x3c>)
 8000460:	f7ff fe74 	bl	800014c <strlen>
 8000464:	4603      	mov	r3, r0
 8000466:	4619      	mov	r1, r3
 8000468:	4805      	ldr	r0, [pc, #20]	@ (8000480 <toggle_led_2+0x3c>)
 800046a:	f000 f88b 	bl	8000584 <UART_Print>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010800 	.word	0x40010800
 8000478:	20000108 	.word	0x20000108
 800047c:	08003290 	.word	0x08003290
 8000480:	2000010c 	.word	0x2000010c

08000484 <toggle_led_3>:
void toggle_led_3(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000488:	2108      	movs	r1, #8
 800048a:	480a      	ldr	r0, [pc, #40]	@ (80004b4 <toggle_led_3+0x30>)
 800048c:	f000 ffec 	bl	8001468 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 3 GREEN CALLED AT %6ld TICK \r\n", ticks);
 8000490:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <toggle_led_3+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4909      	ldr	r1, [pc, #36]	@ (80004bc <toggle_led_3+0x38>)
 8000498:	4809      	ldr	r0, [pc, #36]	@ (80004c0 <toggle_led_3+0x3c>)
 800049a:	f002 facd 	bl	8002a38 <siprintf>
	UART_Print(c, strlen(c));
 800049e:	4808      	ldr	r0, [pc, #32]	@ (80004c0 <toggle_led_3+0x3c>)
 80004a0:	f7ff fe54 	bl	800014c <strlen>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	@ (80004c0 <toggle_led_3+0x3c>)
 80004aa:	f000 f86b 	bl	8000584 <UART_Print>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40010800 	.word	0x40010800
 80004b8:	20000108 	.word	0x20000108
 80004bc:	080032b8 	.word	0x080032b8
 80004c0:	2000010c 	.word	0x2000010c

080004c4 <toggle_led_4>:
void toggle_led_4(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80004c8:	2110      	movs	r1, #16
 80004ca:	480a      	ldr	r0, [pc, #40]	@ (80004f4 <toggle_led_4+0x30>)
 80004cc:	f000 ffcc 	bl	8001468 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 4 WHITE CALLED AT %6ld TICK \r\n", ticks);
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <toggle_led_4+0x34>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4909      	ldr	r1, [pc, #36]	@ (80004fc <toggle_led_4+0x38>)
 80004d8:	4809      	ldr	r0, [pc, #36]	@ (8000500 <toggle_led_4+0x3c>)
 80004da:	f002 faad 	bl	8002a38 <siprintf>
	UART_Print(c, strlen(c));
 80004de:	4808      	ldr	r0, [pc, #32]	@ (8000500 <toggle_led_4+0x3c>)
 80004e0:	f7ff fe34 	bl	800014c <strlen>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <toggle_led_4+0x3c>)
 80004ea:	f000 f84b 	bl	8000584 <UART_Print>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40010800 	.word	0x40010800
 80004f8:	20000108 	.word	0x20000108
 80004fc:	080032dc 	.word	0x080032dc
 8000500:	2000010c 	.word	0x2000010c

08000504 <toggle_led_5>:
void toggle_led_5(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000508:	2120      	movs	r1, #32
 800050a:	480a      	ldr	r0, [pc, #40]	@ (8000534 <toggle_led_5+0x30>)
 800050c:	f000 ffac 	bl	8001468 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 5 BLUE CALLED AT %6ld TICK \r\n", ticks);
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <toggle_led_5+0x34>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4909      	ldr	r1, [pc, #36]	@ (800053c <toggle_led_5+0x38>)
 8000518:	4809      	ldr	r0, [pc, #36]	@ (8000540 <toggle_led_5+0x3c>)
 800051a:	f002 fa8d 	bl	8002a38 <siprintf>
	UART_Print(c, strlen(c));
 800051e:	4808      	ldr	r0, [pc, #32]	@ (8000540 <toggle_led_5+0x3c>)
 8000520:	f7ff fe14 	bl	800014c <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <toggle_led_5+0x3c>)
 800052a:	f000 f82b 	bl	8000584 <UART_Print>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010800 	.word	0x40010800
 8000538:	20000108 	.word	0x20000108
 800053c:	08003300 	.word	0x08003300
 8000540:	2000010c 	.word	0x2000010c

08000544 <toggle_led_6>:
void toggle_led_6(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000548:	2140      	movs	r1, #64	@ 0x40
 800054a:	480a      	ldr	r0, [pc, #40]	@ (8000574 <toggle_led_6+0x30>)
 800054c:	f000 ff8c 	bl	8001468 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 6 ORANGE CALLED AT %6ld TICK \r\n", ticks);
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <toggle_led_6+0x34>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4909      	ldr	r1, [pc, #36]	@ (800057c <toggle_led_6+0x38>)
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <toggle_led_6+0x3c>)
 800055a:	f002 fa6d 	bl	8002a38 <siprintf>
	UART_Print(c, strlen(c));
 800055e:	4808      	ldr	r0, [pc, #32]	@ (8000580 <toggle_led_6+0x3c>)
 8000560:	f7ff fdf4 	bl	800014c <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <toggle_led_6+0x3c>)
 800056a:	f000 f80b 	bl	8000584 <UART_Print>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010800 	.word	0x40010800
 8000578:	20000108 	.word	0x20000108
 800057c:	08003324 	.word	0x08003324
 8000580:	2000010c 	.word	0x2000010c

08000584 <UART_Print>:

void UART_Print(char *c, size_t length){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)c, length, HAL_MAX_DELAY);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b29a      	uxth	r2, r3
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <UART_Print+0x24>)
 800059a:	f001 ffbb 	bl	8002514 <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000c0 	.word	0x200000c0

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <Error_Handler+0x8>

080005b8 <SCH_Init>:
uint32_t queue_tasks_num = 0;
ERROR_REPORT Error_code_G;
ERROR_REPORT Last_error_code_G;
uint16_t Error_tick_count_G = 0;

void SCH_Init(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	if(!(queue_head == NULL && queue_tasks_num == 0)){ //if queue not empty, delete the queue
 80005be:	4b37      	ldr	r3, [pc, #220]	@ (800069c <SCH_Init+0xe4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d103      	bne.n	80005ce <SCH_Init+0x16>
 80005c6:	4b36      	ldr	r3, [pc, #216]	@ (80006a0 <SCH_Init+0xe8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d014      	beq.n	80005f8 <SCH_Init+0x40>
		sTask* temp = NULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
		while(queue_head){
 80005d2:	e00a      	b.n	80005ea <SCH_Init+0x32>
			temp = queue_head;
 80005d4:	4b31      	ldr	r3, [pc, #196]	@ (800069c <SCH_Init+0xe4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	603b      	str	r3, [r7, #0]
			queue_head = queue_head->next;
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <SCH_Init+0xe4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a2e      	ldr	r2, [pc, #184]	@ (800069c <SCH_Init+0xe4>)
 80005e2:	6013      	str	r3, [r2, #0]
			free(temp);
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f002 f971 	bl	80028cc <free>
		while(queue_head){
 80005ea:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <SCH_Init+0xe4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f0      	bne.n	80005d4 <SCH_Init+0x1c>
		}
		queue_tasks_num = 0;
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <SCH_Init+0xe8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
	}

	for(uint32_t i = 0; i < SCH_MAX_TASK; i++){ //initialize tasks array
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	e044      	b.n	8000688 <SCH_Init+0xd0>
		SCH_tasks_G[i].pTask = NULL;
 80005fe:	4929      	ldr	r1, [pc, #164]	@ (80006a4 <SCH_Init+0xec>)
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	440b      	add	r3, r1
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].delay = SCH_tasks_G[i].period = SCH_tasks_G[i].RunMe = SCH_tasks_G[i].TaskID = 0;
 8000610:	4924      	ldr	r1, [pc, #144]	@ (80006a4 <SCH_Init+0xec>)
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	440b      	add	r3, r1
 800061e:	3310      	adds	r3, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	491f      	ldr	r1, [pc, #124]	@ (80006a4 <SCH_Init+0xec>)
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4613      	mov	r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	4413      	add	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	440b      	add	r3, r1
 8000632:	330c      	adds	r3, #12
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	491a      	ldr	r1, [pc, #104]	@ (80006a4 <SCH_Init+0xec>)
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	440b      	add	r3, r1
 8000646:	330c      	adds	r3, #12
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	4915      	ldr	r1, [pc, #84]	@ (80006a4 <SCH_Init+0xec>)
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	440b      	add	r3, r1
 800065a:	3308      	adds	r3, #8
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	4911      	ldr	r1, [pc, #68]	@ (80006a4 <SCH_Init+0xec>)
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	440b      	add	r3, r1
 800066c:	3308      	adds	r3, #8
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <SCH_Init+0xec>)
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4403      	add	r3, r0
 800067e:	3304      	adds	r3, #4
 8000680:	6019      	str	r1, [r3, #0]
	for(uint32_t i = 0; i < SCH_MAX_TASK; i++){ //initialize tasks array
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b27      	cmp	r3, #39	@ 0x27
 800068c:	d9b7      	bls.n	80005fe <SCH_Init+0x46>
	}

	Error_code_G = 0;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <SCH_Init+0xf0>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000050c 	.word	0x2000050c
 80006a0:	20000510 	.word	0x20000510
 80006a4:	2000014c 	.word	0x2000014c
 80006a8:	20000514 	.word	0x20000514

080006ac <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction) () , uint32_t DELAY, uint32_t PERIOD){
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	if(pFunction == NULL){ //check if invalid add
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d105      	bne.n	80006ca <SCH_Add_Task+0x1e>
		Error_code_G = ERROR_SCH_INVALID_TASK_INIT;
 80006be:	4b7b      	ldr	r3, [pc, #492]	@ (80008ac <SCH_Add_Task+0x200>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	701a      	strb	r2, [r3, #0]
		return -1;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	e0ec      	b.n	80008a4 <SCH_Add_Task+0x1f8>
	}

	uint32_t i = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
	while((i < SCH_MAX_TASK) && (SCH_tasks_G[i].pTask != NULL)){
 80006ce:	e002      	b.n	80006d6 <SCH_Add_Task+0x2a>
		i++;
 80006d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d2:	3301      	adds	r3, #1
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
	while((i < SCH_MAX_TASK) && (SCH_tasks_G[i].pTask != NULL)){
 80006d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d8:	2b27      	cmp	r3, #39	@ 0x27
 80006da:	d809      	bhi.n	80006f0 <SCH_Add_Task+0x44>
 80006dc:	4974      	ldr	r1, [pc, #464]	@ (80008b0 <SCH_Add_Task+0x204>)
 80006de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	440b      	add	r3, r1
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1ef      	bne.n	80006d0 <SCH_Add_Task+0x24>
	}

	if(i == SCH_MAX_TASK){
 80006f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f2:	2b28      	cmp	r3, #40	@ 0x28
 80006f4:	d104      	bne.n	8000700 <SCH_Add_Task+0x54>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80006f6:	4b6d      	ldr	r3, [pc, #436]	@ (80008ac <SCH_Add_Task+0x200>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASK;
 80006fc:	2328      	movs	r3, #40	@ 0x28
 80006fe:	e0d1      	b.n	80008a4 <SCH_Add_Task+0x1f8>
	}

	SCH_tasks_G[i].pTask = pFunction;
 8000700:	496b      	ldr	r1, [pc, #428]	@ (80008b0 <SCH_Add_Task+0x204>)
 8000702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].delay = DELAY;
 8000712:	4967      	ldr	r1, [pc, #412]	@ (80008b0 <SCH_Add_Task+0x204>)
 8000714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	440b      	add	r3, r1
 8000720:	3304      	adds	r3, #4
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].period = PERIOD;
 8000726:	4962      	ldr	r1, [pc, #392]	@ (80008b0 <SCH_Add_Task+0x204>)
 8000728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	440b      	add	r3, r1
 8000734:	3308      	adds	r3, #8
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].RunMe = 0;
 800073a:	495d      	ldr	r1, [pc, #372]	@ (80008b0 <SCH_Add_Task+0x204>)
 800073c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800073e:	4613      	mov	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	440b      	add	r3, r1
 8000748:	330c      	adds	r3, #12
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[i].TaskID = i;
 800074e:	4958      	ldr	r1, [pc, #352]	@ (80008b0 <SCH_Add_Task+0x204>)
 8000750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	3310      	adds	r3, #16
 800075e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000760:	601a      	str	r2, [r3, #0]

	if(queue_head == NULL && queue_tasks_num == 0){//if queue is empty, add one task to queue
 8000762:	4b54      	ldr	r3, [pc, #336]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d12a      	bne.n	80007c0 <SCH_Add_Task+0x114>
 800076a:	4b53      	ldr	r3, [pc, #332]	@ (80008b8 <SCH_Add_Task+0x20c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d126      	bne.n	80007c0 <SCH_Add_Task+0x114>
		queue_head = (sTask*) malloc(sizeof(sTask));
 8000772:	2018      	movs	r0, #24
 8000774:	f002 f8a2 	bl	80028bc <malloc>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b4d      	ldr	r3, [pc, #308]	@ (80008b4 <SCH_Add_Task+0x208>)
 800077e:	601a      	str	r2, [r3, #0]
		if(queue_head == NULL){
 8000780:	4b4c      	ldr	r3, [pc, #304]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d105      	bne.n	8000794 <SCH_Add_Task+0xe8>
			Error_code_G = ERROR_SCH_QUEUE_INITIALIZATION_FAILED;
 8000788:	4b48      	ldr	r3, [pc, #288]	@ (80008ac <SCH_Add_Task+0x200>)
 800078a:	2202      	movs	r2, #2
 800078c:	701a      	strb	r2, [r3, #0]
			return -1; // allocation failed
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	e087      	b.n	80008a4 <SCH_Add_Task+0x1f8>
		}
		*queue_head = SCH_tasks_G[i];
 8000794:	4b47      	ldr	r3, [pc, #284]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	4945      	ldr	r1, [pc, #276]	@ (80008b0 <SCH_Add_Task+0x204>)
 800079a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	4604      	mov	r4, r0
 80007a8:	461d      	mov	r5, r3
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007b2:	e884 0003 	stmia.w	r4, {r0, r1}
		queue_head->next = NULL;
 80007b6:	4b3f      	ldr	r3, [pc, #252]	@ (80008b4 <SCH_Add_Task+0x208>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	e06b      	b.n	8000898 <SCH_Add_Task+0x1ec>
	}
	else{//if not
		sTask* new_task = (sTask*) malloc(sizeof(sTask));
 80007c0:	2018      	movs	r0, #24
 80007c2:	f002 f87b 	bl	80028bc <malloc>
 80007c6:	4603      	mov	r3, r0
 80007c8:	617b      	str	r3, [r7, #20]
		if (new_task == NULL) {
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d105      	bne.n	80007dc <SCH_Add_Task+0x130>
			Error_code_G = ERROR_SCH_QUEUE_INITIALIZATION_FAILED;
 80007d0:	4b36      	ldr	r3, [pc, #216]	@ (80008ac <SCH_Add_Task+0x200>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	701a      	strb	r2, [r3, #0]
			return -1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	e063      	b.n	80008a4 <SCH_Add_Task+0x1f8>
		}
		*new_task = SCH_tasks_G[i];
 80007dc:	6978      	ldr	r0, [r7, #20]
 80007de:	4934      	ldr	r1, [pc, #208]	@ (80008b0 <SCH_Add_Task+0x204>)
 80007e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	4604      	mov	r4, r0
 80007ee:	461d      	mov	r5, r3
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f8:	e884 0003 	stmia.w	r4, {r0, r1}
		new_task->next = NULL;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]

		sTask* cursor = queue_head; //create a cursor
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	623b      	str	r3, [r7, #32]
		sTask* prev = NULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
		uint32_t delay_accumulate = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]

		while (cursor != NULL && (new_task->delay > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than tasks delay
 8000810:	e009      	b.n	8000826 <SCH_Add_Task+0x17a>
			delay_accumulate += cursor->delay; //accumulate delay
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	4413      	add	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]
			prev = cursor;
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	61fb      	str	r3, [r7, #28]
			cursor = cursor->next; // keep moving to next
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	623b      	str	r3, [r7, #32]
		while (cursor != NULL && (new_task->delay > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than tasks delay
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d007      	beq.n	800083c <SCH_Add_Task+0x190>
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	6859      	ldr	r1, [r3, #4]
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	440b      	add	r3, r1
 8000838:	429a      	cmp	r2, r3
 800083a:	d8ea      	bhi.n	8000812 <SCH_Add_Task+0x166>
		}

		new_task->delay -= delay_accumulate; //calculate relative delay
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	605a      	str	r2, [r3, #4]

		if (prev == NULL) { //if empty queue, insert at head
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d114      	bne.n	8000878 <SCH_Add_Task+0x1cc>
			new_task->next = queue_head;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	615a      	str	r2, [r3, #20]
			if (queue_head != NULL) {
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d008      	beq.n	8000870 <SCH_Add_Task+0x1c4>
				queue_head->delay -= new_task->delay;
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6859      	ldr	r1, [r3, #4]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <SCH_Add_Task+0x208>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1a8a      	subs	r2, r1, r2
 800086e:	605a      	str	r2, [r3, #4]
			}
			queue_head = new_task;
 8000870:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <SCH_Add_Task+0x208>)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	e00f      	b.n	8000898 <SCH_Add_Task+0x1ec>
		}
		else { // if not
			new_task->next = cursor; //insert in between node
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	6a3a      	ldr	r2, [r7, #32]
 800087c:	615a      	str	r2, [r3, #20]
			prev->next = new_task;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	615a      	str	r2, [r3, #20]

			if (cursor != NULL) { //recalculate the next task delay
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d006      	beq.n	8000898 <SCH_Add_Task+0x1ec>
				cursor->delay -= new_task->delay;
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	605a      	str	r2, [r3, #4]
			}
		}
	}
	queue_tasks_num++;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <SCH_Add_Task+0x20c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <SCH_Add_Task+0x20c>)
 80008a0:	6013      	str	r3, [r2, #0]

	return i;
 80008a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bdb0      	pop	{r4, r5, r7, pc}
 80008ac:	20000514 	.word	0x20000514
 80008b0:	2000014c 	.word	0x2000014c
 80008b4:	2000050c 	.word	0x2000050c
 80008b8:	20000510 	.word	0x20000510

080008bc <SCH_Update>:

void SCH_Update(void){
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
	if (queue_head == NULL) return; //if empty queue return
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <SCH_Update+0x58>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d01e      	beq.n	8000908 <SCH_Update+0x4c>

	if(queue_head->delay > 0){ //decrement head
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <SCH_Update+0x58>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d004      	beq.n	80008de <SCH_Update+0x22>
		queue_head->delay--;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <SCH_Update+0x58>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	3a01      	subs	r2, #1
 80008dc:	605a      	str	r2, [r3, #4]
	}

	sTask* cursor = queue_head;
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <SCH_Update+0x58>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	607b      	str	r3, [r7, #4]
	while(cursor != NULL && cursor->delay == 0){
 80008e4:	e008      	b.n	80008f8 <SCH_Update+0x3c>
		cursor->RunMe++;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7b1b      	ldrb	r3, [r3, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	731a      	strb	r2, [r3, #12]
		cursor = cursor->next;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	607b      	str	r3, [r7, #4]
	while(cursor != NULL && cursor->delay == 0){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d005      	beq.n	800090a <SCH_Update+0x4e>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0ef      	beq.n	80008e6 <SCH_Update+0x2a>
 8000906:	e000      	b.n	800090a <SCH_Update+0x4e>
	if (queue_head == NULL) return; //if empty queue return
 8000908:	bf00      	nop
	}
}
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2000050c 	.word	0x2000050c

08000918 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	while(queue_head != NULL && queue_head->RunMe > 0){ //Loop through all task that's had runme flag on from head
 800091c:	e01a      	b.n	8000954 <SCH_Dispatch_Tasks+0x3c>

		if(queue_head->pTask != NULL){
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <SCH_Dispatch_Tasks+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d015      	beq.n	8000954 <SCH_Dispatch_Tasks+0x3c>
			(*queue_head->pTask)(); //run the tasks
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <SCH_Dispatch_Tasks+0x5c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4798      	blx	r3
			queue_head->RunMe = 0;
 8000930:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <SCH_Dispatch_Tasks+0x5c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	731a      	strb	r2, [r3, #12]

			if(queue_head->period > 0){ //if it is periodically
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <SCH_Dispatch_Tasks+0x5c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <SCH_Dispatch_Tasks+0x30>
				SCH_RescheduleTask();
 8000942:	f000 f8bf 	bl	8000ac4 <SCH_RescheduleTask>
 8000946:	e005      	b.n	8000954 <SCH_Dispatch_Tasks+0x3c>
			}
			else{
				SCH_Delete_Task(queue_head->TaskID);
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <SCH_Dispatch_Tasks+0x5c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f812 	bl	8000978 <SCH_Delete_Task>
	while(queue_head != NULL && queue_head->RunMe > 0){ //Loop through all task that's had runme flag on from head
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <SCH_Dispatch_Tasks+0x5c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d004      	beq.n	8000966 <SCH_Dispatch_Tasks+0x4e>
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <SCH_Dispatch_Tasks+0x5c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	7b1b      	ldrb	r3, [r3, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1db      	bne.n	800091e <SCH_Dispatch_Tasks+0x6>

		}

	}

	SCH_Report_Status(); //output status
 8000966:	f000 f917 	bl	8000b98 <SCH_Report_Status>
	SCH_Go_To_Sleep(); //sleep
 800096a:	f000 f90f 	bl	8000b8c <SCH_Go_To_Sleep>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000050c 	.word	0x2000050c

08000978 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	if(TASK_INDEX < 0 || TASK_INDEX >= SCH_MAX_TASK || SCH_tasks_G[TASK_INDEX].pTask == NULL){ //invalid index
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b27      	cmp	r3, #39	@ 0x27
 8000984:	d809      	bhi.n	800099a <SCH_Delete_Task+0x22>
 8000986:	494b      	ldr	r1, [pc, #300]	@ (8000ab4 <SCH_Delete_Task+0x13c>)
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d104      	bne.n	80009a4 <SCH_Delete_Task+0x2c>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800099a:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <SCH_Delete_Task+0x140>)
 800099c:	2204      	movs	r2, #4
 800099e:	701a      	strb	r2, [r3, #0]
		return -1;
 80009a0:	23ff      	movs	r3, #255	@ 0xff
 80009a2:	e083      	b.n	8000aac <SCH_Delete_Task+0x134>
	}
	//delete from tasks array
	SCH_tasks_G[TASK_INDEX].pTask = NULL;
 80009a4:	4943      	ldr	r1, [pc, #268]	@ (8000ab4 <SCH_Delete_Task+0x13c>)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].delay = 0;
 80009b6:	493f      	ldr	r1, [pc, #252]	@ (8000ab4 <SCH_Delete_Task+0x13c>)
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	440b      	add	r3, r1
 80009c4:	3304      	adds	r3, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].period = 0;
 80009ca:	493a      	ldr	r1, [pc, #232]	@ (8000ab4 <SCH_Delete_Task+0x13c>)
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	440b      	add	r3, r1
 80009d8:	3308      	adds	r3, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80009de:	4935      	ldr	r1, [pc, #212]	@ (8000ab4 <SCH_Delete_Task+0x13c>)
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	330c      	adds	r3, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].TaskID = 0;
 80009f2:	4930      	ldr	r1, [pc, #192]	@ (8000ab4 <SCH_Delete_Task+0x13c>)
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	440b      	add	r3, r1
 8000a00:	3310      	adds	r3, #16
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]

	//delete from queue
	sTask* cursor = queue_head;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	617b      	str	r3, [r7, #20]
	sTask* prev = NULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
	while(cursor != NULL){
 8000a10:	e009      	b.n	8000a26 <SCH_Delete_Task+0xae>
		if(cursor->TaskID == TASK_INDEX){
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d008      	beq.n	8000a2e <SCH_Delete_Task+0xb6>
			break;
		}
		prev = cursor;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
		cursor = cursor->next;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	617b      	str	r3, [r7, #20]
	while(cursor != NULL){
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f2      	bne.n	8000a12 <SCH_Delete_Task+0x9a>
 8000a2c:	e000      	b.n	8000a30 <SCH_Delete_Task+0xb8>
			break;
 8000a2e:	bf00      	nop
	}
	if(cursor != NULL){
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d038      	beq.n	8000aa8 <SCH_Delete_Task+0x130>
		if(queue_head->TaskID == cursor->TaskID){ //delete head
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d118      	bne.n	8000a76 <SCH_Delete_Task+0xfe>
			sTask* temp = queue_head;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
			queue_head = queue_head->next;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a1a      	ldr	r2, [pc, #104]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a52:	6013      	str	r3, [r2, #0]
			if(queue_head != NULL){
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d008      	beq.n	8000a6e <SCH_Delete_Task+0xf6>
				queue_head->delay += temp->delay;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6859      	ldr	r1, [r3, #4]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <SCH_Delete_Task+0x144>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	440a      	add	r2, r1
 8000a6c:	605a      	str	r2, [r3, #4]
			}
			free(temp);
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f001 ff2c 	bl	80028cc <free>
 8000a74:	e013      	b.n	8000a9e <SCH_Delete_Task+0x126>
		}
		else{
			prev->next = cursor->next;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	615a      	str	r2, [r3, #20]
			if (cursor->next != NULL){
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d008      	beq.n	8000a98 <SCH_Delete_Task+0x120>
				cursor->next->delay += cursor->delay;
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	6859      	ldr	r1, [r3, #4]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	440a      	add	r2, r1
 8000a96:	605a      	str	r2, [r3, #4]
			}
			free(cursor);
 8000a98:	6978      	ldr	r0, [r7, #20]
 8000a9a:	f001 ff17 	bl	80028cc <free>
		}
		queue_tasks_num--;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <SCH_Delete_Task+0x148>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <SCH_Delete_Task+0x148>)
 8000aa6:	6013      	str	r3, [r2, #0]
	}

	return TASK_INDEX;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	b2db      	uxtb	r3, r3
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000014c 	.word	0x2000014c
 8000ab8:	20000514 	.word	0x20000514
 8000abc:	2000050c 	.word	0x2000050c
 8000ac0:	20000510 	.word	0x20000510

08000ac4 <SCH_RescheduleTask>:

void SCH_RescheduleTask(void){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
	if (queue_head == NULL) return;
 8000aca:	4b2f      	ldr	r3, [pc, #188]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d055      	beq.n	8000b7e <SCH_RescheduleTask+0xba>

	sTask* temp = queue_head;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	603b      	str	r3, [r7, #0]
	sTask* cursor = queue_head->next;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	60fb      	str	r3, [r7, #12]
	sTask* prev = NULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
	uint32_t delay_accumulate = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]

	while (cursor != NULL && (queue_head->period > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than delay of task that is being rescheduled
 8000ae8:	e009      	b.n	8000afe <SCH_RescheduleTask+0x3a>
		delay_accumulate += cursor->delay; //accumulate delay
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	607b      	str	r3, [r7, #4]
		prev = cursor;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	60bb      	str	r3, [r7, #8]
		cursor = cursor->next; // keep moving to next
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	60fb      	str	r3, [r7, #12]
	while (cursor != NULL && (queue_head->period > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than delay of task that is being rescheduled
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <SCH_RescheduleTask+0x52>
 8000b04:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	440b      	add	r3, r1
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d8e9      	bhi.n	8000aea <SCH_RescheduleTask+0x26>
	}

	queue_head = queue_head->next;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b1e:	6013      	str	r3, [r2, #0]
	temp->delay = temp->period - delay_accumulate;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1ad2      	subs	r2, r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	605a      	str	r2, [r3, #4]

	if (prev == NULL) {
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d114      	bne.n	8000b5c <SCH_RescheduleTask+0x98>
		temp->next = queue_head;
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	615a      	str	r2, [r3, #20]
		if (queue_head != NULL){
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d008      	beq.n	8000b54 <SCH_RescheduleTask+0x90>
			queue_head->delay -= temp->delay;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6859      	ldr	r1, [r3, #4]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	1a8a      	subs	r2, r1, r2
 8000b52:	605a      	str	r2, [r3, #4]
		}
		queue_head = temp;
 8000b54:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <SCH_RescheduleTask+0xc4>)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e011      	b.n	8000b80 <SCH_RescheduleTask+0xbc>
	}
	else {
		// Insert after 'prev'
		temp->next = cursor;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	615a      	str	r2, [r3, #20]
		prev->next = temp;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	615a      	str	r2, [r3, #20]
		if (cursor != NULL){
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d008      	beq.n	8000b80 <SCH_RescheduleTask+0xbc>
			cursor->delay -= temp->delay;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	1ad2      	subs	r2, r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	e000      	b.n	8000b80 <SCH_RescheduleTask+0xbc>
	if (queue_head == NULL) return;
 8000b7e:	bf00      	nop
		}
	}
}
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	2000050c 	.word	0x2000050c

08000b8c <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(void){
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SCH_Report_Status>:
		break;
	}
	UART_Print(c, strlen(c));
}

void SCH_Report_Status(void){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_MspInit+0x60>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_MspInit+0x60>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000

08000c08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c18:	d113      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_TIM_Base_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <HAL_TIM_Base_MspInit+0x44>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <HAL_TIM_Base_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	201c      	movs	r0, #28
 8000c38:	f000 fa4b 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c3c:	201c      	movs	r0, #28
 8000c3e:	f000 fa64 	bl	800110a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a22      	ldr	r2, [pc, #136]	@ (8000cf4 <HAL_UART_MspInit+0xa4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d13d      	bne.n	8000cec <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_UART_MspInit+0xa8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a20      	ldr	r2, [pc, #128]	@ (8000cf8 <HAL_UART_MspInit+0xa8>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <HAL_UART_MspInit+0xa8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_UART_MspInit+0xa8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf8 <HAL_UART_MspInit+0xa8>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_UART_MspInit+0xa8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca0:	2340      	movs	r3, #64	@ 0x40
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <HAL_UART_MspInit+0xac>)
 8000cb4:	f000 fa44 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <HAL_UART_MspInit+0xac>)
 8000ccc:	f000 fa38 	bl	8001140 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_UART_MspInit+0xb0>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce6:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <HAL_UART_MspInit+0xb0>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cea:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40010000 	.word	0x40010000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8ca 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <TIM2_IRQHandler+0x10>)
 8000d62:	f001 f847 	bl	8001df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000078 	.word	0x20000078

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f001 fe84 	bl	8002aac <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20002800 	.word	0x20002800
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	20000518 	.word	0x20000518
 8000dd8:	20000668 	.word	0x20000668

08000ddc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: NGUYEN BINH
 */
#include "main.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df8:	d106      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x20>
		SCH_Update();
 8000dfa:	f7ff fd5f 	bl	80008bc <SCH_Update>
		ticks++;
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a02      	ldr	r2, [pc, #8]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e06:	6013      	str	r3, [r2, #0]
	}
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000108 	.word	0x20000108

08000e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ffe2 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e1a:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a09      	ldr	r2, [pc, #36]	@ (8000e54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e30:	4c09      	ldr	r4, [pc, #36]	@ (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f001 fe3b 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff f98b 	bl	800015c <main>
  bx lr
 8000e46:	4770      	bx	lr
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e50:	080033bc 	.word	0x080033bc
  ldr r2, =_sbss
 8000e54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e58:	20000668 	.word	0x20000668

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f923 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe92 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f93b 	bl	8001126 <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f903 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	@ (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	2000051c 	.word	0x2000051c

08000f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	@ (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	2000051c 	.word	0x2000051c

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4906      	ldr	r1, [pc, #24]	@ (8000fbc <__NVIC_EnableIRQ+0x34>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	@ (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff90 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff2d 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff42 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff35 	bl	8000f88 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b08b      	sub	sp, #44	@ 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e161      	b.n	8001418 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001154:	2201      	movs	r2, #1
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8150 	bne.w	8001412 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a97      	ldr	r2, [pc, #604]	@ (80013d4 <HAL_GPIO_Init+0x294>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d05e      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 800117c:	4a95      	ldr	r2, [pc, #596]	@ (80013d4 <HAL_GPIO_Init+0x294>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d875      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 8001182:	4a95      	ldr	r2, [pc, #596]	@ (80013d8 <HAL_GPIO_Init+0x298>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d058      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 8001188:	4a93      	ldr	r2, [pc, #588]	@ (80013d8 <HAL_GPIO_Init+0x298>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d86f      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 800118e:	4a93      	ldr	r2, [pc, #588]	@ (80013dc <HAL_GPIO_Init+0x29c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d052      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 8001194:	4a91      	ldr	r2, [pc, #580]	@ (80013dc <HAL_GPIO_Init+0x29c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d869      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 800119a:	4a91      	ldr	r2, [pc, #580]	@ (80013e0 <HAL_GPIO_Init+0x2a0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d04c      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 80011a0:	4a8f      	ldr	r2, [pc, #572]	@ (80013e0 <HAL_GPIO_Init+0x2a0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d863      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011a6:	4a8f      	ldr	r2, [pc, #572]	@ (80013e4 <HAL_GPIO_Init+0x2a4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d046      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 80011ac:	4a8d      	ldr	r2, [pc, #564]	@ (80013e4 <HAL_GPIO_Init+0x2a4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d85d      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d82a      	bhi.n	800120c <HAL_GPIO_Init+0xcc>
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d859      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011ba:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <HAL_GPIO_Init+0x80>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	0800123b 	.word	0x0800123b
 80011c4:	08001215 	.word	0x08001215
 80011c8:	08001227 	.word	0x08001227
 80011cc:	08001269 	.word	0x08001269
 80011d0:	0800126f 	.word	0x0800126f
 80011d4:	0800126f 	.word	0x0800126f
 80011d8:	0800126f 	.word	0x0800126f
 80011dc:	0800126f 	.word	0x0800126f
 80011e0:	0800126f 	.word	0x0800126f
 80011e4:	0800126f 	.word	0x0800126f
 80011e8:	0800126f 	.word	0x0800126f
 80011ec:	0800126f 	.word	0x0800126f
 80011f0:	0800126f 	.word	0x0800126f
 80011f4:	0800126f 	.word	0x0800126f
 80011f8:	0800126f 	.word	0x0800126f
 80011fc:	0800126f 	.word	0x0800126f
 8001200:	0800126f 	.word	0x0800126f
 8001204:	0800121d 	.word	0x0800121d
 8001208:	08001231 	.word	0x08001231
 800120c:	4a76      	ldr	r2, [pc, #472]	@ (80013e8 <HAL_GPIO_Init+0x2a8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001212:	e02c      	b.n	800126e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e029      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e024      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	3308      	adds	r3, #8
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e01f      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	330c      	adds	r3, #12
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e01a      	b.n	8001270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001242:	2304      	movs	r3, #4
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e013      	b.n	8001270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	611a      	str	r2, [r3, #16]
          break;
 800125a:	e009      	b.n	8001270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	615a      	str	r2, [r3, #20]
          break;
 8001266:	e003      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x130>
          break;
 800126e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2bff      	cmp	r3, #255	@ 0xff
 8001274:	d801      	bhi.n	800127a <HAL_GPIO_Init+0x13a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e001      	b.n	800127e <HAL_GPIO_Init+0x13e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3304      	adds	r3, #4
 800127e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2bff      	cmp	r3, #255	@ 0xff
 8001284:	d802      	bhi.n	800128c <HAL_GPIO_Init+0x14c>
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x152>
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	3b08      	subs	r3, #8
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	210f      	movs	r1, #15
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	6a39      	ldr	r1, [r7, #32]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80a9 	beq.w	8001412 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c0:	4b4a      	ldr	r3, [pc, #296]	@ (80013ec <HAL_GPIO_Init+0x2ac>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a49      	ldr	r2, [pc, #292]	@ (80013ec <HAL_GPIO_Init+0x2ac>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b47      	ldr	r3, [pc, #284]	@ (80013ec <HAL_GPIO_Init+0x2ac>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d8:	4a45      	ldr	r2, [pc, #276]	@ (80013f0 <HAL_GPIO_Init+0x2b0>)
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3d      	ldr	r2, [pc, #244]	@ (80013f4 <HAL_GPIO_Init+0x2b4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00d      	beq.n	8001320 <HAL_GPIO_Init+0x1e0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3c      	ldr	r2, [pc, #240]	@ (80013f8 <HAL_GPIO_Init+0x2b8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x1dc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3b      	ldr	r2, [pc, #236]	@ (80013fc <HAL_GPIO_Init+0x2bc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_GPIO_Init+0x1d8>
 8001314:	2302      	movs	r3, #2
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1e2>
 8001318:	2303      	movs	r3, #3
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1e2>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1e2>
 8001320:	2300      	movs	r3, #0
 8001322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001332:	492f      	ldr	r1, [pc, #188]	@ (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	492b      	ldr	r1, [pc, #172]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800135a:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4927      	ldr	r1, [pc, #156]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001364:	4013      	ands	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	4921      	ldr	r1, [pc, #132]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	491d      	ldr	r1, [pc, #116]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800138c:	4013      	ands	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4917      	ldr	r1, [pc, #92]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4913      	ldr	r1, [pc, #76]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01f      	beq.n	8001404 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	490d      	ldr	r1, [pc, #52]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e01f      	b.n	8001412 <HAL_GPIO_Init+0x2d2>
 80013d2:	bf00      	nop
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10310000 	.word	0x10310000
 80013dc:	10220000 	.word	0x10220000
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10120000 	.word	0x10120000
 80013e8:	10110000 	.word	0x10110000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000
 8001400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <HAL_GPIO_Init+0x2f4>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4909      	ldr	r1, [pc, #36]	@ (8001434 <HAL_GPIO_Init+0x2f4>)
 800140e:	4013      	ands	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	f47f ae96 	bne.w	8001154 <HAL_GPIO_Init+0x14>
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	372c      	adds	r7, #44	@ 0x2c
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43d9      	mvns	r1, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	400b      	ands	r3, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e272      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8087 	beq.w	80015ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014bc:	4b92      	ldr	r3, [pc, #584]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d00c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d112      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
 80014d4:	4b8c      	ldr	r3, [pc, #560]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e0:	d10b      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e2:	4b89      	ldr	r3, [pc, #548]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d06c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x12c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d168      	bne.n	80015c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e24c      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x76>
 8001504:	4b80      	ldr	r3, [pc, #512]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7f      	ldr	r2, [pc, #508]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e02e      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b7b      	ldr	r3, [pc, #492]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7a      	ldr	r2, [pc, #488]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b78      	ldr	r3, [pc, #480]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a77      	ldr	r2, [pc, #476]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0xbc>
 800153e:	4b72      	ldr	r3, [pc, #456]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a71      	ldr	r2, [pc, #452]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001558:	4b6b      	ldr	r3, [pc, #428]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6a      	ldr	r2, [pc, #424]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b68      	ldr	r3, [pc, #416]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a67      	ldr	r2, [pc, #412]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fcca 	bl	8000f10 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fcc6 	bl	8000f10 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e200      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xe4>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fcb6 	bl	8000f10 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fcb2 	bl	8000f10 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	@ 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1ec      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x10c>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e2:	4b49      	ldr	r3, [pc, #292]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
 80015ee:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b43      	ldr	r3, [pc, #268]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1c0      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4939      	ldr	r1, [pc, #228]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b36      	ldr	r3, [pc, #216]	@ (800170c <HAL_RCC_OscConfig+0x270>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fc6b 	bl	8000f10 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fc67 	bl	8000f10 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1a1      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4927      	ldr	r1, [pc, #156]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b26      	ldr	r3, [pc, #152]	@ (800170c <HAL_RCC_OscConfig+0x270>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fc4a 	bl	8000f10 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fc46 	bl	8000f10 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e180      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d03a      	beq.n	8001720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d019      	beq.n	80016e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <HAL_RCC_OscConfig+0x274>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fc2a 	bl	8000f10 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc26 	bl	8000f10 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e160      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f000 face 	bl	8001c80 <RCC_Delay>
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fc10 	bl	8000f10 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	e00f      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff fc0c 	bl	8000f10 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d908      	bls.n	8001714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e146      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	42420000 	.word	0x42420000
 8001710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b92      	ldr	r3, [pc, #584]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e9      	bne.n	80016f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a6 	beq.w	800187a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b8b      	ldr	r3, [pc, #556]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b88      	ldr	r3, [pc, #544]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a87      	ldr	r2, [pc, #540]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b85      	ldr	r3, [pc, #532]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b82      	ldr	r3, [pc, #520]	@ (8001964 <HAL_RCC_OscConfig+0x4c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b7f      	ldr	r3, [pc, #508]	@ (8001964 <HAL_RCC_OscConfig+0x4c8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7e      	ldr	r2, [pc, #504]	@ (8001964 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff fbcd 	bl	8000f10 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff fbc9 	bl	8000f10 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	@ 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e103      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b75      	ldr	r3, [pc, #468]	@ (8001964 <HAL_RCC_OscConfig+0x4c8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x312>
 80017a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e02d      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x334>
 80017b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a69      	ldr	r2, [pc, #420]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a66      	ldr	r2, [pc, #408]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	e01c      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x356>
 80017d8:	4b61      	ldr	r3, [pc, #388]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a60      	ldr	r2, [pc, #384]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b58      	ldr	r3, [pc, #352]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a57      	ldr	r2, [pc, #348]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb7d 	bl	8000f10 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb79 	bl	8000f10 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0b1      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ee      	beq.n	800181a <HAL_RCC_OscConfig+0x37e>
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb67 	bl	8000f10 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff fb63 	bl	8000f10 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e09b      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	4b40      	ldr	r3, [pc, #256]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ee      	bne.n	8001846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b3c      	ldr	r3, [pc, #240]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a3b      	ldr	r2, [pc, #236]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b36      	ldr	r3, [pc, #216]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d061      	beq.n	8001954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d146      	bne.n	8001926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fb37 	bl	8000f10 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fb33 	bl	8000f10 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e06d      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018cc:	d108      	bne.n	80018e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4921      	ldr	r1, [pc, #132]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a19      	ldr	r1, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	430b      	orrs	r3, r1
 80018f2:	491b      	ldr	r1, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb07 	bl	8000f10 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff fb03 	bl	8000f10 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x46a>
 8001924:	e035      	b.n	8001992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff faf0 	bl	8000f10 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff faec 	bl	8000f10 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e026      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x498>
 8001952:	e01e      	b.n	8001992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e019      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
 8001960:	40021000 	.word	0x40021000
 8001964:	40007000 	.word	0x40007000
 8001968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800196c:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_RCC_OscConfig+0x500>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	429a      	cmp	r2, r3
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0d0      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d910      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b67      	ldr	r3, [pc, #412]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 0207 	bic.w	r2, r3, #7
 80019ca:	4965      	ldr	r1, [pc, #404]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a58      	ldr	r2, [pc, #352]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a52      	ldr	r2, [pc, #328]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d040      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d115      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e073      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06b      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4936      	ldr	r1, [pc, #216]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a90:	f7ff fa3e 	bl	8000f10 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff fa3a 	bl	8000f10 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e053      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d210      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4922      	ldr	r1, [pc, #136]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490a      	ldr	r1, [pc, #40]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <HAL_RCC_ClockConfig+0x1cc>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_RCC_ClockConfig+0x1d0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f99c 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	0800334c 	.word	0x0800334c
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x36>
 8001ba2:	e027      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba6:	613b      	str	r3, [r7, #16]
      break;
 8001ba8:	e027      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	0c9b      	lsrs	r3, r3, #18
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc2:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	0c5b      	lsrs	r3, r3, #17
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	4a11      	ldr	r2, [pc, #68]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bd6:	fb03 f202 	mul.w	r2, r3, r2
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e004      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	613b      	str	r3, [r7, #16]
      break;
 8001bf2:	e002      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bf6:	613b      	str	r3, [r7, #16]
      break;
 8001bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfa:	693b      	ldr	r3, [r7, #16]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	007a1200 	.word	0x007a1200
 8001c10:	08003364 	.word	0x08003364
 8001c14:	08003374 	.word	0x08003374
 8001c18:	003d0900 	.word	0x003d0900

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b02      	ldr	r3, [pc, #8]	@ (8001c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c34:	f7ff fff2 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	@ (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	0800335c 	.word	0x0800335c

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0adb      	lsrs	r3, r3, #11
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	@ (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	0800335c 	.word	0x0800335c

08001c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <RCC_Delay+0x34>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <RCC_Delay+0x38>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a5b      	lsrs	r3, r3, #9
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c9c:	bf00      	nop
  }
  while (Delay --);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	60fa      	str	r2, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f9      	bne.n	8001c9c <RCC_Delay+0x1c>
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e041      	b.n	8001d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe ff90 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f000 fa56 	bl	80021ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e035      	b.n	8001de0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a16      	ldr	r2, [pc, #88]	@ (8001dec <HAL_TIM_Base_Start_IT+0x90>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d009      	beq.n	8001daa <HAL_TIM_Base_Start_IT+0x4e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9e:	d004      	beq.n	8001daa <HAL_TIM_Base_Start_IT+0x4e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <HAL_TIM_Base_Start_IT+0x94>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d111      	bne.n	8001dce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d010      	beq.n	8001dde <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dcc:	e007      	b.n	8001dde <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40012c00 	.word	0x40012c00
 8001df0:	40000400 	.word	0x40000400

08001df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d020      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0202 	mvn.w	r2, #2
 8001e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f998 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e005      	b.n	8001e52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f98b 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f99a 	bl	8002186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d020      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0204 	mvn.w	r2, #4
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f972 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f965 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f974 	bl	8002186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d020      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0208 	mvn.w	r2, #8
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f94c 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f93f 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f94e 	bl	8002186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0210 	mvn.w	r2, #16
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2208      	movs	r2, #8
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f926 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f919 	bl	8002162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f928 	bl	8002186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0201 	mvn.w	r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe ff44 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa6f 	bl	8002462 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8f8 	bl	8002198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0220 	mvn.w	r2, #32
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fa42 	bl	8002450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0b4      	b.n	800215a <HAL_TIM_ConfigClockSource+0x186>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800200e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002028:	d03e      	beq.n	80020a8 <HAL_TIM_ConfigClockSource+0xd4>
 800202a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800202e:	f200 8087 	bhi.w	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002036:	f000 8086 	beq.w	8002146 <HAL_TIM_ConfigClockSource+0x172>
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800203e:	d87f      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002040:	2b70      	cmp	r3, #112	@ 0x70
 8002042:	d01a      	beq.n	800207a <HAL_TIM_ConfigClockSource+0xa6>
 8002044:	2b70      	cmp	r3, #112	@ 0x70
 8002046:	d87b      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002048:	2b60      	cmp	r3, #96	@ 0x60
 800204a:	d050      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0x11a>
 800204c:	2b60      	cmp	r3, #96	@ 0x60
 800204e:	d877      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002050:	2b50      	cmp	r3, #80	@ 0x50
 8002052:	d03c      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0xfa>
 8002054:	2b50      	cmp	r3, #80	@ 0x50
 8002056:	d873      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002058:	2b40      	cmp	r3, #64	@ 0x40
 800205a:	d058      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x13a>
 800205c:	2b40      	cmp	r3, #64	@ 0x40
 800205e:	d86f      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002060:	2b30      	cmp	r3, #48	@ 0x30
 8002062:	d064      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x15a>
 8002064:	2b30      	cmp	r3, #48	@ 0x30
 8002066:	d86b      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002068:	2b20      	cmp	r3, #32
 800206a:	d060      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x15a>
 800206c:	2b20      	cmp	r3, #32
 800206e:	d867      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d05c      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x15a>
 8002074:	2b10      	cmp	r3, #16
 8002076:	d05a      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x15a>
 8002078:	e062      	b.n	8002140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800208a:	f000 f96a 	bl	8002362 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800209c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	609a      	str	r2, [r3, #8]
      break;
 80020a6:	e04f      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020b8:	f000 f953 	bl	8002362 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020ca:	609a      	str	r2, [r3, #8]
      break;
 80020cc:	e03c      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020da:	461a      	mov	r2, r3
 80020dc:	f000 f8ca 	bl	8002274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2150      	movs	r1, #80	@ 0x50
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f921 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 80020ec:	e02c      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fa:	461a      	mov	r2, r3
 80020fc:	f000 f8e8 	bl	80022d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2160      	movs	r1, #96	@ 0x60
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f911 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 800210c:	e01c      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	461a      	mov	r2, r3
 800211c:	f000 f8aa 	bl	8002274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2140      	movs	r1, #64	@ 0x40
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f901 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 800212c:	e00c      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f000 f8f8 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 800213e:	e003      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      break;
 8002144:	e000      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a2b      	ldr	r2, [pc, #172]	@ (800226c <TIM_Base_SetConfig+0xc0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <TIM_Base_SetConfig+0x28>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0x28>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a28      	ldr	r2, [pc, #160]	@ (8002270 <TIM_Base_SetConfig+0xc4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a20      	ldr	r2, [pc, #128]	@ (800226c <TIM_Base_SetConfig+0xc0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0x52>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0x52>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002270 <TIM_Base_SetConfig+0xc4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <TIM_Base_SetConfig+0xc0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f023 0201 	bic.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
  }
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40000400 	.word	0x40000400

08002274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f023 0201 	bic.w	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800229e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f023 030a 	bic.w	r3, r3, #10
 80022b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	621a      	str	r2, [r3, #32]
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f023 0210 	bic.w	r2, r3, #16
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	031b      	lsls	r3, r3, #12
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800230c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	621a      	str	r2, [r3, #32]
}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	f043 0307 	orr.w	r3, r3, #7
 8002350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002362:	b480      	push	{r7}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800237c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	431a      	orrs	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4313      	orrs	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	609a      	str	r2, [r3, #8]
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e041      	b.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002404:	d004      	beq.n	8002410 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a10      	ldr	r2, [pc, #64]	@ (800244c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10c      	bne.n	800242a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	4313      	orrs	r3, r2
 8002420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400

08002450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e042      	b.n	800250c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fbd8 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	@ 0x24
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f971 	bl	80027a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	@ 0x28
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b20      	cmp	r3, #32
 8002532:	d175      	bne.n	8002620 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_UART_Transmit+0x2c>
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e06e      	b.n	8002622 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2221      	movs	r2, #33	@ 0x21
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002552:	f7fe fcdd 	bl	8000f10 <HAL_GetTick>
 8002556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800256c:	d108      	bne.n	8002580 <HAL_UART_Transmit+0x6c>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d104      	bne.n	8002580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	e003      	b.n	8002588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002588:	e02e      	b.n	80025e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	2180      	movs	r1, #128	@ 0x80
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f848 	bl	800262a <UART_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03a      	b.n	8002622 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10b      	bne.n	80025ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3302      	adds	r3, #2
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	e007      	b.n	80025da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3301      	adds	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1cb      	bne.n	800258a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2140      	movs	r1, #64	@ 0x40
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f814 	bl	800262a <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e006      	b.n	8002622 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263a:	e03b      	b.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d037      	beq.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7fe fc64 	bl	8000f10 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <UART_WaitOnFlagUntilTimeout+0x30>
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e03a      	b.n	80026d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d023      	beq.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b80      	cmp	r3, #128	@ 0x80
 8002670:	d020      	beq.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b40      	cmp	r3, #64	@ 0x40
 8002676:	d01d      	beq.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b08      	cmp	r3, #8
 8002684:	d116      	bne.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f81d 	bl	80026dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2208      	movs	r2, #8
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e00f      	b.n	80026d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d0b4      	beq.n	800263c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026dc:	b480      	push	{r7}
 80026de:	b095      	sub	sp, #84	@ 0x54
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ee:	e853 3f00 	ldrex	r3, [r3]
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002704:	643a      	str	r2, [r7, #64]	@ 0x40
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800270a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800270c:	e841 2300 	strex	r3, r2, [r1]
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e5      	bne.n	80026e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3314      	adds	r3, #20
 800271e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	61fb      	str	r3, [r7, #28]
   return(result);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800273e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e5      	bne.n	8002718 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	2b01      	cmp	r3, #1
 8002752:	d119      	bne.n	8002788 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	60bb      	str	r3, [r7, #8]
   return(result);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f023 0310 	bic.w	r3, r3, #16
 800276a:	647b      	str	r3, [r7, #68]	@ 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002774:	61ba      	str	r2, [r7, #24]
 8002776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002778:	6979      	ldr	r1, [r7, #20]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	e841 2300 	strex	r3, r2, [r1]
 8002780:	613b      	str	r3, [r7, #16]
   return(result);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e5      	bne.n	8002754 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002796:	bf00      	nop
 8002798:	3754      	adds	r7, #84	@ 0x54
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80027da:	f023 030c 	bic.w	r3, r3, #12
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2c      	ldr	r2, [pc, #176]	@ (80028b4 <UART_SetConfig+0x114>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d103      	bne.n	8002810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002808:	f7ff fa26 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	e002      	b.n	8002816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002810:	f7ff fa0e 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8002814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009a      	lsls	r2, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	4a22      	ldr	r2, [pc, #136]	@ (80028b8 <UART_SetConfig+0x118>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	0119      	lsls	r1, r3, #4
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f2f3 	udiv	r2, r2, r3
 800284c:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <UART_SetConfig+0x118>)
 800284e:	fba3 0302 	umull	r0, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2064      	movs	r0, #100	@ 0x64
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	@ 0x32
 8002860:	4a15      	ldr	r2, [pc, #84]	@ (80028b8 <UART_SetConfig+0x118>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800286c:	4419      	add	r1, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009a      	lsls	r2, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fbb2 f2f3 	udiv	r2, r2, r3
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <UART_SetConfig+0x118>)
 8002886:	fba3 0302 	umull	r0, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2064      	movs	r0, #100	@ 0x64
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	@ 0x32
 8002898:	4a07      	ldr	r2, [pc, #28]	@ (80028b8 <UART_SetConfig+0x118>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 020f 	and.w	r2, r3, #15
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	440a      	add	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40013800 	.word	0x40013800
 80028b8:	51eb851f 	.word	0x51eb851f

080028bc <malloc>:
 80028bc:	4b02      	ldr	r3, [pc, #8]	@ (80028c8 <malloc+0xc>)
 80028be:	4601      	mov	r1, r0
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	f000 b82d 	b.w	8002920 <_malloc_r>
 80028c6:	bf00      	nop
 80028c8:	2000000c 	.word	0x2000000c

080028cc <free>:
 80028cc:	4b02      	ldr	r3, [pc, #8]	@ (80028d8 <free+0xc>)
 80028ce:	4601      	mov	r1, r0
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f000 b917 	b.w	8002b04 <_free_r>
 80028d6:	bf00      	nop
 80028d8:	2000000c 	.word	0x2000000c

080028dc <sbrk_aligned>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4e0f      	ldr	r6, [pc, #60]	@ (800291c <sbrk_aligned+0x40>)
 80028e0:	460c      	mov	r4, r1
 80028e2:	6831      	ldr	r1, [r6, #0]
 80028e4:	4605      	mov	r5, r0
 80028e6:	b911      	cbnz	r1, 80028ee <sbrk_aligned+0x12>
 80028e8:	f000 f8d0 	bl	8002a8c <_sbrk_r>
 80028ec:	6030      	str	r0, [r6, #0]
 80028ee:	4621      	mov	r1, r4
 80028f0:	4628      	mov	r0, r5
 80028f2:	f000 f8cb 	bl	8002a8c <_sbrk_r>
 80028f6:	1c43      	adds	r3, r0, #1
 80028f8:	d103      	bne.n	8002902 <sbrk_aligned+0x26>
 80028fa:	f04f 34ff 	mov.w	r4, #4294967295
 80028fe:	4620      	mov	r0, r4
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	1cc4      	adds	r4, r0, #3
 8002904:	f024 0403 	bic.w	r4, r4, #3
 8002908:	42a0      	cmp	r0, r4
 800290a:	d0f8      	beq.n	80028fe <sbrk_aligned+0x22>
 800290c:	1a21      	subs	r1, r4, r0
 800290e:	4628      	mov	r0, r5
 8002910:	f000 f8bc 	bl	8002a8c <_sbrk_r>
 8002914:	3001      	adds	r0, #1
 8002916:	d1f2      	bne.n	80028fe <sbrk_aligned+0x22>
 8002918:	e7ef      	b.n	80028fa <sbrk_aligned+0x1e>
 800291a:	bf00      	nop
 800291c:	20000520 	.word	0x20000520

08002920 <_malloc_r>:
 8002920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002924:	1ccd      	adds	r5, r1, #3
 8002926:	f025 0503 	bic.w	r5, r5, #3
 800292a:	3508      	adds	r5, #8
 800292c:	2d0c      	cmp	r5, #12
 800292e:	bf38      	it	cc
 8002930:	250c      	movcc	r5, #12
 8002932:	2d00      	cmp	r5, #0
 8002934:	4606      	mov	r6, r0
 8002936:	db01      	blt.n	800293c <_malloc_r+0x1c>
 8002938:	42a9      	cmp	r1, r5
 800293a:	d904      	bls.n	8002946 <_malloc_r+0x26>
 800293c:	230c      	movs	r3, #12
 800293e:	6033      	str	r3, [r6, #0]
 8002940:	2000      	movs	r0, #0
 8002942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a1c <_malloc_r+0xfc>
 800294a:	f000 f869 	bl	8002a20 <__malloc_lock>
 800294e:	f8d8 3000 	ldr.w	r3, [r8]
 8002952:	461c      	mov	r4, r3
 8002954:	bb44      	cbnz	r4, 80029a8 <_malloc_r+0x88>
 8002956:	4629      	mov	r1, r5
 8002958:	4630      	mov	r0, r6
 800295a:	f7ff ffbf 	bl	80028dc <sbrk_aligned>
 800295e:	1c43      	adds	r3, r0, #1
 8002960:	4604      	mov	r4, r0
 8002962:	d158      	bne.n	8002a16 <_malloc_r+0xf6>
 8002964:	f8d8 4000 	ldr.w	r4, [r8]
 8002968:	4627      	mov	r7, r4
 800296a:	2f00      	cmp	r7, #0
 800296c:	d143      	bne.n	80029f6 <_malloc_r+0xd6>
 800296e:	2c00      	cmp	r4, #0
 8002970:	d04b      	beq.n	8002a0a <_malloc_r+0xea>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	4639      	mov	r1, r7
 8002976:	4630      	mov	r0, r6
 8002978:	eb04 0903 	add.w	r9, r4, r3
 800297c:	f000 f886 	bl	8002a8c <_sbrk_r>
 8002980:	4581      	cmp	r9, r0
 8002982:	d142      	bne.n	8002a0a <_malloc_r+0xea>
 8002984:	6821      	ldr	r1, [r4, #0]
 8002986:	4630      	mov	r0, r6
 8002988:	1a6d      	subs	r5, r5, r1
 800298a:	4629      	mov	r1, r5
 800298c:	f7ff ffa6 	bl	80028dc <sbrk_aligned>
 8002990:	3001      	adds	r0, #1
 8002992:	d03a      	beq.n	8002a0a <_malloc_r+0xea>
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	442b      	add	r3, r5
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	f8d8 3000 	ldr.w	r3, [r8]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	bb62      	cbnz	r2, 80029fc <_malloc_r+0xdc>
 80029a2:	f8c8 7000 	str.w	r7, [r8]
 80029a6:	e00f      	b.n	80029c8 <_malloc_r+0xa8>
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	1b52      	subs	r2, r2, r5
 80029ac:	d420      	bmi.n	80029f0 <_malloc_r+0xd0>
 80029ae:	2a0b      	cmp	r2, #11
 80029b0:	d917      	bls.n	80029e2 <_malloc_r+0xc2>
 80029b2:	1961      	adds	r1, r4, r5
 80029b4:	42a3      	cmp	r3, r4
 80029b6:	6025      	str	r5, [r4, #0]
 80029b8:	bf18      	it	ne
 80029ba:	6059      	strne	r1, [r3, #4]
 80029bc:	6863      	ldr	r3, [r4, #4]
 80029be:	bf08      	it	eq
 80029c0:	f8c8 1000 	streq.w	r1, [r8]
 80029c4:	5162      	str	r2, [r4, r5]
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	4630      	mov	r0, r6
 80029ca:	f000 f82f 	bl	8002a2c <__malloc_unlock>
 80029ce:	f104 000b 	add.w	r0, r4, #11
 80029d2:	1d23      	adds	r3, r4, #4
 80029d4:	f020 0007 	bic.w	r0, r0, #7
 80029d8:	1ac2      	subs	r2, r0, r3
 80029da:	bf1c      	itt	ne
 80029dc:	1a1b      	subne	r3, r3, r0
 80029de:	50a3      	strne	r3, [r4, r2]
 80029e0:	e7af      	b.n	8002942 <_malloc_r+0x22>
 80029e2:	6862      	ldr	r2, [r4, #4]
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	bf0c      	ite	eq
 80029e8:	f8c8 2000 	streq.w	r2, [r8]
 80029ec:	605a      	strne	r2, [r3, #4]
 80029ee:	e7eb      	b.n	80029c8 <_malloc_r+0xa8>
 80029f0:	4623      	mov	r3, r4
 80029f2:	6864      	ldr	r4, [r4, #4]
 80029f4:	e7ae      	b.n	8002954 <_malloc_r+0x34>
 80029f6:	463c      	mov	r4, r7
 80029f8:	687f      	ldr	r7, [r7, #4]
 80029fa:	e7b6      	b.n	800296a <_malloc_r+0x4a>
 80029fc:	461a      	mov	r2, r3
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	d1fb      	bne.n	80029fc <_malloc_r+0xdc>
 8002a04:	2300      	movs	r3, #0
 8002a06:	6053      	str	r3, [r2, #4]
 8002a08:	e7de      	b.n	80029c8 <_malloc_r+0xa8>
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	6033      	str	r3, [r6, #0]
 8002a10:	f000 f80c 	bl	8002a2c <__malloc_unlock>
 8002a14:	e794      	b.n	8002940 <_malloc_r+0x20>
 8002a16:	6005      	str	r5, [r0, #0]
 8002a18:	e7d6      	b.n	80029c8 <_malloc_r+0xa8>
 8002a1a:	bf00      	nop
 8002a1c:	20000524 	.word	0x20000524

08002a20 <__malloc_lock>:
 8002a20:	4801      	ldr	r0, [pc, #4]	@ (8002a28 <__malloc_lock+0x8>)
 8002a22:	f000 b86d 	b.w	8002b00 <__retarget_lock_acquire_recursive>
 8002a26:	bf00      	nop
 8002a28:	20000664 	.word	0x20000664

08002a2c <__malloc_unlock>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	@ (8002a34 <__malloc_unlock+0x8>)
 8002a2e:	f000 b868 	b.w	8002b02 <__retarget_lock_release_recursive>
 8002a32:	bf00      	nop
 8002a34:	20000664 	.word	0x20000664

08002a38 <siprintf>:
 8002a38:	b40e      	push	{r1, r2, r3}
 8002a3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a3e:	b510      	push	{r4, lr}
 8002a40:	2400      	movs	r4, #0
 8002a42:	b09d      	sub	sp, #116	@ 0x74
 8002a44:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002a46:	9002      	str	r0, [sp, #8]
 8002a48:	9006      	str	r0, [sp, #24]
 8002a4a:	9107      	str	r1, [sp, #28]
 8002a4c:	9104      	str	r1, [sp, #16]
 8002a4e:	4809      	ldr	r0, [pc, #36]	@ (8002a74 <siprintf+0x3c>)
 8002a50:	4909      	ldr	r1, [pc, #36]	@ (8002a78 <siprintf+0x40>)
 8002a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a56:	9105      	str	r1, [sp, #20]
 8002a58:	6800      	ldr	r0, [r0, #0]
 8002a5a:	a902      	add	r1, sp, #8
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002a60:	f000 f8f4 	bl	8002c4c <_svfiprintf_r>
 8002a64:	9b02      	ldr	r3, [sp, #8]
 8002a66:	701c      	strb	r4, [r3, #0]
 8002a68:	b01d      	add	sp, #116	@ 0x74
 8002a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a6e:	b003      	add	sp, #12
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	ffff0208 	.word	0xffff0208

08002a7c <memset>:
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4402      	add	r2, r0
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d100      	bne.n	8002a86 <memset+0xa>
 8002a84:	4770      	bx	lr
 8002a86:	f803 1b01 	strb.w	r1, [r3], #1
 8002a8a:	e7f9      	b.n	8002a80 <memset+0x4>

08002a8c <_sbrk_r>:
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4d05      	ldr	r5, [pc, #20]	@ (8002aa8 <_sbrk_r+0x1c>)
 8002a92:	4604      	mov	r4, r0
 8002a94:	4608      	mov	r0, r1
 8002a96:	602b      	str	r3, [r5, #0]
 8002a98:	f7fe f96a 	bl	8000d70 <_sbrk>
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	d102      	bne.n	8002aa6 <_sbrk_r+0x1a>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	b103      	cbz	r3, 8002aa6 <_sbrk_r+0x1a>
 8002aa4:	6023      	str	r3, [r4, #0]
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	20000660 	.word	0x20000660

08002aac <__errno>:
 8002aac:	4b01      	ldr	r3, [pc, #4]	@ (8002ab4 <__errno+0x8>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000000c 	.word	0x2000000c

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	2600      	movs	r6, #0
 8002abc:	4d0c      	ldr	r5, [pc, #48]	@ (8002af0 <__libc_init_array+0x38>)
 8002abe:	4c0d      	ldr	r4, [pc, #52]	@ (8002af4 <__libc_init_array+0x3c>)
 8002ac0:	1b64      	subs	r4, r4, r5
 8002ac2:	10a4      	asrs	r4, r4, #2
 8002ac4:	42a6      	cmp	r6, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	f000 fbb8 	bl	800323c <_init>
 8002acc:	2600      	movs	r6, #0
 8002ace:	4d0a      	ldr	r5, [pc, #40]	@ (8002af8 <__libc_init_array+0x40>)
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8002afc <__libc_init_array+0x44>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	42a6      	cmp	r6, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae0:	4798      	blx	r3
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aea:	4798      	blx	r3
 8002aec:	3601      	adds	r6, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	080033b4 	.word	0x080033b4
 8002af4:	080033b4 	.word	0x080033b4
 8002af8:	080033b4 	.word	0x080033b4
 8002afc:	080033b8 	.word	0x080033b8

08002b00 <__retarget_lock_acquire_recursive>:
 8002b00:	4770      	bx	lr

08002b02 <__retarget_lock_release_recursive>:
 8002b02:	4770      	bx	lr

08002b04 <_free_r>:
 8002b04:	b538      	push	{r3, r4, r5, lr}
 8002b06:	4605      	mov	r5, r0
 8002b08:	2900      	cmp	r1, #0
 8002b0a:	d040      	beq.n	8002b8e <_free_r+0x8a>
 8002b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b10:	1f0c      	subs	r4, r1, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bfb8      	it	lt
 8002b16:	18e4      	addlt	r4, r4, r3
 8002b18:	f7ff ff82 	bl	8002a20 <__malloc_lock>
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b90 <_free_r+0x8c>)
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	b933      	cbnz	r3, 8002b30 <_free_r+0x2c>
 8002b22:	6063      	str	r3, [r4, #4]
 8002b24:	6014      	str	r4, [r2, #0]
 8002b26:	4628      	mov	r0, r5
 8002b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b2c:	f7ff bf7e 	b.w	8002a2c <__malloc_unlock>
 8002b30:	42a3      	cmp	r3, r4
 8002b32:	d908      	bls.n	8002b46 <_free_r+0x42>
 8002b34:	6820      	ldr	r0, [r4, #0]
 8002b36:	1821      	adds	r1, r4, r0
 8002b38:	428b      	cmp	r3, r1
 8002b3a:	bf01      	itttt	eq
 8002b3c:	6819      	ldreq	r1, [r3, #0]
 8002b3e:	685b      	ldreq	r3, [r3, #4]
 8002b40:	1809      	addeq	r1, r1, r0
 8002b42:	6021      	streq	r1, [r4, #0]
 8002b44:	e7ed      	b.n	8002b22 <_free_r+0x1e>
 8002b46:	461a      	mov	r2, r3
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b10b      	cbz	r3, 8002b50 <_free_r+0x4c>
 8002b4c:	42a3      	cmp	r3, r4
 8002b4e:	d9fa      	bls.n	8002b46 <_free_r+0x42>
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	1850      	adds	r0, r2, r1
 8002b54:	42a0      	cmp	r0, r4
 8002b56:	d10b      	bne.n	8002b70 <_free_r+0x6c>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	4401      	add	r1, r0
 8002b5c:	1850      	adds	r0, r2, r1
 8002b5e:	4283      	cmp	r3, r0
 8002b60:	6011      	str	r1, [r2, #0]
 8002b62:	d1e0      	bne.n	8002b26 <_free_r+0x22>
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4408      	add	r0, r1
 8002b6a:	6010      	str	r0, [r2, #0]
 8002b6c:	6053      	str	r3, [r2, #4]
 8002b6e:	e7da      	b.n	8002b26 <_free_r+0x22>
 8002b70:	d902      	bls.n	8002b78 <_free_r+0x74>
 8002b72:	230c      	movs	r3, #12
 8002b74:	602b      	str	r3, [r5, #0]
 8002b76:	e7d6      	b.n	8002b26 <_free_r+0x22>
 8002b78:	6820      	ldr	r0, [r4, #0]
 8002b7a:	1821      	adds	r1, r4, r0
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	bf01      	itttt	eq
 8002b80:	6819      	ldreq	r1, [r3, #0]
 8002b82:	685b      	ldreq	r3, [r3, #4]
 8002b84:	1809      	addeq	r1, r1, r0
 8002b86:	6021      	streq	r1, [r4, #0]
 8002b88:	6063      	str	r3, [r4, #4]
 8002b8a:	6054      	str	r4, [r2, #4]
 8002b8c:	e7cb      	b.n	8002b26 <_free_r+0x22>
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}
 8002b90:	20000524 	.word	0x20000524

08002b94 <__ssputs_r>:
 8002b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	461f      	mov	r7, r3
 8002b9a:	688e      	ldr	r6, [r1, #8]
 8002b9c:	4682      	mov	sl, r0
 8002b9e:	42be      	cmp	r6, r7
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	4690      	mov	r8, r2
 8002ba4:	680b      	ldr	r3, [r1, #0]
 8002ba6:	d82d      	bhi.n	8002c04 <__ssputs_r+0x70>
 8002ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002bb0:	d026      	beq.n	8002c00 <__ssputs_r+0x6c>
 8002bb2:	6965      	ldr	r5, [r4, #20]
 8002bb4:	6909      	ldr	r1, [r1, #16]
 8002bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bba:	eba3 0901 	sub.w	r9, r3, r1
 8002bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bc2:	1c7b      	adds	r3, r7, #1
 8002bc4:	444b      	add	r3, r9
 8002bc6:	106d      	asrs	r5, r5, #1
 8002bc8:	429d      	cmp	r5, r3
 8002bca:	bf38      	it	cc
 8002bcc:	461d      	movcc	r5, r3
 8002bce:	0553      	lsls	r3, r2, #21
 8002bd0:	d527      	bpl.n	8002c22 <__ssputs_r+0x8e>
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	f7ff fea4 	bl	8002920 <_malloc_r>
 8002bd8:	4606      	mov	r6, r0
 8002bda:	b360      	cbz	r0, 8002c36 <__ssputs_r+0xa2>
 8002bdc:	464a      	mov	r2, r9
 8002bde:	6921      	ldr	r1, [r4, #16]
 8002be0:	f000 fae8 	bl	80031b4 <memcpy>
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bee:	81a3      	strh	r3, [r4, #12]
 8002bf0:	6126      	str	r6, [r4, #16]
 8002bf2:	444e      	add	r6, r9
 8002bf4:	6026      	str	r6, [r4, #0]
 8002bf6:	463e      	mov	r6, r7
 8002bf8:	6165      	str	r5, [r4, #20]
 8002bfa:	eba5 0509 	sub.w	r5, r5, r9
 8002bfe:	60a5      	str	r5, [r4, #8]
 8002c00:	42be      	cmp	r6, r7
 8002c02:	d900      	bls.n	8002c06 <__ssputs_r+0x72>
 8002c04:	463e      	mov	r6, r7
 8002c06:	4632      	mov	r2, r6
 8002c08:	4641      	mov	r1, r8
 8002c0a:	6820      	ldr	r0, [r4, #0]
 8002c0c:	f000 faaa 	bl	8003164 <memmove>
 8002c10:	2000      	movs	r0, #0
 8002c12:	68a3      	ldr	r3, [r4, #8]
 8002c14:	1b9b      	subs	r3, r3, r6
 8002c16:	60a3      	str	r3, [r4, #8]
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	4433      	add	r3, r6
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c22:	462a      	mov	r2, r5
 8002c24:	f000 fad4 	bl	80031d0 <_realloc_r>
 8002c28:	4606      	mov	r6, r0
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d1e0      	bne.n	8002bf0 <__ssputs_r+0x5c>
 8002c2e:	4650      	mov	r0, sl
 8002c30:	6921      	ldr	r1, [r4, #16]
 8002c32:	f7ff ff67 	bl	8002b04 <_free_r>
 8002c36:	230c      	movs	r3, #12
 8002c38:	f8ca 3000 	str.w	r3, [sl]
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c46:	81a3      	strh	r3, [r4, #12]
 8002c48:	e7e9      	b.n	8002c1e <__ssputs_r+0x8a>
	...

08002c4c <_svfiprintf_r>:
 8002c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c50:	4698      	mov	r8, r3
 8002c52:	898b      	ldrh	r3, [r1, #12]
 8002c54:	4607      	mov	r7, r0
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	460d      	mov	r5, r1
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	b09d      	sub	sp, #116	@ 0x74
 8002c5e:	d510      	bpl.n	8002c82 <_svfiprintf_r+0x36>
 8002c60:	690b      	ldr	r3, [r1, #16]
 8002c62:	b973      	cbnz	r3, 8002c82 <_svfiprintf_r+0x36>
 8002c64:	2140      	movs	r1, #64	@ 0x40
 8002c66:	f7ff fe5b 	bl	8002920 <_malloc_r>
 8002c6a:	6028      	str	r0, [r5, #0]
 8002c6c:	6128      	str	r0, [r5, #16]
 8002c6e:	b930      	cbnz	r0, 8002c7e <_svfiprintf_r+0x32>
 8002c70:	230c      	movs	r3, #12
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	b01d      	add	sp, #116	@ 0x74
 8002c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7e:	2340      	movs	r3, #64	@ 0x40
 8002c80:	616b      	str	r3, [r5, #20]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c86:	2320      	movs	r3, #32
 8002c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c8c:	2330      	movs	r3, #48	@ 0x30
 8002c8e:	f04f 0901 	mov.w	r9, #1
 8002c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002e30 <_svfiprintf_r+0x1e4>
 8002c9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	469a      	mov	sl, r3
 8002ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ca6:	b10a      	cbz	r2, 8002cac <_svfiprintf_r+0x60>
 8002ca8:	2a25      	cmp	r2, #37	@ 0x25
 8002caa:	d1f9      	bne.n	8002ca0 <_svfiprintf_r+0x54>
 8002cac:	ebba 0b04 	subs.w	fp, sl, r4
 8002cb0:	d00b      	beq.n	8002cca <_svfiprintf_r+0x7e>
 8002cb2:	465b      	mov	r3, fp
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4638      	mov	r0, r7
 8002cba:	f7ff ff6b 	bl	8002b94 <__ssputs_r>
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	f000 80a7 	beq.w	8002e12 <_svfiprintf_r+0x1c6>
 8002cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cc6:	445a      	add	r2, fp
 8002cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cca:	f89a 3000 	ldrb.w	r3, [sl]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 809f 	beq.w	8002e12 <_svfiprintf_r+0x1c6>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cde:	f10a 0a01 	add.w	sl, sl, #1
 8002ce2:	9304      	str	r3, [sp, #16]
 8002ce4:	9307      	str	r3, [sp, #28]
 8002ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8002cec:	4654      	mov	r4, sl
 8002cee:	2205      	movs	r2, #5
 8002cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf4:	484e      	ldr	r0, [pc, #312]	@ (8002e30 <_svfiprintf_r+0x1e4>)
 8002cf6:	f000 fa4f 	bl	8003198 <memchr>
 8002cfa:	9a04      	ldr	r2, [sp, #16]
 8002cfc:	b9d8      	cbnz	r0, 8002d36 <_svfiprintf_r+0xea>
 8002cfe:	06d0      	lsls	r0, r2, #27
 8002d00:	bf44      	itt	mi
 8002d02:	2320      	movmi	r3, #32
 8002d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d08:	0711      	lsls	r1, r2, #28
 8002d0a:	bf44      	itt	mi
 8002d0c:	232b      	movmi	r3, #43	@ 0x2b
 8002d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d12:	f89a 3000 	ldrb.w	r3, [sl]
 8002d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d18:	d015      	beq.n	8002d46 <_svfiprintf_r+0xfa>
 8002d1a:	4654      	mov	r4, sl
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f04f 0c0a 	mov.w	ip, #10
 8002d22:	9a07      	ldr	r2, [sp, #28]
 8002d24:	4621      	mov	r1, r4
 8002d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d2a:	3b30      	subs	r3, #48	@ 0x30
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d94b      	bls.n	8002dc8 <_svfiprintf_r+0x17c>
 8002d30:	b1b0      	cbz	r0, 8002d60 <_svfiprintf_r+0x114>
 8002d32:	9207      	str	r2, [sp, #28]
 8002d34:	e014      	b.n	8002d60 <_svfiprintf_r+0x114>
 8002d36:	eba0 0308 	sub.w	r3, r0, r8
 8002d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	46a2      	mov	sl, r4
 8002d42:	9304      	str	r3, [sp, #16]
 8002d44:	e7d2      	b.n	8002cec <_svfiprintf_r+0xa0>
 8002d46:	9b03      	ldr	r3, [sp, #12]
 8002d48:	1d19      	adds	r1, r3, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	9103      	str	r1, [sp, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bfbb      	ittet	lt
 8002d52:	425b      	neglt	r3, r3
 8002d54:	f042 0202 	orrlt.w	r2, r2, #2
 8002d58:	9307      	strge	r3, [sp, #28]
 8002d5a:	9307      	strlt	r3, [sp, #28]
 8002d5c:	bfb8      	it	lt
 8002d5e:	9204      	strlt	r2, [sp, #16]
 8002d60:	7823      	ldrb	r3, [r4, #0]
 8002d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d64:	d10a      	bne.n	8002d7c <_svfiprintf_r+0x130>
 8002d66:	7863      	ldrb	r3, [r4, #1]
 8002d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d6a:	d132      	bne.n	8002dd2 <_svfiprintf_r+0x186>
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	3402      	adds	r4, #2
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	9203      	str	r2, [sp, #12]
 8002d76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d7a:	9305      	str	r3, [sp, #20]
 8002d7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002e34 <_svfiprintf_r+0x1e8>
 8002d80:	2203      	movs	r2, #3
 8002d82:	4650      	mov	r0, sl
 8002d84:	7821      	ldrb	r1, [r4, #0]
 8002d86:	f000 fa07 	bl	8003198 <memchr>
 8002d8a:	b138      	cbz	r0, 8002d9c <_svfiprintf_r+0x150>
 8002d8c:	2240      	movs	r2, #64	@ 0x40
 8002d8e:	9b04      	ldr	r3, [sp, #16]
 8002d90:	eba0 000a 	sub.w	r0, r0, sl
 8002d94:	4082      	lsls	r2, r0
 8002d96:	4313      	orrs	r3, r2
 8002d98:	3401      	adds	r4, #1
 8002d9a:	9304      	str	r3, [sp, #16]
 8002d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da0:	2206      	movs	r2, #6
 8002da2:	4825      	ldr	r0, [pc, #148]	@ (8002e38 <_svfiprintf_r+0x1ec>)
 8002da4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002da8:	f000 f9f6 	bl	8003198 <memchr>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d036      	beq.n	8002e1e <_svfiprintf_r+0x1d2>
 8002db0:	4b22      	ldr	r3, [pc, #136]	@ (8002e3c <_svfiprintf_r+0x1f0>)
 8002db2:	bb1b      	cbnz	r3, 8002dfc <_svfiprintf_r+0x1b0>
 8002db4:	9b03      	ldr	r3, [sp, #12]
 8002db6:	3307      	adds	r3, #7
 8002db8:	f023 0307 	bic.w	r3, r3, #7
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	9303      	str	r3, [sp, #12]
 8002dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dc2:	4433      	add	r3, r6
 8002dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dc6:	e76a      	b.n	8002c9e <_svfiprintf_r+0x52>
 8002dc8:	460c      	mov	r4, r1
 8002dca:	2001      	movs	r0, #1
 8002dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dd0:	e7a8      	b.n	8002d24 <_svfiprintf_r+0xd8>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f04f 0c0a 	mov.w	ip, #10
 8002dd8:	4619      	mov	r1, r3
 8002dda:	3401      	adds	r4, #1
 8002ddc:	9305      	str	r3, [sp, #20]
 8002dde:	4620      	mov	r0, r4
 8002de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002de4:	3a30      	subs	r2, #48	@ 0x30
 8002de6:	2a09      	cmp	r2, #9
 8002de8:	d903      	bls.n	8002df2 <_svfiprintf_r+0x1a6>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0c6      	beq.n	8002d7c <_svfiprintf_r+0x130>
 8002dee:	9105      	str	r1, [sp, #20]
 8002df0:	e7c4      	b.n	8002d7c <_svfiprintf_r+0x130>
 8002df2:	4604      	mov	r4, r0
 8002df4:	2301      	movs	r3, #1
 8002df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dfa:	e7f0      	b.n	8002dde <_svfiprintf_r+0x192>
 8002dfc:	ab03      	add	r3, sp, #12
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	462a      	mov	r2, r5
 8002e02:	4638      	mov	r0, r7
 8002e04:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <_svfiprintf_r+0x1f4>)
 8002e06:	a904      	add	r1, sp, #16
 8002e08:	f3af 8000 	nop.w
 8002e0c:	1c42      	adds	r2, r0, #1
 8002e0e:	4606      	mov	r6, r0
 8002e10:	d1d6      	bne.n	8002dc0 <_svfiprintf_r+0x174>
 8002e12:	89ab      	ldrh	r3, [r5, #12]
 8002e14:	065b      	lsls	r3, r3, #25
 8002e16:	f53f af2d 	bmi.w	8002c74 <_svfiprintf_r+0x28>
 8002e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e1c:	e72c      	b.n	8002c78 <_svfiprintf_r+0x2c>
 8002e1e:	ab03      	add	r3, sp, #12
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	462a      	mov	r2, r5
 8002e24:	4638      	mov	r0, r7
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <_svfiprintf_r+0x1f4>)
 8002e28:	a904      	add	r1, sp, #16
 8002e2a:	f000 f87d 	bl	8002f28 <_printf_i>
 8002e2e:	e7ed      	b.n	8002e0c <_svfiprintf_r+0x1c0>
 8002e30:	08003376 	.word	0x08003376
 8002e34:	0800337c 	.word	0x0800337c
 8002e38:	08003380 	.word	0x08003380
 8002e3c:	00000000 	.word	0x00000000
 8002e40:	08002b95 	.word	0x08002b95

08002e44 <_printf_common>:
 8002e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e48:	4616      	mov	r6, r2
 8002e4a:	4698      	mov	r8, r3
 8002e4c:	688a      	ldr	r2, [r1, #8]
 8002e4e:	690b      	ldr	r3, [r1, #16]
 8002e50:	4607      	mov	r7, r0
 8002e52:	4293      	cmp	r3, r2
 8002e54:	bfb8      	it	lt
 8002e56:	4613      	movlt	r3, r2
 8002e58:	6033      	str	r3, [r6, #0]
 8002e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e5e:	460c      	mov	r4, r1
 8002e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e64:	b10a      	cbz	r2, 8002e6a <_printf_common+0x26>
 8002e66:	3301      	adds	r3, #1
 8002e68:	6033      	str	r3, [r6, #0]
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	0699      	lsls	r1, r3, #26
 8002e6e:	bf42      	ittt	mi
 8002e70:	6833      	ldrmi	r3, [r6, #0]
 8002e72:	3302      	addmi	r3, #2
 8002e74:	6033      	strmi	r3, [r6, #0]
 8002e76:	6825      	ldr	r5, [r4, #0]
 8002e78:	f015 0506 	ands.w	r5, r5, #6
 8002e7c:	d106      	bne.n	8002e8c <_printf_common+0x48>
 8002e7e:	f104 0a19 	add.w	sl, r4, #25
 8002e82:	68e3      	ldr	r3, [r4, #12]
 8002e84:	6832      	ldr	r2, [r6, #0]
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	42ab      	cmp	r3, r5
 8002e8a:	dc2b      	bgt.n	8002ee4 <_printf_common+0xa0>
 8002e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e90:	6822      	ldr	r2, [r4, #0]
 8002e92:	3b00      	subs	r3, #0
 8002e94:	bf18      	it	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	0692      	lsls	r2, r2, #26
 8002e9a:	d430      	bmi.n	8002efe <_printf_common+0xba>
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ea4:	47c8      	blx	r9
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d023      	beq.n	8002ef2 <_printf_common+0xae>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	6922      	ldr	r2, [r4, #16]
 8002eae:	f003 0306 	and.w	r3, r3, #6
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf14      	ite	ne
 8002eb6:	2500      	movne	r5, #0
 8002eb8:	6833      	ldreq	r3, [r6, #0]
 8002eba:	f04f 0600 	mov.w	r6, #0
 8002ebe:	bf08      	it	eq
 8002ec0:	68e5      	ldreq	r5, [r4, #12]
 8002ec2:	f104 041a 	add.w	r4, r4, #26
 8002ec6:	bf08      	it	eq
 8002ec8:	1aed      	subeq	r5, r5, r3
 8002eca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002ece:	bf08      	it	eq
 8002ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	bfc4      	itt	gt
 8002ed8:	1a9b      	subgt	r3, r3, r2
 8002eda:	18ed      	addgt	r5, r5, r3
 8002edc:	42b5      	cmp	r5, r6
 8002ede:	d11a      	bne.n	8002f16 <_printf_common+0xd2>
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	e008      	b.n	8002ef6 <_printf_common+0xb2>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4652      	mov	r2, sl
 8002ee8:	4641      	mov	r1, r8
 8002eea:	4638      	mov	r0, r7
 8002eec:	47c8      	blx	r9
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d103      	bne.n	8002efa <_printf_common+0xb6>
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002efa:	3501      	adds	r5, #1
 8002efc:	e7c1      	b.n	8002e82 <_printf_common+0x3e>
 8002efe:	2030      	movs	r0, #48	@ 0x30
 8002f00:	18e1      	adds	r1, r4, r3
 8002f02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f0c:	4422      	add	r2, r4
 8002f0e:	3302      	adds	r3, #2
 8002f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f14:	e7c2      	b.n	8002e9c <_printf_common+0x58>
 8002f16:	2301      	movs	r3, #1
 8002f18:	4622      	mov	r2, r4
 8002f1a:	4641      	mov	r1, r8
 8002f1c:	4638      	mov	r0, r7
 8002f1e:	47c8      	blx	r9
 8002f20:	3001      	adds	r0, #1
 8002f22:	d0e6      	beq.n	8002ef2 <_printf_common+0xae>
 8002f24:	3601      	adds	r6, #1
 8002f26:	e7d9      	b.n	8002edc <_printf_common+0x98>

08002f28 <_printf_i>:
 8002f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f2c:	7e0f      	ldrb	r7, [r1, #24]
 8002f2e:	4691      	mov	r9, r2
 8002f30:	2f78      	cmp	r7, #120	@ 0x78
 8002f32:	4680      	mov	r8, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	469a      	mov	sl, r3
 8002f38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f3e:	d807      	bhi.n	8002f50 <_printf_i+0x28>
 8002f40:	2f62      	cmp	r7, #98	@ 0x62
 8002f42:	d80a      	bhi.n	8002f5a <_printf_i+0x32>
 8002f44:	2f00      	cmp	r7, #0
 8002f46:	f000 80d1 	beq.w	80030ec <_printf_i+0x1c4>
 8002f4a:	2f58      	cmp	r7, #88	@ 0x58
 8002f4c:	f000 80b8 	beq.w	80030c0 <_printf_i+0x198>
 8002f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f58:	e03a      	b.n	8002fd0 <_printf_i+0xa8>
 8002f5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f5e:	2b15      	cmp	r3, #21
 8002f60:	d8f6      	bhi.n	8002f50 <_printf_i+0x28>
 8002f62:	a101      	add	r1, pc, #4	@ (adr r1, 8002f68 <_printf_i+0x40>)
 8002f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f68:	08002fc1 	.word	0x08002fc1
 8002f6c:	08002fd5 	.word	0x08002fd5
 8002f70:	08002f51 	.word	0x08002f51
 8002f74:	08002f51 	.word	0x08002f51
 8002f78:	08002f51 	.word	0x08002f51
 8002f7c:	08002f51 	.word	0x08002f51
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002f51 	.word	0x08002f51
 8002f88:	08002f51 	.word	0x08002f51
 8002f8c:	08002f51 	.word	0x08002f51
 8002f90:	08002f51 	.word	0x08002f51
 8002f94:	080030d3 	.word	0x080030d3
 8002f98:	08002fff 	.word	0x08002fff
 8002f9c:	0800308d 	.word	0x0800308d
 8002fa0:	08002f51 	.word	0x08002f51
 8002fa4:	08002f51 	.word	0x08002f51
 8002fa8:	080030f5 	.word	0x080030f5
 8002fac:	08002f51 	.word	0x08002f51
 8002fb0:	08002fff 	.word	0x08002fff
 8002fb4:	08002f51 	.word	0x08002f51
 8002fb8:	08002f51 	.word	0x08002f51
 8002fbc:	08003095 	.word	0x08003095
 8002fc0:	6833      	ldr	r3, [r6, #0]
 8002fc2:	1d1a      	adds	r2, r3, #4
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6032      	str	r2, [r6, #0]
 8002fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e09c      	b.n	800310e <_printf_i+0x1e6>
 8002fd4:	6833      	ldr	r3, [r6, #0]
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	1d19      	adds	r1, r3, #4
 8002fda:	6031      	str	r1, [r6, #0]
 8002fdc:	0606      	lsls	r6, r0, #24
 8002fde:	d501      	bpl.n	8002fe4 <_printf_i+0xbc>
 8002fe0:	681d      	ldr	r5, [r3, #0]
 8002fe2:	e003      	b.n	8002fec <_printf_i+0xc4>
 8002fe4:	0645      	lsls	r5, r0, #25
 8002fe6:	d5fb      	bpl.n	8002fe0 <_printf_i+0xb8>
 8002fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002fec:	2d00      	cmp	r5, #0
 8002fee:	da03      	bge.n	8002ff8 <_printf_i+0xd0>
 8002ff0:	232d      	movs	r3, #45	@ 0x2d
 8002ff2:	426d      	negs	r5, r5
 8002ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ff8:	230a      	movs	r3, #10
 8002ffa:	4858      	ldr	r0, [pc, #352]	@ (800315c <_printf_i+0x234>)
 8002ffc:	e011      	b.n	8003022 <_printf_i+0xfa>
 8002ffe:	6821      	ldr	r1, [r4, #0]
 8003000:	6833      	ldr	r3, [r6, #0]
 8003002:	0608      	lsls	r0, r1, #24
 8003004:	f853 5b04 	ldr.w	r5, [r3], #4
 8003008:	d402      	bmi.n	8003010 <_printf_i+0xe8>
 800300a:	0649      	lsls	r1, r1, #25
 800300c:	bf48      	it	mi
 800300e:	b2ad      	uxthmi	r5, r5
 8003010:	2f6f      	cmp	r7, #111	@ 0x6f
 8003012:	6033      	str	r3, [r6, #0]
 8003014:	bf14      	ite	ne
 8003016:	230a      	movne	r3, #10
 8003018:	2308      	moveq	r3, #8
 800301a:	4850      	ldr	r0, [pc, #320]	@ (800315c <_printf_i+0x234>)
 800301c:	2100      	movs	r1, #0
 800301e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003022:	6866      	ldr	r6, [r4, #4]
 8003024:	2e00      	cmp	r6, #0
 8003026:	60a6      	str	r6, [r4, #8]
 8003028:	db05      	blt.n	8003036 <_printf_i+0x10e>
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	432e      	orrs	r6, r5
 800302e:	f021 0104 	bic.w	r1, r1, #4
 8003032:	6021      	str	r1, [r4, #0]
 8003034:	d04b      	beq.n	80030ce <_printf_i+0x1a6>
 8003036:	4616      	mov	r6, r2
 8003038:	fbb5 f1f3 	udiv	r1, r5, r3
 800303c:	fb03 5711 	mls	r7, r3, r1, r5
 8003040:	5dc7      	ldrb	r7, [r0, r7]
 8003042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003046:	462f      	mov	r7, r5
 8003048:	42bb      	cmp	r3, r7
 800304a:	460d      	mov	r5, r1
 800304c:	d9f4      	bls.n	8003038 <_printf_i+0x110>
 800304e:	2b08      	cmp	r3, #8
 8003050:	d10b      	bne.n	800306a <_printf_i+0x142>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	07df      	lsls	r7, r3, #31
 8003056:	d508      	bpl.n	800306a <_printf_i+0x142>
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	6861      	ldr	r1, [r4, #4]
 800305c:	4299      	cmp	r1, r3
 800305e:	bfde      	ittt	le
 8003060:	2330      	movle	r3, #48	@ 0x30
 8003062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800306a:	1b92      	subs	r2, r2, r6
 800306c:	6122      	str	r2, [r4, #16]
 800306e:	464b      	mov	r3, r9
 8003070:	4621      	mov	r1, r4
 8003072:	4640      	mov	r0, r8
 8003074:	f8cd a000 	str.w	sl, [sp]
 8003078:	aa03      	add	r2, sp, #12
 800307a:	f7ff fee3 	bl	8002e44 <_printf_common>
 800307e:	3001      	adds	r0, #1
 8003080:	d14a      	bne.n	8003118 <_printf_i+0x1f0>
 8003082:	f04f 30ff 	mov.w	r0, #4294967295
 8003086:	b004      	add	sp, #16
 8003088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	f043 0320 	orr.w	r3, r3, #32
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	2778      	movs	r7, #120	@ 0x78
 8003096:	4832      	ldr	r0, [pc, #200]	@ (8003160 <_printf_i+0x238>)
 8003098:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	6831      	ldr	r1, [r6, #0]
 80030a0:	061f      	lsls	r7, r3, #24
 80030a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80030a6:	d402      	bmi.n	80030ae <_printf_i+0x186>
 80030a8:	065f      	lsls	r7, r3, #25
 80030aa:	bf48      	it	mi
 80030ac:	b2ad      	uxthmi	r5, r5
 80030ae:	6031      	str	r1, [r6, #0]
 80030b0:	07d9      	lsls	r1, r3, #31
 80030b2:	bf44      	itt	mi
 80030b4:	f043 0320 	orrmi.w	r3, r3, #32
 80030b8:	6023      	strmi	r3, [r4, #0]
 80030ba:	b11d      	cbz	r5, 80030c4 <_printf_i+0x19c>
 80030bc:	2310      	movs	r3, #16
 80030be:	e7ad      	b.n	800301c <_printf_i+0xf4>
 80030c0:	4826      	ldr	r0, [pc, #152]	@ (800315c <_printf_i+0x234>)
 80030c2:	e7e9      	b.n	8003098 <_printf_i+0x170>
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	f023 0320 	bic.w	r3, r3, #32
 80030ca:	6023      	str	r3, [r4, #0]
 80030cc:	e7f6      	b.n	80030bc <_printf_i+0x194>
 80030ce:	4616      	mov	r6, r2
 80030d0:	e7bd      	b.n	800304e <_printf_i+0x126>
 80030d2:	6833      	ldr	r3, [r6, #0]
 80030d4:	6825      	ldr	r5, [r4, #0]
 80030d6:	1d18      	adds	r0, r3, #4
 80030d8:	6961      	ldr	r1, [r4, #20]
 80030da:	6030      	str	r0, [r6, #0]
 80030dc:	062e      	lsls	r6, r5, #24
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	d501      	bpl.n	80030e6 <_printf_i+0x1be>
 80030e2:	6019      	str	r1, [r3, #0]
 80030e4:	e002      	b.n	80030ec <_printf_i+0x1c4>
 80030e6:	0668      	lsls	r0, r5, #25
 80030e8:	d5fb      	bpl.n	80030e2 <_printf_i+0x1ba>
 80030ea:	8019      	strh	r1, [r3, #0]
 80030ec:	2300      	movs	r3, #0
 80030ee:	4616      	mov	r6, r2
 80030f0:	6123      	str	r3, [r4, #16]
 80030f2:	e7bc      	b.n	800306e <_printf_i+0x146>
 80030f4:	6833      	ldr	r3, [r6, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	1d1a      	adds	r2, r3, #4
 80030fa:	6032      	str	r2, [r6, #0]
 80030fc:	681e      	ldr	r6, [r3, #0]
 80030fe:	6862      	ldr	r2, [r4, #4]
 8003100:	4630      	mov	r0, r6
 8003102:	f000 f849 	bl	8003198 <memchr>
 8003106:	b108      	cbz	r0, 800310c <_printf_i+0x1e4>
 8003108:	1b80      	subs	r0, r0, r6
 800310a:	6060      	str	r0, [r4, #4]
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	6123      	str	r3, [r4, #16]
 8003110:	2300      	movs	r3, #0
 8003112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003116:	e7aa      	b.n	800306e <_printf_i+0x146>
 8003118:	4632      	mov	r2, r6
 800311a:	4649      	mov	r1, r9
 800311c:	4640      	mov	r0, r8
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	47d0      	blx	sl
 8003122:	3001      	adds	r0, #1
 8003124:	d0ad      	beq.n	8003082 <_printf_i+0x15a>
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	079b      	lsls	r3, r3, #30
 800312a:	d413      	bmi.n	8003154 <_printf_i+0x22c>
 800312c:	68e0      	ldr	r0, [r4, #12]
 800312e:	9b03      	ldr	r3, [sp, #12]
 8003130:	4298      	cmp	r0, r3
 8003132:	bfb8      	it	lt
 8003134:	4618      	movlt	r0, r3
 8003136:	e7a6      	b.n	8003086 <_printf_i+0x15e>
 8003138:	2301      	movs	r3, #1
 800313a:	4632      	mov	r2, r6
 800313c:	4649      	mov	r1, r9
 800313e:	4640      	mov	r0, r8
 8003140:	47d0      	blx	sl
 8003142:	3001      	adds	r0, #1
 8003144:	d09d      	beq.n	8003082 <_printf_i+0x15a>
 8003146:	3501      	adds	r5, #1
 8003148:	68e3      	ldr	r3, [r4, #12]
 800314a:	9903      	ldr	r1, [sp, #12]
 800314c:	1a5b      	subs	r3, r3, r1
 800314e:	42ab      	cmp	r3, r5
 8003150:	dcf2      	bgt.n	8003138 <_printf_i+0x210>
 8003152:	e7eb      	b.n	800312c <_printf_i+0x204>
 8003154:	2500      	movs	r5, #0
 8003156:	f104 0619 	add.w	r6, r4, #25
 800315a:	e7f5      	b.n	8003148 <_printf_i+0x220>
 800315c:	08003387 	.word	0x08003387
 8003160:	08003398 	.word	0x08003398

08003164 <memmove>:
 8003164:	4288      	cmp	r0, r1
 8003166:	b510      	push	{r4, lr}
 8003168:	eb01 0402 	add.w	r4, r1, r2
 800316c:	d902      	bls.n	8003174 <memmove+0x10>
 800316e:	4284      	cmp	r4, r0
 8003170:	4623      	mov	r3, r4
 8003172:	d807      	bhi.n	8003184 <memmove+0x20>
 8003174:	1e43      	subs	r3, r0, #1
 8003176:	42a1      	cmp	r1, r4
 8003178:	d008      	beq.n	800318c <memmove+0x28>
 800317a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800317e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003182:	e7f8      	b.n	8003176 <memmove+0x12>
 8003184:	4601      	mov	r1, r0
 8003186:	4402      	add	r2, r0
 8003188:	428a      	cmp	r2, r1
 800318a:	d100      	bne.n	800318e <memmove+0x2a>
 800318c:	bd10      	pop	{r4, pc}
 800318e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003196:	e7f7      	b.n	8003188 <memmove+0x24>

08003198 <memchr>:
 8003198:	4603      	mov	r3, r0
 800319a:	b510      	push	{r4, lr}
 800319c:	b2c9      	uxtb	r1, r1
 800319e:	4402      	add	r2, r0
 80031a0:	4293      	cmp	r3, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	d101      	bne.n	80031aa <memchr+0x12>
 80031a6:	2000      	movs	r0, #0
 80031a8:	e003      	b.n	80031b2 <memchr+0x1a>
 80031aa:	7804      	ldrb	r4, [r0, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	428c      	cmp	r4, r1
 80031b0:	d1f6      	bne.n	80031a0 <memchr+0x8>
 80031b2:	bd10      	pop	{r4, pc}

080031b4 <memcpy>:
 80031b4:	440a      	add	r2, r1
 80031b6:	4291      	cmp	r1, r2
 80031b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031bc:	d100      	bne.n	80031c0 <memcpy+0xc>
 80031be:	4770      	bx	lr
 80031c0:	b510      	push	{r4, lr}
 80031c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031c6:	4291      	cmp	r1, r2
 80031c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031cc:	d1f9      	bne.n	80031c2 <memcpy+0xe>
 80031ce:	bd10      	pop	{r4, pc}

080031d0 <_realloc_r>:
 80031d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d4:	4607      	mov	r7, r0
 80031d6:	4614      	mov	r4, r2
 80031d8:	460d      	mov	r5, r1
 80031da:	b921      	cbnz	r1, 80031e6 <_realloc_r+0x16>
 80031dc:	4611      	mov	r1, r2
 80031de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031e2:	f7ff bb9d 	b.w	8002920 <_malloc_r>
 80031e6:	b92a      	cbnz	r2, 80031f4 <_realloc_r+0x24>
 80031e8:	f7ff fc8c 	bl	8002b04 <_free_r>
 80031ec:	4625      	mov	r5, r4
 80031ee:	4628      	mov	r0, r5
 80031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f4:	f000 f81a 	bl	800322c <_malloc_usable_size_r>
 80031f8:	4284      	cmp	r4, r0
 80031fa:	4606      	mov	r6, r0
 80031fc:	d802      	bhi.n	8003204 <_realloc_r+0x34>
 80031fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003202:	d8f4      	bhi.n	80031ee <_realloc_r+0x1e>
 8003204:	4621      	mov	r1, r4
 8003206:	4638      	mov	r0, r7
 8003208:	f7ff fb8a 	bl	8002920 <_malloc_r>
 800320c:	4680      	mov	r8, r0
 800320e:	b908      	cbnz	r0, 8003214 <_realloc_r+0x44>
 8003210:	4645      	mov	r5, r8
 8003212:	e7ec      	b.n	80031ee <_realloc_r+0x1e>
 8003214:	42b4      	cmp	r4, r6
 8003216:	4622      	mov	r2, r4
 8003218:	4629      	mov	r1, r5
 800321a:	bf28      	it	cs
 800321c:	4632      	movcs	r2, r6
 800321e:	f7ff ffc9 	bl	80031b4 <memcpy>
 8003222:	4629      	mov	r1, r5
 8003224:	4638      	mov	r0, r7
 8003226:	f7ff fc6d 	bl	8002b04 <_free_r>
 800322a:	e7f1      	b.n	8003210 <_realloc_r+0x40>

0800322c <_malloc_usable_size_r>:
 800322c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003230:	1f18      	subs	r0, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	bfbc      	itt	lt
 8003236:	580b      	ldrlt	r3, [r1, r0]
 8003238:	18c0      	addlt	r0, r0, r3
 800323a:	4770      	bx	lr

0800323c <_init>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	bf00      	nop
 8003240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003242:	bc08      	pop	{r3}
 8003244:	469e      	mov	lr, r3
 8003246:	4770      	bx	lr

08003248 <_fini>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr
