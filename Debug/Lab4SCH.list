
Lab4SCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003144  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003250  08003250  00004250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080033a8  080033a8  000043a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b0  080033b0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b0  080033b0  000043b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033b4  080033b4  000043b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080033b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  2000005c  08003414  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  08003414  00005668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdbf  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da5  00000000  00000000  00010e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00012bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000977  00000000  00000000  00013810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db8  00000000  00000000  00014187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd37  00000000  00000000  0002bf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000883eb  00000000  00000000  00039c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2061  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  000c20a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c580c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003238 	.word	0x08003238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003238 	.word	0x08003238

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fe7b 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f85d 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f90d 	bl	8000388 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f895 	bl	800029c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8df 	bl	8000334 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8000176:	f000 fa1f 	bl	80005b8 <SCH_Init>
  SCH_Add_Task(toggle_led_1, 5, 50);
 800017a:	2232      	movs	r2, #50	@ 0x32
 800017c:	2105      	movs	r1, #5
 800017e:	481f      	ldr	r0, [pc, #124]	@ (80001fc <main+0xa0>)
 8000180:	f000 fa98 	bl	80006b4 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_2, 5, 100);
 8000184:	2264      	movs	r2, #100	@ 0x64
 8000186:	2105      	movs	r1, #5
 8000188:	481d      	ldr	r0, [pc, #116]	@ (8000200 <main+0xa4>)
 800018a:	f000 fa93 	bl	80006b4 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_3, 5, 150);
 800018e:	2296      	movs	r2, #150	@ 0x96
 8000190:	2105      	movs	r1, #5
 8000192:	481c      	ldr	r0, [pc, #112]	@ (8000204 <main+0xa8>)
 8000194:	f000 fa8e 	bl	80006b4 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_4, 5, 200);
 8000198:	22c8      	movs	r2, #200	@ 0xc8
 800019a:	2105      	movs	r1, #5
 800019c:	481a      	ldr	r0, [pc, #104]	@ (8000208 <main+0xac>)
 800019e:	f000 fa89 	bl	80006b4 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_5, 5, 250);
 80001a2:	22fa      	movs	r2, #250	@ 0xfa
 80001a4:	2105      	movs	r1, #5
 80001a6:	4819      	ldr	r0, [pc, #100]	@ (800020c <main+0xb0>)
 80001a8:	f000 fa84 	bl	80006b4 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_6, 500, 0);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80001b2:	4817      	ldr	r0, [pc, #92]	@ (8000210 <main+0xb4>)
 80001b4:	f000 fa7e 	bl	80006b4 <SCH_Add_Task>
  HAL_TIM_Base_Start_IT(&htim2);
 80001b8:	4816      	ldr	r0, [pc, #88]	@ (8000214 <main+0xb8>)
 80001ba:	f001 fdcd 	bl	8001d58 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  uint32_t delay = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80001c2:	f000 fba7 	bl	8000914 <SCH_Dispatch_Tasks>
	  if(delay >= 10000){
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80001cc:	4293      	cmp	r3, r2
 80001ce:	d910      	bls.n	80001f2 <main+0x96>
		  sprintf(c, "Current tick: %6ld\r\n\n", ticks);
 80001d0:	4b11      	ldr	r3, [pc, #68]	@ (8000218 <main+0xbc>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	461a      	mov	r2, r3
 80001d6:	4911      	ldr	r1, [pc, #68]	@ (800021c <main+0xc0>)
 80001d8:	4811      	ldr	r0, [pc, #68]	@ (8000220 <main+0xc4>)
 80001da:	f002 fc2b 	bl	8002a34 <siprintf>
		  UART_Print(c, strlen(c));
 80001de:	4810      	ldr	r0, [pc, #64]	@ (8000220 <main+0xc4>)
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	480d      	ldr	r0, [pc, #52]	@ (8000220 <main+0xc4>)
 80001ea:	f000 f9cb 	bl	8000584 <UART_Print>
		  delay = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
	  }
	  delay++;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3301      	adds	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	  SCH_Dispatch_Tasks();
 80001f8:	e7e3      	b.n	80001c2 <main+0x66>
 80001fa:	bf00      	nop
 80001fc:	08000405 	.word	0x08000405
 8000200:	08000445 	.word	0x08000445
 8000204:	08000485 	.word	0x08000485
 8000208:	080004c5 	.word	0x080004c5
 800020c:	08000505 	.word	0x08000505
 8000210:	08000545 	.word	0x08000545
 8000214:	20000078 	.word	0x20000078
 8000218:	20000108 	.word	0x20000108
 800021c:	08003250 	.word	0x08003250
 8000220:	2000010c 	.word	0x2000010c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fc20 	bl	8002a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f001 f91c 	bl	8001498 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f9a1 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fb8a 	bl	800199c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f98d 	bl	80005ac <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002c2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c8:	4b19      	ldr	r3, [pc, #100]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002ce:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002d0:	2209      	movs	r2, #9
 80002d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d4:	4b16      	ldr	r3, [pc, #88]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e0:	4813      	ldr	r0, [pc, #76]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002e2:	f001 fce9 	bl	8001cb8 <HAL_TIM_Base_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002ec:	f000 f95e 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	4619      	mov	r1, r3
 80002fc:	480c      	ldr	r0, [pc, #48]	@ (8000330 <MX_TIM2_Init+0x94>)
 80002fe:	f001 fe67 	bl	8001fd0 <HAL_TIM_ConfigClockSource>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000308:	f000 f950 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_TIM2_Init+0x94>)
 800031a:	f002 f83f 	bl	800239c <HAL_TIMEx_MasterConfigSynchronization>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000324:	f000 f942 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000078 	.word	0x20000078

08000334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000338:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	@ (8000384 <MX_USART1_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	@ (8000380 <MX_USART1_UART_Init+0x4c>)
 800036c:	f002 f880 	bl	8002470 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f919 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000c0 	.word	0x200000c0
 8000384:	40013800 	.word	0x40013800

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_GPIO_Init+0x74>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a16      	ldr	r2, [pc, #88]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a10      	ldr	r2, [pc, #64]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_GPIO_Init+0x74>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003cc:	2201      	movs	r2, #1
 80003ce:	217e      	movs	r1, #126	@ 0x7e
 80003d0:	480b      	ldr	r0, [pc, #44]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003d2:	f001 f82f 	bl	8001434 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003d6:	237e      	movs	r3, #126	@ 0x7e
 80003d8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4619      	mov	r1, r3
 80003ec:	4804      	ldr	r0, [pc, #16]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003ee:	f000 fea5 	bl	800113c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010800 	.word	0x40010800

08000404 <toggle_led_1>:

/* USER CODE BEGIN 4 */
void toggle_led_1(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000408:	2102      	movs	r1, #2
 800040a:	480a      	ldr	r0, [pc, #40]	@ (8000434 <toggle_led_1+0x30>)
 800040c:	f001 f82a 	bl	8001464 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 1 RED CALLED AT %6ld TICK \r\n", ticks);
 8000410:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <toggle_led_1+0x34>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4909      	ldr	r1, [pc, #36]	@ (800043c <toggle_led_1+0x38>)
 8000418:	4809      	ldr	r0, [pc, #36]	@ (8000440 <toggle_led_1+0x3c>)
 800041a:	f002 fb0b 	bl	8002a34 <siprintf>
	UART_Print(c, strlen(c));
 800041e:	4808      	ldr	r0, [pc, #32]	@ (8000440 <toggle_led_1+0x3c>)
 8000420:	f7ff fe94 	bl	800014c <strlen>
 8000424:	4603      	mov	r3, r0
 8000426:	4619      	mov	r1, r3
 8000428:	4805      	ldr	r0, [pc, #20]	@ (8000440 <toggle_led_1+0x3c>)
 800042a:	f000 f8ab 	bl	8000584 <UART_Print>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40010800 	.word	0x40010800
 8000438:	20000108 	.word	0x20000108
 800043c:	08003268 	.word	0x08003268
 8000440:	2000010c 	.word	0x2000010c

08000444 <toggle_led_2>:
void toggle_led_2(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000448:	2104      	movs	r1, #4
 800044a:	480a      	ldr	r0, [pc, #40]	@ (8000474 <toggle_led_2+0x30>)
 800044c:	f001 f80a 	bl	8001464 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 2 YELLOW CALLED AT %6ld TICK \r\n", ticks);
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <toggle_led_2+0x34>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	4909      	ldr	r1, [pc, #36]	@ (800047c <toggle_led_2+0x38>)
 8000458:	4809      	ldr	r0, [pc, #36]	@ (8000480 <toggle_led_2+0x3c>)
 800045a:	f002 faeb 	bl	8002a34 <siprintf>
	UART_Print(c, strlen(c));
 800045e:	4808      	ldr	r0, [pc, #32]	@ (8000480 <toggle_led_2+0x3c>)
 8000460:	f7ff fe74 	bl	800014c <strlen>
 8000464:	4603      	mov	r3, r0
 8000466:	4619      	mov	r1, r3
 8000468:	4805      	ldr	r0, [pc, #20]	@ (8000480 <toggle_led_2+0x3c>)
 800046a:	f000 f88b 	bl	8000584 <UART_Print>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010800 	.word	0x40010800
 8000478:	20000108 	.word	0x20000108
 800047c:	0800328c 	.word	0x0800328c
 8000480:	2000010c 	.word	0x2000010c

08000484 <toggle_led_3>:
void toggle_led_3(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000488:	2108      	movs	r1, #8
 800048a:	480a      	ldr	r0, [pc, #40]	@ (80004b4 <toggle_led_3+0x30>)
 800048c:	f000 ffea 	bl	8001464 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 3 GREEN CALLED AT %6ld TICK \r\n", ticks);
 8000490:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <toggle_led_3+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4909      	ldr	r1, [pc, #36]	@ (80004bc <toggle_led_3+0x38>)
 8000498:	4809      	ldr	r0, [pc, #36]	@ (80004c0 <toggle_led_3+0x3c>)
 800049a:	f002 facb 	bl	8002a34 <siprintf>
	UART_Print(c, strlen(c));
 800049e:	4808      	ldr	r0, [pc, #32]	@ (80004c0 <toggle_led_3+0x3c>)
 80004a0:	f7ff fe54 	bl	800014c <strlen>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	@ (80004c0 <toggle_led_3+0x3c>)
 80004aa:	f000 f86b 	bl	8000584 <UART_Print>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40010800 	.word	0x40010800
 80004b8:	20000108 	.word	0x20000108
 80004bc:	080032b4 	.word	0x080032b4
 80004c0:	2000010c 	.word	0x2000010c

080004c4 <toggle_led_4>:
void toggle_led_4(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80004c8:	2110      	movs	r1, #16
 80004ca:	480a      	ldr	r0, [pc, #40]	@ (80004f4 <toggle_led_4+0x30>)
 80004cc:	f000 ffca 	bl	8001464 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 4 WHITE CALLED AT %6ld TICK \r\n", ticks);
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <toggle_led_4+0x34>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4909      	ldr	r1, [pc, #36]	@ (80004fc <toggle_led_4+0x38>)
 80004d8:	4809      	ldr	r0, [pc, #36]	@ (8000500 <toggle_led_4+0x3c>)
 80004da:	f002 faab 	bl	8002a34 <siprintf>
	UART_Print(c, strlen(c));
 80004de:	4808      	ldr	r0, [pc, #32]	@ (8000500 <toggle_led_4+0x3c>)
 80004e0:	f7ff fe34 	bl	800014c <strlen>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <toggle_led_4+0x3c>)
 80004ea:	f000 f84b 	bl	8000584 <UART_Print>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40010800 	.word	0x40010800
 80004f8:	20000108 	.word	0x20000108
 80004fc:	080032d8 	.word	0x080032d8
 8000500:	2000010c 	.word	0x2000010c

08000504 <toggle_led_5>:
void toggle_led_5(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000508:	2120      	movs	r1, #32
 800050a:	480a      	ldr	r0, [pc, #40]	@ (8000534 <toggle_led_5+0x30>)
 800050c:	f000 ffaa 	bl	8001464 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 5 BLUE CALLED AT %6ld TICK \r\n", ticks);
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <toggle_led_5+0x34>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4909      	ldr	r1, [pc, #36]	@ (800053c <toggle_led_5+0x38>)
 8000518:	4809      	ldr	r0, [pc, #36]	@ (8000540 <toggle_led_5+0x3c>)
 800051a:	f002 fa8b 	bl	8002a34 <siprintf>
	UART_Print(c, strlen(c));
 800051e:	4808      	ldr	r0, [pc, #32]	@ (8000540 <toggle_led_5+0x3c>)
 8000520:	f7ff fe14 	bl	800014c <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <toggle_led_5+0x3c>)
 800052a:	f000 f82b 	bl	8000584 <UART_Print>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010800 	.word	0x40010800
 8000538:	20000108 	.word	0x20000108
 800053c:	080032fc 	.word	0x080032fc
 8000540:	2000010c 	.word	0x2000010c

08000544 <toggle_led_6>:
void toggle_led_6(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000548:	2140      	movs	r1, #64	@ 0x40
 800054a:	480a      	ldr	r0, [pc, #40]	@ (8000574 <toggle_led_6+0x30>)
 800054c:	f000 ff8a 	bl	8001464 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 6 ORANGE CALLED AT %6ld TICK \r\n", ticks);
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <toggle_led_6+0x34>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4909      	ldr	r1, [pc, #36]	@ (800057c <toggle_led_6+0x38>)
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <toggle_led_6+0x3c>)
 800055a:	f002 fa6b 	bl	8002a34 <siprintf>
	UART_Print(c, strlen(c));
 800055e:	4808      	ldr	r0, [pc, #32]	@ (8000580 <toggle_led_6+0x3c>)
 8000560:	f7ff fdf4 	bl	800014c <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <toggle_led_6+0x3c>)
 800056a:	f000 f80b 	bl	8000584 <UART_Print>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010800 	.word	0x40010800
 8000578:	20000108 	.word	0x20000108
 800057c:	08003320 	.word	0x08003320
 8000580:	2000010c 	.word	0x2000010c

08000584 <UART_Print>:

void UART_Print(char *c, size_t length){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)c, length, HAL_MAX_DELAY);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b29a      	uxth	r2, r3
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <UART_Print+0x24>)
 800059a:	f001 ffb9 	bl	8002510 <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000c0 	.word	0x200000c0

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <Error_Handler+0x8>

080005b8 <SCH_Init>:
uint32_t queue_tasks_num = 0;
ERROR_REPORT Error_code_G;
ERROR_REPORT Last_error_code_G;
uint16_t Error_tick_count_G = 0;

void SCH_Init(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	Error_code_G = 0;
 80005be:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <SCH_Init+0xec>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]

	if(!(queue_head == NULL && queue_tasks_num == 0)){ //if queue not empty, delete the queue
 80005c4:	4b38      	ldr	r3, [pc, #224]	@ (80006a8 <SCH_Init+0xf0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d103      	bne.n	80005d4 <SCH_Init+0x1c>
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <SCH_Init+0xf4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d014      	beq.n	80005fe <SCH_Init+0x46>
		sTask* temp = NULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
		while(queue_head){
 80005d8:	e00a      	b.n	80005f0 <SCH_Init+0x38>
			temp = queue_head;
 80005da:	4b33      	ldr	r3, [pc, #204]	@ (80006a8 <SCH_Init+0xf0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	603b      	str	r3, [r7, #0]
			queue_head = queue_head->next;
 80005e0:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <SCH_Init+0xf0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a30      	ldr	r2, [pc, #192]	@ (80006a8 <SCH_Init+0xf0>)
 80005e8:	6013      	str	r3, [r2, #0]
			free(temp);
 80005ea:	6838      	ldr	r0, [r7, #0]
 80005ec:	f002 f96c 	bl	80028c8 <free>
		while(queue_head){
 80005f0:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <SCH_Init+0xf0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f0      	bne.n	80005da <SCH_Init+0x22>
		}
		queue_tasks_num = 0;
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <SCH_Init+0xf4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
	}

	for(uint32_t i = 0; i < SCH_MAX_TASK; i++){ //initialize tasks array
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e044      	b.n	800068e <SCH_Init+0xd6>
		SCH_tasks_G[i].pTask = NULL;
 8000604:	492a      	ldr	r1, [pc, #168]	@ (80006b0 <SCH_Init+0xf8>)
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	440b      	add	r3, r1
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].delay = SCH_tasks_G[i].period = SCH_tasks_G[i].RunMe = SCH_tasks_G[i].TaskID = 0;
 8000616:	4926      	ldr	r1, [pc, #152]	@ (80006b0 <SCH_Init+0xf8>)
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	440b      	add	r3, r1
 8000624:	3310      	adds	r3, #16
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	4921      	ldr	r1, [pc, #132]	@ (80006b0 <SCH_Init+0xf8>)
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4613      	mov	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4413      	add	r3, r2
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	440b      	add	r3, r1
 8000638:	330c      	adds	r3, #12
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	491c      	ldr	r1, [pc, #112]	@ (80006b0 <SCH_Init+0xf8>)
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	440b      	add	r3, r1
 800064c:	330c      	adds	r3, #12
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	4917      	ldr	r1, [pc, #92]	@ (80006b0 <SCH_Init+0xf8>)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	440b      	add	r3, r1
 8000660:	3308      	adds	r3, #8
 8000662:	6018      	str	r0, [r3, #0]
 8000664:	4912      	ldr	r1, [pc, #72]	@ (80006b0 <SCH_Init+0xf8>)
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	440b      	add	r3, r1
 8000672:	3308      	adds	r3, #8
 8000674:	6819      	ldr	r1, [r3, #0]
 8000676:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <SCH_Init+0xf8>)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	4403      	add	r3, r0
 8000684:	3304      	adds	r3, #4
 8000686:	6019      	str	r1, [r3, #0]
	for(uint32_t i = 0; i < SCH_MAX_TASK; i++){ //initialize tasks array
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b27      	cmp	r3, #39	@ 0x27
 8000692:	d9b7      	bls.n	8000604 <SCH_Init+0x4c>
	}

	Error_code_G = 0;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <SCH_Init+0xec>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000514 	.word	0x20000514
 80006a8:	2000050c 	.word	0x2000050c
 80006ac:	20000510 	.word	0x20000510
 80006b0:	2000014c 	.word	0x2000014c

080006b4 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction) () , uint32_t DELAY, uint32_t PERIOD){
 80006b4:	b5b0      	push	{r4, r5, r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
	if(pFunction == NULL || DELAY < 0 || PERIOD < 0){ //check if invalid add
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d105      	bne.n	80006d2 <SCH_Add_Task+0x1e>
		Error_code_G = ERROR_SCH_INVALID_TASK_INIT;
 80006c6:	4b78      	ldr	r3, [pc, #480]	@ (80008a8 <SCH_Add_Task+0x1f4>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	701a      	strb	r2, [r3, #0]
		return -1;
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	e0e6      	b.n	80008a0 <SCH_Add_Task+0x1ec>
	}

	uint32_t i = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
	while((i < SCH_MAX_TASK) && (SCH_tasks_G[i].pTask != NULL)){
 80006d6:	e002      	b.n	80006de <SCH_Add_Task+0x2a>
		i++;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006da:	3301      	adds	r3, #1
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
	while((i < SCH_MAX_TASK) && (SCH_tasks_G[i].pTask != NULL)){
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	2b27      	cmp	r3, #39	@ 0x27
 80006e2:	d809      	bhi.n	80006f8 <SCH_Add_Task+0x44>
 80006e4:	4971      	ldr	r1, [pc, #452]	@ (80008ac <SCH_Add_Task+0x1f8>)
 80006e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1ef      	bne.n	80006d8 <SCH_Add_Task+0x24>
	}

	if(i == SCH_MAX_TASK){
 80006f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fa:	2b28      	cmp	r3, #40	@ 0x28
 80006fc:	d104      	bne.n	8000708 <SCH_Add_Task+0x54>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80006fe:	4b6a      	ldr	r3, [pc, #424]	@ (80008a8 <SCH_Add_Task+0x1f4>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASK;
 8000704:	2328      	movs	r3, #40	@ 0x28
 8000706:	e0cb      	b.n	80008a0 <SCH_Add_Task+0x1ec>
	}

	SCH_tasks_G[i].pTask = pFunction;
 8000708:	4968      	ldr	r1, [pc, #416]	@ (80008ac <SCH_Add_Task+0x1f8>)
 800070a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	440b      	add	r3, r1
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].delay = DELAY;
 800071a:	4964      	ldr	r1, [pc, #400]	@ (80008ac <SCH_Add_Task+0x1f8>)
 800071c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	440b      	add	r3, r1
 8000728:	3304      	adds	r3, #4
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].period = PERIOD;
 800072e:	495f      	ldr	r1, [pc, #380]	@ (80008ac <SCH_Add_Task+0x1f8>)
 8000730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	440b      	add	r3, r1
 800073c:	3308      	adds	r3, #8
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].RunMe = 0;
 8000742:	495a      	ldr	r1, [pc, #360]	@ (80008ac <SCH_Add_Task+0x1f8>)
 8000744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	440b      	add	r3, r1
 8000750:	330c      	adds	r3, #12
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[i].TaskID = i;
 8000756:	4955      	ldr	r1, [pc, #340]	@ (80008ac <SCH_Add_Task+0x1f8>)
 8000758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	440b      	add	r3, r1
 8000764:	3310      	adds	r3, #16
 8000766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000768:	601a      	str	r2, [r3, #0]

	if(queue_head == NULL && queue_tasks_num == 0){//if queue is empty, add one task to queue
 800076a:	4b51      	ldr	r3, [pc, #324]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d127      	bne.n	80007c2 <SCH_Add_Task+0x10e>
 8000772:	4b50      	ldr	r3, [pc, #320]	@ (80008b4 <SCH_Add_Task+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d123      	bne.n	80007c2 <SCH_Add_Task+0x10e>
		queue_head = (sTask*) malloc(sizeof(sTask));
 800077a:	2018      	movs	r0, #24
 800077c:	f002 f89c 	bl	80028b8 <malloc>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b4a      	ldr	r3, [pc, #296]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 8000786:	601a      	str	r2, [r3, #0]
		if (queue_head == NULL) return -1; // allocation failed
 8000788:	4b49      	ldr	r3, [pc, #292]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <SCH_Add_Task+0xe2>
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	e084      	b.n	80008a0 <SCH_Add_Task+0x1ec>
		*queue_head = SCH_tasks_G[i];
 8000796:	4b46      	ldr	r3, [pc, #280]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	4944      	ldr	r1, [pc, #272]	@ (80008ac <SCH_Add_Task+0x1f8>)
 800079c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079e:	4613      	mov	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	4413      	add	r3, r2
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	440b      	add	r3, r1
 80007a8:	4604      	mov	r4, r0
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007b4:	e884 0003 	stmia.w	r4, {r0, r1}
		queue_head->next = NULL;
 80007b8:	4b3d      	ldr	r3, [pc, #244]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	e068      	b.n	8000894 <SCH_Add_Task+0x1e0>
	}
	else{//if not
		sTask* new_task = (sTask*) malloc(sizeof(sTask));
 80007c2:	2018      	movs	r0, #24
 80007c4:	f002 f878 	bl	80028b8 <malloc>
 80007c8:	4603      	mov	r3, r0
 80007ca:	617b      	str	r3, [r7, #20]
		if (new_task == NULL) return -1;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <SCH_Add_Task+0x124>
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	e063      	b.n	80008a0 <SCH_Add_Task+0x1ec>
		*new_task = SCH_tasks_G[i];
 80007d8:	6978      	ldr	r0, [r7, #20]
 80007da:	4934      	ldr	r1, [pc, #208]	@ (80008ac <SCH_Add_Task+0x1f8>)
 80007dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f4:	e884 0003 	stmia.w	r4, {r0, r1}
		new_task->next = NULL;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]

		sTask* cursor = queue_head; //create a cursor
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	623b      	str	r3, [r7, #32]
		sTask* prev = NULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
		uint32_t delay_accumulate = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]

		while (cursor != NULL && (new_task->delay > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than tasks delay
 800080c:	e009      	b.n	8000822 <SCH_Add_Task+0x16e>
			delay_accumulate += cursor->delay; //accumulate delay
 800080e:	6a3b      	ldr	r3, [r7, #32]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	4413      	add	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
			prev = cursor;
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	61fb      	str	r3, [r7, #28]
			cursor = cursor->next; // keep moving to next
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	623b      	str	r3, [r7, #32]
		while (cursor != NULL && (new_task->delay > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than tasks delay
 8000822:	6a3b      	ldr	r3, [r7, #32]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d007      	beq.n	8000838 <SCH_Add_Task+0x184>
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	6859      	ldr	r1, [r3, #4]
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	440b      	add	r3, r1
 8000834:	429a      	cmp	r2, r3
 8000836:	d8ea      	bhi.n	800080e <SCH_Add_Task+0x15a>
		}

		new_task->delay -= delay_accumulate; //calculate relative delay
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	1ad2      	subs	r2, r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	605a      	str	r2, [r3, #4]

		if (prev == NULL) { //if empty queue, insert at head
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d114      	bne.n	8000874 <SCH_Add_Task+0x1c0>
			new_task->next = queue_head;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	615a      	str	r2, [r3, #20]
			if (queue_head != NULL) {
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <SCH_Add_Task+0x1b8>
				queue_head->delay -= new_task->delay;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6859      	ldr	r1, [r3, #4]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1a8a      	subs	r2, r1, r2
 800086a:	605a      	str	r2, [r3, #4]
			}
			queue_head = new_task;
 800086c:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <SCH_Add_Task+0x1fc>)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	e00f      	b.n	8000894 <SCH_Add_Task+0x1e0>
		}
		else { // if not
			new_task->next = cursor; //insert in between node
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	6a3a      	ldr	r2, [r7, #32]
 8000878:	615a      	str	r2, [r3, #20]
			prev->next = new_task;
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	615a      	str	r2, [r3, #20]

			if (cursor != NULL) { //recalculate the next task delay
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d006      	beq.n	8000894 <SCH_Add_Task+0x1e0>
				cursor->delay -= new_task->delay;
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	605a      	str	r2, [r3, #4]
			}
		}
	}
	queue_tasks_num++;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <SCH_Add_Task+0x200>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <SCH_Add_Task+0x200>)
 800089c:	6013      	str	r3, [r2, #0]

	return i;
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3728      	adds	r7, #40	@ 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bdb0      	pop	{r4, r5, r7, pc}
 80008a8:	20000514 	.word	0x20000514
 80008ac:	2000014c 	.word	0x2000014c
 80008b0:	2000050c 	.word	0x2000050c
 80008b4:	20000510 	.word	0x20000510

080008b8 <SCH_Update>:

void SCH_Update(void){
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
	if (queue_head == NULL) return; //if empty queue return
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <SCH_Update+0x58>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01e      	beq.n	8000904 <SCH_Update+0x4c>

	if(queue_head->delay > 0){ //decrement head
 80008c6:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <SCH_Update+0x58>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <SCH_Update+0x22>
		queue_head->delay--;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <SCH_Update+0x58>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	3a01      	subs	r2, #1
 80008d8:	605a      	str	r2, [r3, #4]
	}

	sTask* cursor = queue_head;
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <SCH_Update+0x58>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	607b      	str	r3, [r7, #4]
	while(cursor != NULL && cursor->delay == 0){
 80008e0:	e008      	b.n	80008f4 <SCH_Update+0x3c>
		cursor->RunMe++;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7b1b      	ldrb	r3, [r3, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	731a      	strb	r2, [r3, #12]
		cursor = cursor->next;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	607b      	str	r3, [r7, #4]
	while(cursor != NULL && cursor->delay == 0){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d005      	beq.n	8000906 <SCH_Update+0x4e>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0ef      	beq.n	80008e2 <SCH_Update+0x2a>
 8000902:	e000      	b.n	8000906 <SCH_Update+0x4e>
	if (queue_head == NULL) return; //if empty queue return
 8000904:	bf00      	nop
	}
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2000050c 	.word	0x2000050c

08000914 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	while(queue_head != NULL && queue_head->RunMe > 0){ //Loop through all task that's had runme flag on from head
 8000918:	e01a      	b.n	8000950 <SCH_Dispatch_Tasks+0x3c>

		if(queue_head->pTask != NULL){
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <SCH_Dispatch_Tasks+0x5c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d015      	beq.n	8000950 <SCH_Dispatch_Tasks+0x3c>
			(*queue_head->pTask)(); //run the tasks
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <SCH_Dispatch_Tasks+0x5c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4798      	blx	r3
			queue_head->RunMe = 0;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <SCH_Dispatch_Tasks+0x5c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	731a      	strb	r2, [r3, #12]

			if(queue_head->period > 0){ //if it is periodically
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <SCH_Dispatch_Tasks+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <SCH_Dispatch_Tasks+0x30>
				SCH_RescheduleTask();
 800093e:	f000 f8bf 	bl	8000ac0 <SCH_RescheduleTask>
 8000942:	e005      	b.n	8000950 <SCH_Dispatch_Tasks+0x3c>
			}
			else{
				SCH_Delete_Task(queue_head->TaskID);
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <SCH_Dispatch_Tasks+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f812 	bl	8000974 <SCH_Delete_Task>
	while(queue_head != NULL && queue_head->RunMe > 0){ //Loop through all task that's had runme flag on from head
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <SCH_Dispatch_Tasks+0x5c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <SCH_Dispatch_Tasks+0x4e>
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <SCH_Dispatch_Tasks+0x5c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	7b1b      	ldrb	r3, [r3, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1db      	bne.n	800091a <SCH_Dispatch_Tasks+0x6>

		}

	}

	SCH_Report_Status(); //output status
 8000962:	f000 f917 	bl	8000b94 <SCH_Report_Status>
	SCH_Go_To_Sleep(); //sleep
 8000966:	f000 f90f 	bl	8000b88 <SCH_Go_To_Sleep>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000050c 	.word	0x2000050c

08000974 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	if(TASK_INDEX < 0 || TASK_INDEX >= SCH_MAX_TASK || SCH_tasks_G[TASK_INDEX].pTask == NULL){ //invalid index
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b27      	cmp	r3, #39	@ 0x27
 8000980:	d809      	bhi.n	8000996 <SCH_Delete_Task+0x22>
 8000982:	494b      	ldr	r1, [pc, #300]	@ (8000ab0 <SCH_Delete_Task+0x13c>)
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4613      	mov	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	440b      	add	r3, r1
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d104      	bne.n	80009a0 <SCH_Delete_Task+0x2c>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000996:	4b47      	ldr	r3, [pc, #284]	@ (8000ab4 <SCH_Delete_Task+0x140>)
 8000998:	2203      	movs	r2, #3
 800099a:	701a      	strb	r2, [r3, #0]
		return -1;
 800099c:	23ff      	movs	r3, #255	@ 0xff
 800099e:	e083      	b.n	8000aa8 <SCH_Delete_Task+0x134>
	}
	//delete from tasks array
	SCH_tasks_G[TASK_INDEX].pTask = NULL;
 80009a0:	4943      	ldr	r1, [pc, #268]	@ (8000ab0 <SCH_Delete_Task+0x13c>)
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].delay = 0;
 80009b2:	493f      	ldr	r1, [pc, #252]	@ (8000ab0 <SCH_Delete_Task+0x13c>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3304      	adds	r3, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].period = 0;
 80009c6:	493a      	ldr	r1, [pc, #232]	@ (8000ab0 <SCH_Delete_Task+0x13c>)
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	3308      	adds	r3, #8
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80009da:	4935      	ldr	r1, [pc, #212]	@ (8000ab0 <SCH_Delete_Task+0x13c>)
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	4613      	mov	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4413      	add	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	440b      	add	r3, r1
 80009e8:	330c      	adds	r3, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].TaskID = 0;
 80009ee:	4930      	ldr	r1, [pc, #192]	@ (8000ab0 <SCH_Delete_Task+0x13c>)
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	3310      	adds	r3, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]

	//delete from queue
	sTask* cursor = queue_head;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	617b      	str	r3, [r7, #20]
	sTask* prev = NULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
	while(cursor != NULL){
 8000a0c:	e009      	b.n	8000a22 <SCH_Delete_Task+0xae>
		if(cursor->TaskID == TASK_INDEX){
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d008      	beq.n	8000a2a <SCH_Delete_Task+0xb6>
			break;
		}
		prev = cursor;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
		cursor = cursor->next;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	617b      	str	r3, [r7, #20]
	while(cursor != NULL){
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1f2      	bne.n	8000a0e <SCH_Delete_Task+0x9a>
 8000a28:	e000      	b.n	8000a2c <SCH_Delete_Task+0xb8>
			break;
 8000a2a:	bf00      	nop
	}
	if(cursor != NULL){
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d038      	beq.n	8000aa4 <SCH_Delete_Task+0x130>
		if(queue_head->TaskID == cursor->TaskID){ //delete head
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	691a      	ldr	r2, [r3, #16]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d118      	bne.n	8000a72 <SCH_Delete_Task+0xfe>
			sTask* temp = queue_head;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
			queue_head = queue_head->next;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a4e:	6013      	str	r3, [r2, #0]
			if(queue_head != NULL){
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d008      	beq.n	8000a6a <SCH_Delete_Task+0xf6>
				queue_head->delay += temp->delay;
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6859      	ldr	r1, [r3, #4]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <SCH_Delete_Task+0x144>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	440a      	add	r2, r1
 8000a68:	605a      	str	r2, [r3, #4]
			}
			free(temp);
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f001 ff2c 	bl	80028c8 <free>
 8000a70:	e013      	b.n	8000a9a <SCH_Delete_Task+0x126>
		}
		else{
			prev->next = cursor->next;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	615a      	str	r2, [r3, #20]
			if (cursor->next != NULL){
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <SCH_Delete_Task+0x120>
				cursor->next->delay += cursor->delay;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	6859      	ldr	r1, [r3, #4]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	440a      	add	r2, r1
 8000a92:	605a      	str	r2, [r3, #4]
			}
			free(cursor);
 8000a94:	6978      	ldr	r0, [r7, #20]
 8000a96:	f001 ff17 	bl	80028c8 <free>
		}
		queue_tasks_num--;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <SCH_Delete_Task+0x148>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <SCH_Delete_Task+0x148>)
 8000aa2:	6013      	str	r3, [r2, #0]
	}

	return TASK_INDEX;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	b2db      	uxtb	r3, r3
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000014c 	.word	0x2000014c
 8000ab4:	20000514 	.word	0x20000514
 8000ab8:	2000050c 	.word	0x2000050c
 8000abc:	20000510 	.word	0x20000510

08000ac0 <SCH_RescheduleTask>:

void SCH_RescheduleTask(void){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
	if (queue_head == NULL) return;
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d055      	beq.n	8000b7a <SCH_RescheduleTask+0xba>

	sTask* temp = queue_head;
 8000ace:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	603b      	str	r3, [r7, #0]
	sTask* cursor = queue_head->next;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	60fb      	str	r3, [r7, #12]
	sTask* prev = NULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
	uint32_t delay_accumulate = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]

	while (cursor != NULL && (queue_head->period > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than delay of task that is being rescheduled
 8000ae4:	e009      	b.n	8000afa <SCH_RescheduleTask+0x3a>
		delay_accumulate += cursor->delay; //accumulate delay
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	607b      	str	r3, [r7, #4]
		prev = cursor;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	60bb      	str	r3, [r7, #8]
		cursor = cursor->next; // keep moving to next
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	60fb      	str	r3, [r7, #12]
	while (cursor != NULL && (queue_head->period > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than delay of task that is being rescheduled
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d008      	beq.n	8000b12 <SCH_RescheduleTask+0x52>
 8000b00:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6859      	ldr	r1, [r3, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	440b      	add	r3, r1
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d8e9      	bhi.n	8000ae6 <SCH_RescheduleTask+0x26>
	}

	queue_head = queue_head->next;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b1a:	6013      	str	r3, [r2, #0]
	temp->delay = temp->period - delay_accumulate;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1ad2      	subs	r2, r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	605a      	str	r2, [r3, #4]

	if (prev == NULL) {
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d114      	bne.n	8000b58 <SCH_RescheduleTask+0x98>
		temp->next = queue_head;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	615a      	str	r2, [r3, #20]
		if (queue_head != NULL){
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <SCH_RescheduleTask+0x90>
			queue_head->delay -= temp->delay;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	605a      	str	r2, [r3, #4]
		}
		queue_head = temp;
 8000b50:	4a0c      	ldr	r2, [pc, #48]	@ (8000b84 <SCH_RescheduleTask+0xc4>)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e011      	b.n	8000b7c <SCH_RescheduleTask+0xbc>
	}
	else {
		// Insert after 'prev'
		temp->next = cursor;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	615a      	str	r2, [r3, #20]
		prev->next = temp;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	615a      	str	r2, [r3, #20]
		if (cursor != NULL){
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <SCH_RescheduleTask+0xbc>
			cursor->delay -= temp->delay;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	1ad2      	subs	r2, r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	e000      	b.n	8000b7c <SCH_RescheduleTask+0xbc>
	if (queue_head == NULL) return;
 8000b7a:	bf00      	nop
		}
	}
}
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	2000050c 	.word	0x2000050c

08000b88 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(void){
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SCH_Report_Status>:
		break;
	}
	UART_Print(c, strlen(c));
}

void SCH_Report_Status(void){
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_MspInit+0x60>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_MspInit+0x60>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000

08000c04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c14:	d113      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <HAL_TIM_Base_MspInit+0x44>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <HAL_TIM_Base_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <HAL_TIM_Base_MspInit+0x44>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201c      	movs	r0, #28
 8000c34:	f000 fa4b 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c38:	201c      	movs	r0, #28
 8000c3a:	f000 fa64 	bl	8001106 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a22      	ldr	r2, [pc, #136]	@ (8000cf0 <HAL_UART_MspInit+0xa4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d13d      	bne.n	8000ce8 <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6c:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <HAL_UART_MspInit+0xa8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a20      	ldr	r2, [pc, #128]	@ (8000cf4 <HAL_UART_MspInit+0xa8>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <HAL_UART_MspInit+0xa8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <HAL_UART_MspInit+0xa8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf4 <HAL_UART_MspInit+0xa8>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <HAL_UART_MspInit+0xa8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c9c:	2340      	movs	r3, #64	@ 0x40
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4812      	ldr	r0, [pc, #72]	@ (8000cf8 <HAL_UART_MspInit+0xac>)
 8000cb0:	f000 fa44 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <HAL_UART_MspInit+0xac>)
 8000cc8:	f000 fa38 	bl	800113c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_UART_MspInit+0xb0>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce2:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_UART_MspInit+0xb0>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce6:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	@ 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010c00 	.word	0x40010c00
 8000cfc:	40010000 	.word	0x40010000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <NMI_Handler+0x4>

08000d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <MemManage_Handler+0x4>

08000d18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f8ca 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <TIM2_IRQHandler+0x10>)
 8000d5e:	f001 f847 	bl	8001df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000078 	.word	0x20000078

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f001 fe84 	bl	8002aa8 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20002800 	.word	0x20002800
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000518 	.word	0x20000518
 8000dd4:	20000668 	.word	0x20000668

08000dd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: NGUYEN BINH
 */
#include "main.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df4:	d106      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x20>
		SCH_Update();
 8000df6:	f7ff fd5f 	bl	80008b8 <SCH_Update>
		ticks++;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a02      	ldr	r2, [pc, #8]	@ (8000e0c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e02:	6013      	str	r3, [r2, #0]
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000108 	.word	0x20000108

08000e10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e10:	f7ff ffe2 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e16:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e18:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e2c:	4c09      	ldr	r4, [pc, #36]	@ (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f001 fe3b 	bl	8002ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3e:	f7ff f98d 	bl	800015c <main>
  bx lr
 8000e42:	4770      	bx	lr
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e4c:	080033b8 	.word	0x080033b8
  ldr r2, =_sbss
 8000e50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e54:	20000668 	.word	0x20000668

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_Init+0x28>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_Init+0x28>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f923 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe92 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f93b 	bl	8001122 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f903 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_IncTick+0x1c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_IncTick+0x20>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a03      	ldr	r2, [pc, #12]	@ (8000f08 <HAL_IncTick+0x20>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000008 	.word	0x20000008
 8000f08:	2000051c 	.word	0x2000051c

08000f0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b02      	ldr	r3, [pc, #8]	@ (8000f1c <HAL_GetTick+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	2000051c 	.word	0x2000051c

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4906      	ldr	r1, [pc, #24]	@ (8000fb8 <__NVIC_EnableIRQ+0x34>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	@ (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	@ (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff90 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff2d 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff42 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff90 	bl	8001010 <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff35 	bl	8000f84 <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	@ 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e161      	b.n	8001414 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001150:	2201      	movs	r2, #1
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8150 	bne.w	800140e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a97      	ldr	r2, [pc, #604]	@ (80013d0 <HAL_GPIO_Init+0x294>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d05e      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001178:	4a95      	ldr	r2, [pc, #596]	@ (80013d0 <HAL_GPIO_Init+0x294>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d875      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 800117e:	4a95      	ldr	r2, [pc, #596]	@ (80013d4 <HAL_GPIO_Init+0x298>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d058      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001184:	4a93      	ldr	r2, [pc, #588]	@ (80013d4 <HAL_GPIO_Init+0x298>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d86f      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 800118a:	4a93      	ldr	r2, [pc, #588]	@ (80013d8 <HAL_GPIO_Init+0x29c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d052      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001190:	4a91      	ldr	r2, [pc, #580]	@ (80013d8 <HAL_GPIO_Init+0x29c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d869      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 8001196:	4a91      	ldr	r2, [pc, #580]	@ (80013dc <HAL_GPIO_Init+0x2a0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d04c      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 800119c:	4a8f      	ldr	r2, [pc, #572]	@ (80013dc <HAL_GPIO_Init+0x2a0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d863      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011a2:	4a8f      	ldr	r2, [pc, #572]	@ (80013e0 <HAL_GPIO_Init+0x2a4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d046      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 80011a8:	4a8d      	ldr	r2, [pc, #564]	@ (80013e0 <HAL_GPIO_Init+0x2a4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d85d      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d82a      	bhi.n	8001208 <HAL_GPIO_Init+0xcc>
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d859      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <HAL_GPIO_Init+0x80>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	08001237 	.word	0x08001237
 80011c0:	08001211 	.word	0x08001211
 80011c4:	08001223 	.word	0x08001223
 80011c8:	08001265 	.word	0x08001265
 80011cc:	0800126b 	.word	0x0800126b
 80011d0:	0800126b 	.word	0x0800126b
 80011d4:	0800126b 	.word	0x0800126b
 80011d8:	0800126b 	.word	0x0800126b
 80011dc:	0800126b 	.word	0x0800126b
 80011e0:	0800126b 	.word	0x0800126b
 80011e4:	0800126b 	.word	0x0800126b
 80011e8:	0800126b 	.word	0x0800126b
 80011ec:	0800126b 	.word	0x0800126b
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	0800126b 	.word	0x0800126b
 80011f8:	0800126b 	.word	0x0800126b
 80011fc:	0800126b 	.word	0x0800126b
 8001200:	08001219 	.word	0x08001219
 8001204:	0800122d 	.word	0x0800122d
 8001208:	4a76      	ldr	r2, [pc, #472]	@ (80013e4 <HAL_GPIO_Init+0x2a8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800120e:	e02c      	b.n	800126a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e029      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	3304      	adds	r3, #4
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e024      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	3308      	adds	r3, #8
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e01f      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	330c      	adds	r3, #12
 8001232:	623b      	str	r3, [r7, #32]
          break;
 8001234:	e01a      	b.n	800126c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800123e:	2304      	movs	r3, #4
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e013      	b.n	800126c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800124c:	2308      	movs	r3, #8
 800124e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	611a      	str	r2, [r3, #16]
          break;
 8001256:	e009      	b.n	800126c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	615a      	str	r2, [r3, #20]
          break;
 8001262:	e003      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x130>
          break;
 800126a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2bff      	cmp	r3, #255	@ 0xff
 8001270:	d801      	bhi.n	8001276 <HAL_GPIO_Init+0x13a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	e001      	b.n	800127a <HAL_GPIO_Init+0x13e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3304      	adds	r3, #4
 800127a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d802      	bhi.n	8001288 <HAL_GPIO_Init+0x14c>
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x152>
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	3b08      	subs	r3, #8
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	210f      	movs	r1, #15
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	6a39      	ldr	r1, [r7, #32]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80a9 	beq.w	800140e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012bc:	4b4a      	ldr	r3, [pc, #296]	@ (80013e8 <HAL_GPIO_Init+0x2ac>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <HAL_GPIO_Init+0x2ac>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <HAL_GPIO_Init+0x2ac>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d4:	4a45      	ldr	r2, [pc, #276]	@ (80013ec <HAL_GPIO_Init+0x2b0>)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3d      	ldr	r2, [pc, #244]	@ (80013f0 <HAL_GPIO_Init+0x2b4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00d      	beq.n	800131c <HAL_GPIO_Init+0x1e0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3c      	ldr	r2, [pc, #240]	@ (80013f4 <HAL_GPIO_Init+0x2b8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_Init+0x1dc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a3b      	ldr	r2, [pc, #236]	@ (80013f8 <HAL_GPIO_Init+0x2bc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_Init+0x1d8>
 8001310:	2302      	movs	r3, #2
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1e2>
 8001314:	2303      	movs	r3, #3
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1e2>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1e2>
 800131c:	2300      	movs	r3, #0
 800131e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132e:	492f      	ldr	r1, [pc, #188]	@ (80013ec <HAL_GPIO_Init+0x2b0>)
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	492b      	ldr	r1, [pc, #172]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001356:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	43db      	mvns	r3, r3
 800135e:	4927      	ldr	r1, [pc, #156]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 8001360:	4013      	ands	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4921      	ldr	r1, [pc, #132]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	43db      	mvns	r3, r3
 8001386:	491d      	ldr	r1, [pc, #116]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 8001388:	4013      	ands	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4917      	ldr	r1, [pc, #92]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4913      	ldr	r1, [pc, #76]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01f      	beq.n	8001400 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	490d      	ldr	r1, [pc, #52]	@ (80013fc <HAL_GPIO_Init+0x2c0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e01f      	b.n	800140e <HAL_GPIO_Init+0x2d2>
 80013ce:	bf00      	nop
 80013d0:	10320000 	.word	0x10320000
 80013d4:	10310000 	.word	0x10310000
 80013d8:	10220000 	.word	0x10220000
 80013dc:	10210000 	.word	0x10210000
 80013e0:	10120000 	.word	0x10120000
 80013e4:	10110000 	.word	0x10110000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	40011000 	.word	0x40011000
 80013fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_GPIO_Init+0x2f4>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	43db      	mvns	r3, r3
 8001408:	4909      	ldr	r1, [pc, #36]	@ (8001430 <HAL_GPIO_Init+0x2f4>)
 800140a:	4013      	ands	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	3301      	adds	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f ae96 	bne.w	8001150 <HAL_GPIO_Init+0x14>
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	372c      	adds	r7, #44	@ 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	611a      	str	r2, [r3, #16]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43d9      	mvns	r1, r3
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	400b      	ands	r3, r1
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	611a      	str	r2, [r3, #16]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
	...

08001498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e272      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8087 	beq.w	80015c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b8:	4b92      	ldr	r3, [pc, #584]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d00c      	beq.n	80014de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d112      	bne.n	80014f6 <HAL_RCC_OscConfig+0x5e>
 80014d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014dc:	d10b      	bne.n	80014f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	4b89      	ldr	r3, [pc, #548]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d06c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x12c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d168      	bne.n	80015c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e24c      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x76>
 8001500:	4b80      	ldr	r3, [pc, #512]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a7f      	ldr	r2, [pc, #508]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e02e      	b.n	800156c <HAL_RCC_OscConfig+0xd4>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x98>
 8001516:	4b7b      	ldr	r3, [pc, #492]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a7a      	ldr	r2, [pc, #488]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b78      	ldr	r3, [pc, #480]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a77      	ldr	r2, [pc, #476]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e01d      	b.n	800156c <HAL_RCC_OscConfig+0xd4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0xbc>
 800153a:	4b72      	ldr	r3, [pc, #456]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a71      	ldr	r2, [pc, #452]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6e      	ldr	r2, [pc, #440]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xd4>
 8001554:	4b6b      	ldr	r3, [pc, #428]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a6a      	ldr	r2, [pc, #424]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b68      	ldr	r3, [pc, #416]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a67      	ldr	r2, [pc, #412]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcca 	bl	8000f0c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcc6 	bl	8000f0c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	@ 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e200      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0xe4>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fcb6 	bl	8000f0c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fcb2 	bl	8000f0c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	@ 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1ec      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x10c>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d063      	beq.n	800169a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015de:	4b49      	ldr	r3, [pc, #292]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x18c>
 80015ea:	4b46      	ldr	r3, [pc, #280]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	4b43      	ldr	r3, [pc, #268]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x176>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e1c0      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4939      	ldr	r1, [pc, #228]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	e03a      	b.n	800169a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162c:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <HAL_RCC_OscConfig+0x270>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fc6b 	bl	8000f0c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fc67 	bl	8000f0c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1a1      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4927      	ldr	r1, [pc, #156]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e015      	b.n	800169a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166e:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <HAL_RCC_OscConfig+0x270>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fc4a 	bl	8000f0c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fc46 	bl	8000f0c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e180      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03a      	beq.n	800171c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d019      	beq.n	80016e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_RCC_OscConfig+0x274>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff fc2a 	bl	8000f0c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fc26 	bl	8000f0c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e160      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f000 face 	bl	8001c7c <RCC_Delay>
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_RCC_OscConfig+0x274>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fc10 	bl	8000f0c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ee:	e00f      	b.n	8001710 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff fc0c 	bl	8000f0c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d908      	bls.n	8001710 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e146      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	42420000 	.word	0x42420000
 800170c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001710:	4b92      	ldr	r3, [pc, #584]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1e9      	bne.n	80016f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80a6 	beq.w	8001876 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172e:	4b8b      	ldr	r3, [pc, #556]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b88      	ldr	r3, [pc, #544]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a87      	ldr	r2, [pc, #540]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b85      	ldr	r3, [pc, #532]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b82      	ldr	r3, [pc, #520]	@ (8001960 <HAL_RCC_OscConfig+0x4c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b7f      	ldr	r3, [pc, #508]	@ (8001960 <HAL_RCC_OscConfig+0x4c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7e      	ldr	r2, [pc, #504]	@ (8001960 <HAL_RCC_OscConfig+0x4c8>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff fbcd 	bl	8000f0c <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff fbc9 	bl	8000f0c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	@ 0x64
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e103      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4b75      	ldr	r3, [pc, #468]	@ (8001960 <HAL_RCC_OscConfig+0x4c8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x312>
 800179c:	4b6f      	ldr	r3, [pc, #444]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a6e      	ldr	r2, [pc, #440]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	e02d      	b.n	8001806 <HAL_RCC_OscConfig+0x36e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x334>
 80017b2:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a69      	ldr	r2, [pc, #420]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6213      	str	r3, [r2, #32]
 80017be:	4b67      	ldr	r3, [pc, #412]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a66      	ldr	r2, [pc, #408]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	e01c      	b.n	8001806 <HAL_RCC_OscConfig+0x36e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d10c      	bne.n	80017ee <HAL_RCC_OscConfig+0x356>
 80017d4:	4b61      	ldr	r3, [pc, #388]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a60      	ldr	r2, [pc, #384]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	4b5e      	ldr	r3, [pc, #376]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a5d      	ldr	r2, [pc, #372]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	e00b      	b.n	8001806 <HAL_RCC_OscConfig+0x36e>
 80017ee:	4b5b      	ldr	r3, [pc, #364]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a5a      	ldr	r2, [pc, #360]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	4b58      	ldr	r3, [pc, #352]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a57      	ldr	r2, [pc, #348]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d015      	beq.n	800183a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7ff fb7d 	bl	8000f0c <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fb79 	bl	8000f0c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e0b1      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	4b4b      	ldr	r3, [pc, #300]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ee      	beq.n	8001816 <HAL_RCC_OscConfig+0x37e>
 8001838:	e014      	b.n	8001864 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff fb67 	bl	8000f0c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff fb63 	bl	8000f0c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e09b      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	4b40      	ldr	r3, [pc, #256]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ee      	bne.n	8001842 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d105      	bne.n	8001876 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186a:	4b3c      	ldr	r3, [pc, #240]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a3b      	ldr	r2, [pc, #236]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8087 	beq.w	800198e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001880:	4b36      	ldr	r3, [pc, #216]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d061      	beq.n	8001950 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d146      	bne.n	8001922 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001894:	4b33      	ldr	r3, [pc, #204]	@ (8001964 <HAL_RCC_OscConfig+0x4cc>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fb37 	bl	8000f0c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff fb33 	bl	8000f0c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e06d      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b4:	4b29      	ldr	r3, [pc, #164]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4921      	ldr	r1, [pc, #132]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a19      	ldr	r1, [r3, #32]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	430b      	orrs	r3, r1
 80018ee:	491b      	ldr	r1, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x4cc>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb07 	bl	8000f0c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff fb03 	bl	8000f0c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e03d      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x46a>
 8001920:	e035      	b.n	800198e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_RCC_OscConfig+0x4cc>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff faf0 	bl	8000f0c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff faec 	bl	8000f0c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e026      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_RCC_OscConfig+0x4c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x498>
 800194e:	e01e      	b.n	800198e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d107      	bne.n	8001968 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e019      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
 800195c:	40021000 	.word	0x40021000
 8001960:	40007000 	.word	0x40007000
 8001964:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_OscConfig+0x500>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	429a      	cmp	r2, r3
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0d0      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0207 	bic.w	r2, r3, #7
 80019c6:	4965      	ldr	r1, [pc, #404]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a58      	ldr	r2, [pc, #352]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a52      	ldr	r2, [pc, #328]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b41      	ldr	r3, [pc, #260]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e073      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4936      	ldr	r1, [pc, #216]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fa3e 	bl	8000f0c <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff fa3a 	bl	8000f0c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e053      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d210      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4922      	ldr	r1, [pc, #136]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <HAL_RCC_ClockConfig+0x1cc>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_ClockConfig+0x1d0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f99c 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08003348 	.word	0x08003348
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x30>
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x36>
 8001b9e:	e027      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba2:	613b      	str	r3, [r7, #16]
      break;
 8001ba4:	e027      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	0c9b      	lsrs	r3, r3, #18
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	4a17      	ldr	r2, [pc, #92]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d010      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0c5b      	lsrs	r3, r3, #17
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	4a11      	ldr	r2, [pc, #68]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bd2:	fb03 f202 	mul.w	r2, r3, r2
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e004      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001be4:	fb02 f303 	mul.w	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	613b      	str	r3, [r7, #16]
      break;
 8001bee:	e002      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bf2:	613b      	str	r3, [r7, #16]
      break;
 8001bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf6:	693b      	ldr	r3, [r7, #16]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	007a1200 	.word	0x007a1200
 8001c0c:	08003360 	.word	0x08003360
 8001c10:	08003370 	.word	0x08003370
 8001c14:	003d0900 	.word	0x003d0900

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	@ (8001c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff2 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	@ (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003358 	.word	0x08003358

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0adb      	lsrs	r3, r3, #11
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08003358 	.word	0x08003358

08001c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c84:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <RCC_Delay+0x34>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <RCC_Delay+0x38>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0a5b      	lsrs	r3, r3, #9
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c98:	bf00      	nop
  }
  while (Delay --);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	60fa      	str	r2, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f9      	bne.n	8001c98 <RCC_Delay+0x1c>
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	10624dd3 	.word	0x10624dd3

08001cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e041      	b.n	8001d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe ff90 	bl	8000c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f000 fa56 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d001      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e035      	b.n	8001ddc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a16      	ldr	r2, [pc, #88]	@ (8001de8 <HAL_TIM_Base_Start_IT+0x90>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x4e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9a:	d004      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x4e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <HAL_TIM_Base_Start_IT+0x94>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d111      	bne.n	8001dca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d010      	beq.n	8001dda <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc8:	e007      	b.n	8001dda <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400

08001df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0202 	mvn.w	r2, #2
 8001e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f998 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f98b 	bl	800215e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f99a 	bl	8002182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d020      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01b      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0204 	mvn.w	r2, #4
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f972 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f965 	bl	800215e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f974 	bl	8002182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d020      	beq.n	8001eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0208 	mvn.w	r2, #8
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f94c 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f93f 	bl	800215e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f94e 	bl	8002182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d020      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0210 	mvn.w	r2, #16
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f926 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f919 	bl	800215e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f928 	bl	8002182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0201 	mvn.w	r2, #1
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe ff44 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa6f 	bl	800245e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8f8 	bl	8002194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00c      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0220 	mvn.w	r2, #32
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fa42 	bl	800244c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_TIM_ConfigClockSource+0x1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0b4      	b.n	8002156 <HAL_TIM_ConfigClockSource+0x186>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800200a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002024:	d03e      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800202a:	f200 8087 	bhi.w	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002032:	f000 8086 	beq.w	8002142 <HAL_TIM_ConfigClockSource+0x172>
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800203a:	d87f      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b70      	cmp	r3, #112	@ 0x70
 800203e:	d01a      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0xa6>
 8002040:	2b70      	cmp	r3, #112	@ 0x70
 8002042:	d87b      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b60      	cmp	r3, #96	@ 0x60
 8002046:	d050      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x11a>
 8002048:	2b60      	cmp	r3, #96	@ 0x60
 800204a:	d877      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b50      	cmp	r3, #80	@ 0x50
 800204e:	d03c      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0xfa>
 8002050:	2b50      	cmp	r3, #80	@ 0x50
 8002052:	d873      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b40      	cmp	r3, #64	@ 0x40
 8002056:	d058      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x13a>
 8002058:	2b40      	cmp	r3, #64	@ 0x40
 800205a:	d86f      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b30      	cmp	r3, #48	@ 0x30
 800205e:	d064      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
 8002060:	2b30      	cmp	r3, #48	@ 0x30
 8002062:	d86b      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b20      	cmp	r3, #32
 8002066:	d060      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
 8002068:	2b20      	cmp	r3, #32
 800206a:	d867      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05c      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
 8002070:	2b10      	cmp	r3, #16
 8002072:	d05a      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
 8002074:	e062      	b.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002086:	f000 f96a 	bl	800235e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	609a      	str	r2, [r3, #8]
      break;
 80020a2:	e04f      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	f000 f953 	bl	800235e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020c6:	609a      	str	r2, [r3, #8]
      break;
 80020c8:	e03c      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d6:	461a      	mov	r2, r3
 80020d8:	f000 f8ca 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2150      	movs	r1, #80	@ 0x50
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f921 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 80020e8:	e02c      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 f8e8 	bl	80022cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2160      	movs	r1, #96	@ 0x60
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f911 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 8002108:	e01c      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002116:	461a      	mov	r2, r3
 8002118:	f000 f8aa 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2140      	movs	r1, #64	@ 0x40
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f901 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 8002128:	e00c      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f000 f8f8 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 800213a:	e003      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e000      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <TIM_Base_SetConfig+0xc0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <TIM_Base_SetConfig+0x28>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0x28>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a28      	ldr	r2, [pc, #160]	@ (800226c <TIM_Base_SetConfig+0xc4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d108      	bne.n	80021e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a20      	ldr	r2, [pc, #128]	@ (8002268 <TIM_Base_SetConfig+0xc0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0x52>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0x52>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <TIM_Base_SetConfig+0xc4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <TIM_Base_SetConfig+0xc0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f023 0201 	bic.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	611a      	str	r2, [r3, #16]
  }
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40000400 	.word	0x40000400

08002270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f023 0201 	bic.w	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800229a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f023 030a 	bic.w	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	621a      	str	r2, [r3, #32]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f023 0210 	bic.w	r2, r3, #16
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	031b      	lsls	r3, r3, #12
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002308:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	621a      	str	r2, [r3, #32]
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	f043 0307 	orr.w	r3, r3, #7
 800234c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800235e:	b480      	push	{r7}
 8002360:	b087      	sub	sp, #28
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002378:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	021a      	lsls	r2, r3, #8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	431a      	orrs	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4313      	orrs	r3, r2
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	609a      	str	r2, [r3, #8]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e041      	b.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002400:	d004      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10c      	bne.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	4313      	orrs	r3, r2
 800241c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40000400 	.word	0x40000400

0800244c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e042      	b.n	8002508 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fbd8 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	@ 0x24
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f971 	bl	800279c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b20      	cmp	r3, #32
 800252e:	d175      	bne.n	800261c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_UART_Transmit+0x2c>
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e06e      	b.n	800261e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2221      	movs	r2, #33	@ 0x21
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800254e:	f7fe fcdd 	bl	8000f0c <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002568:	d108      	bne.n	800257c <HAL_UART_Transmit+0x6c>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	e003      	b.n	8002584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002584:	e02e      	b.n	80025e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	@ 0x80
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f848 	bl	8002626 <UART_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03a      	b.n	800261e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3302      	adds	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e007      	b.n	80025d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3301      	adds	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1cb      	bne.n	8002586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2140      	movs	r1, #64	@ 0x40
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f814 	bl	8002626 <UART_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e006      	b.n	800261e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002636:	e03b      	b.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d037      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002640:	f7fe fc64 	bl	8000f0c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	6a3a      	ldr	r2, [r7, #32]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <UART_WaitOnFlagUntilTimeout+0x30>
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e03a      	b.n	80026d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b80      	cmp	r3, #128	@ 0x80
 800266c:	d020      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b40      	cmp	r3, #64	@ 0x40
 8002672:	d01d      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b08      	cmp	r3, #8
 8002680:	d116      	bne.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f81d 	bl	80026d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2208      	movs	r2, #8
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e00f      	b.n	80026d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4013      	ands	r3, r2
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d0b4      	beq.n	8002638 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026d8:	b480      	push	{r7}
 80026da:	b095      	sub	sp, #84	@ 0x54
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	330c      	adds	r3, #12
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ea:	e853 3f00 	ldrex	r3, [r3]
 80026ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002700:	643a      	str	r2, [r7, #64]	@ 0x40
 8002702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002708:	e841 2300 	strex	r3, r2, [r1]
 800270c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e5      	bne.n	80026e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3314      	adds	r3, #20
 800271a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	e853 3f00 	ldrex	r3, [r3]
 8002722:	61fb      	str	r3, [r7, #28]
   return(result);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3314      	adds	r3, #20
 8002732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800273a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800273c:	e841 2300 	strex	r3, r2, [r1]
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e5      	bne.n	8002714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	2b01      	cmp	r3, #1
 800274e:	d119      	bne.n	8002784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	e853 3f00 	ldrex	r3, [r3]
 800275e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0310 	bic.w	r3, r3, #16
 8002766:	647b      	str	r3, [r7, #68]	@ 0x44
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002770:	61ba      	str	r2, [r7, #24]
 8002772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	e841 2300 	strex	r3, r2, [r1]
 800277c:	613b      	str	r3, [r7, #16]
   return(result);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e5      	bne.n	8002750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002792:	bf00      	nop
 8002794:	3754      	adds	r7, #84	@ 0x54
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80027d6:	f023 030c 	bic.w	r3, r3, #12
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2c      	ldr	r2, [pc, #176]	@ (80028b0 <UART_SetConfig+0x114>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002804:	f7ff fa26 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	e002      	b.n	8002812 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800280c:	f7ff fa0e 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009a      	lsls	r2, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <UART_SetConfig+0x118>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	0119      	lsls	r1, r3, #4
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fbb2 f2f3 	udiv	r2, r2, r3
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <UART_SetConfig+0x118>)
 800284a:	fba3 0302 	umull	r0, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2064      	movs	r0, #100	@ 0x64
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	@ 0x32
 800285c:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <UART_SetConfig+0x118>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002868:	4419      	add	r1, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009a      	lsls	r2, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <UART_SetConfig+0x118>)
 8002882:	fba3 0302 	umull	r0, r3, r3, r2
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2064      	movs	r0, #100	@ 0x64
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	3332      	adds	r3, #50	@ 0x32
 8002894:	4a07      	ldr	r2, [pc, #28]	@ (80028b4 <UART_SetConfig+0x118>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	440a      	add	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40013800 	.word	0x40013800
 80028b4:	51eb851f 	.word	0x51eb851f

080028b8 <malloc>:
 80028b8:	4b02      	ldr	r3, [pc, #8]	@ (80028c4 <malloc+0xc>)
 80028ba:	4601      	mov	r1, r0
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f000 b82d 	b.w	800291c <_malloc_r>
 80028c2:	bf00      	nop
 80028c4:	2000000c 	.word	0x2000000c

080028c8 <free>:
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <free+0xc>)
 80028ca:	4601      	mov	r1, r0
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	f000 b917 	b.w	8002b00 <_free_r>
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <sbrk_aligned>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	4e0f      	ldr	r6, [pc, #60]	@ (8002918 <sbrk_aligned+0x40>)
 80028dc:	460c      	mov	r4, r1
 80028de:	6831      	ldr	r1, [r6, #0]
 80028e0:	4605      	mov	r5, r0
 80028e2:	b911      	cbnz	r1, 80028ea <sbrk_aligned+0x12>
 80028e4:	f000 f8d0 	bl	8002a88 <_sbrk_r>
 80028e8:	6030      	str	r0, [r6, #0]
 80028ea:	4621      	mov	r1, r4
 80028ec:	4628      	mov	r0, r5
 80028ee:	f000 f8cb 	bl	8002a88 <_sbrk_r>
 80028f2:	1c43      	adds	r3, r0, #1
 80028f4:	d103      	bne.n	80028fe <sbrk_aligned+0x26>
 80028f6:	f04f 34ff 	mov.w	r4, #4294967295
 80028fa:	4620      	mov	r0, r4
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
 80028fe:	1cc4      	adds	r4, r0, #3
 8002900:	f024 0403 	bic.w	r4, r4, #3
 8002904:	42a0      	cmp	r0, r4
 8002906:	d0f8      	beq.n	80028fa <sbrk_aligned+0x22>
 8002908:	1a21      	subs	r1, r4, r0
 800290a:	4628      	mov	r0, r5
 800290c:	f000 f8bc 	bl	8002a88 <_sbrk_r>
 8002910:	3001      	adds	r0, #1
 8002912:	d1f2      	bne.n	80028fa <sbrk_aligned+0x22>
 8002914:	e7ef      	b.n	80028f6 <sbrk_aligned+0x1e>
 8002916:	bf00      	nop
 8002918:	20000520 	.word	0x20000520

0800291c <_malloc_r>:
 800291c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002920:	1ccd      	adds	r5, r1, #3
 8002922:	f025 0503 	bic.w	r5, r5, #3
 8002926:	3508      	adds	r5, #8
 8002928:	2d0c      	cmp	r5, #12
 800292a:	bf38      	it	cc
 800292c:	250c      	movcc	r5, #12
 800292e:	2d00      	cmp	r5, #0
 8002930:	4606      	mov	r6, r0
 8002932:	db01      	blt.n	8002938 <_malloc_r+0x1c>
 8002934:	42a9      	cmp	r1, r5
 8002936:	d904      	bls.n	8002942 <_malloc_r+0x26>
 8002938:	230c      	movs	r3, #12
 800293a:	6033      	str	r3, [r6, #0]
 800293c:	2000      	movs	r0, #0
 800293e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a18 <_malloc_r+0xfc>
 8002946:	f000 f869 	bl	8002a1c <__malloc_lock>
 800294a:	f8d8 3000 	ldr.w	r3, [r8]
 800294e:	461c      	mov	r4, r3
 8002950:	bb44      	cbnz	r4, 80029a4 <_malloc_r+0x88>
 8002952:	4629      	mov	r1, r5
 8002954:	4630      	mov	r0, r6
 8002956:	f7ff ffbf 	bl	80028d8 <sbrk_aligned>
 800295a:	1c43      	adds	r3, r0, #1
 800295c:	4604      	mov	r4, r0
 800295e:	d158      	bne.n	8002a12 <_malloc_r+0xf6>
 8002960:	f8d8 4000 	ldr.w	r4, [r8]
 8002964:	4627      	mov	r7, r4
 8002966:	2f00      	cmp	r7, #0
 8002968:	d143      	bne.n	80029f2 <_malloc_r+0xd6>
 800296a:	2c00      	cmp	r4, #0
 800296c:	d04b      	beq.n	8002a06 <_malloc_r+0xea>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	4639      	mov	r1, r7
 8002972:	4630      	mov	r0, r6
 8002974:	eb04 0903 	add.w	r9, r4, r3
 8002978:	f000 f886 	bl	8002a88 <_sbrk_r>
 800297c:	4581      	cmp	r9, r0
 800297e:	d142      	bne.n	8002a06 <_malloc_r+0xea>
 8002980:	6821      	ldr	r1, [r4, #0]
 8002982:	4630      	mov	r0, r6
 8002984:	1a6d      	subs	r5, r5, r1
 8002986:	4629      	mov	r1, r5
 8002988:	f7ff ffa6 	bl	80028d8 <sbrk_aligned>
 800298c:	3001      	adds	r0, #1
 800298e:	d03a      	beq.n	8002a06 <_malloc_r+0xea>
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	442b      	add	r3, r5
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	f8d8 3000 	ldr.w	r3, [r8]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	bb62      	cbnz	r2, 80029f8 <_malloc_r+0xdc>
 800299e:	f8c8 7000 	str.w	r7, [r8]
 80029a2:	e00f      	b.n	80029c4 <_malloc_r+0xa8>
 80029a4:	6822      	ldr	r2, [r4, #0]
 80029a6:	1b52      	subs	r2, r2, r5
 80029a8:	d420      	bmi.n	80029ec <_malloc_r+0xd0>
 80029aa:	2a0b      	cmp	r2, #11
 80029ac:	d917      	bls.n	80029de <_malloc_r+0xc2>
 80029ae:	1961      	adds	r1, r4, r5
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	6025      	str	r5, [r4, #0]
 80029b4:	bf18      	it	ne
 80029b6:	6059      	strne	r1, [r3, #4]
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	bf08      	it	eq
 80029bc:	f8c8 1000 	streq.w	r1, [r8]
 80029c0:	5162      	str	r2, [r4, r5]
 80029c2:	604b      	str	r3, [r1, #4]
 80029c4:	4630      	mov	r0, r6
 80029c6:	f000 f82f 	bl	8002a28 <__malloc_unlock>
 80029ca:	f104 000b 	add.w	r0, r4, #11
 80029ce:	1d23      	adds	r3, r4, #4
 80029d0:	f020 0007 	bic.w	r0, r0, #7
 80029d4:	1ac2      	subs	r2, r0, r3
 80029d6:	bf1c      	itt	ne
 80029d8:	1a1b      	subne	r3, r3, r0
 80029da:	50a3      	strne	r3, [r4, r2]
 80029dc:	e7af      	b.n	800293e <_malloc_r+0x22>
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	bf0c      	ite	eq
 80029e4:	f8c8 2000 	streq.w	r2, [r8]
 80029e8:	605a      	strne	r2, [r3, #4]
 80029ea:	e7eb      	b.n	80029c4 <_malloc_r+0xa8>
 80029ec:	4623      	mov	r3, r4
 80029ee:	6864      	ldr	r4, [r4, #4]
 80029f0:	e7ae      	b.n	8002950 <_malloc_r+0x34>
 80029f2:	463c      	mov	r4, r7
 80029f4:	687f      	ldr	r7, [r7, #4]
 80029f6:	e7b6      	b.n	8002966 <_malloc_r+0x4a>
 80029f8:	461a      	mov	r2, r3
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	42a3      	cmp	r3, r4
 80029fe:	d1fb      	bne.n	80029f8 <_malloc_r+0xdc>
 8002a00:	2300      	movs	r3, #0
 8002a02:	6053      	str	r3, [r2, #4]
 8002a04:	e7de      	b.n	80029c4 <_malloc_r+0xa8>
 8002a06:	230c      	movs	r3, #12
 8002a08:	4630      	mov	r0, r6
 8002a0a:	6033      	str	r3, [r6, #0]
 8002a0c:	f000 f80c 	bl	8002a28 <__malloc_unlock>
 8002a10:	e794      	b.n	800293c <_malloc_r+0x20>
 8002a12:	6005      	str	r5, [r0, #0]
 8002a14:	e7d6      	b.n	80029c4 <_malloc_r+0xa8>
 8002a16:	bf00      	nop
 8002a18:	20000524 	.word	0x20000524

08002a1c <__malloc_lock>:
 8002a1c:	4801      	ldr	r0, [pc, #4]	@ (8002a24 <__malloc_lock+0x8>)
 8002a1e:	f000 b86d 	b.w	8002afc <__retarget_lock_acquire_recursive>
 8002a22:	bf00      	nop
 8002a24:	20000664 	.word	0x20000664

08002a28 <__malloc_unlock>:
 8002a28:	4801      	ldr	r0, [pc, #4]	@ (8002a30 <__malloc_unlock+0x8>)
 8002a2a:	f000 b868 	b.w	8002afe <__retarget_lock_release_recursive>
 8002a2e:	bf00      	nop
 8002a30:	20000664 	.word	0x20000664

08002a34 <siprintf>:
 8002a34:	b40e      	push	{r1, r2, r3}
 8002a36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a3a:	b510      	push	{r4, lr}
 8002a3c:	2400      	movs	r4, #0
 8002a3e:	b09d      	sub	sp, #116	@ 0x74
 8002a40:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002a42:	9002      	str	r0, [sp, #8]
 8002a44:	9006      	str	r0, [sp, #24]
 8002a46:	9107      	str	r1, [sp, #28]
 8002a48:	9104      	str	r1, [sp, #16]
 8002a4a:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <siprintf+0x3c>)
 8002a4c:	4909      	ldr	r1, [pc, #36]	@ (8002a74 <siprintf+0x40>)
 8002a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a52:	9105      	str	r1, [sp, #20]
 8002a54:	6800      	ldr	r0, [r0, #0]
 8002a56:	a902      	add	r1, sp, #8
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002a5c:	f000 f8f4 	bl	8002c48 <_svfiprintf_r>
 8002a60:	9b02      	ldr	r3, [sp, #8]
 8002a62:	701c      	strb	r4, [r3, #0]
 8002a64:	b01d      	add	sp, #116	@ 0x74
 8002a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a6a:	b003      	add	sp, #12
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	ffff0208 	.word	0xffff0208

08002a78 <memset>:
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4402      	add	r2, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <_sbrk_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	4d05      	ldr	r5, [pc, #20]	@ (8002aa4 <_sbrk_r+0x1c>)
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	f7fe f96a 	bl	8000d6c <_sbrk>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk_r+0x1a>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	b103      	cbz	r3, 8002aa2 <_sbrk_r+0x1a>
 8002aa0:	6023      	str	r3, [r4, #0]
 8002aa2:	bd38      	pop	{r3, r4, r5, pc}
 8002aa4:	20000660 	.word	0x20000660

08002aa8 <__errno>:
 8002aa8:	4b01      	ldr	r3, [pc, #4]	@ (8002ab0 <__errno+0x8>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	2000000c 	.word	0x2000000c

08002ab4 <__libc_init_array>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	4d0c      	ldr	r5, [pc, #48]	@ (8002aec <__libc_init_array+0x38>)
 8002aba:	4c0d      	ldr	r4, [pc, #52]	@ (8002af0 <__libc_init_array+0x3c>)
 8002abc:	1b64      	subs	r4, r4, r5
 8002abe:	10a4      	asrs	r4, r4, #2
 8002ac0:	42a6      	cmp	r6, r4
 8002ac2:	d109      	bne.n	8002ad8 <__libc_init_array+0x24>
 8002ac4:	f000 fbb8 	bl	8003238 <_init>
 8002ac8:	2600      	movs	r6, #0
 8002aca:	4d0a      	ldr	r5, [pc, #40]	@ (8002af4 <__libc_init_array+0x40>)
 8002acc:	4c0a      	ldr	r4, [pc, #40]	@ (8002af8 <__libc_init_array+0x44>)
 8002ace:	1b64      	subs	r4, r4, r5
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	42a6      	cmp	r6, r4
 8002ad4:	d105      	bne.n	8002ae2 <__libc_init_array+0x2e>
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
 8002ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002adc:	4798      	blx	r3
 8002ade:	3601      	adds	r6, #1
 8002ae0:	e7ee      	b.n	8002ac0 <__libc_init_array+0xc>
 8002ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae6:	4798      	blx	r3
 8002ae8:	3601      	adds	r6, #1
 8002aea:	e7f2      	b.n	8002ad2 <__libc_init_array+0x1e>
 8002aec:	080033b0 	.word	0x080033b0
 8002af0:	080033b0 	.word	0x080033b0
 8002af4:	080033b0 	.word	0x080033b0
 8002af8:	080033b4 	.word	0x080033b4

08002afc <__retarget_lock_acquire_recursive>:
 8002afc:	4770      	bx	lr

08002afe <__retarget_lock_release_recursive>:
 8002afe:	4770      	bx	lr

08002b00 <_free_r>:
 8002b00:	b538      	push	{r3, r4, r5, lr}
 8002b02:	4605      	mov	r5, r0
 8002b04:	2900      	cmp	r1, #0
 8002b06:	d040      	beq.n	8002b8a <_free_r+0x8a>
 8002b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b0c:	1f0c      	subs	r4, r1, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bfb8      	it	lt
 8002b12:	18e4      	addlt	r4, r4, r3
 8002b14:	f7ff ff82 	bl	8002a1c <__malloc_lock>
 8002b18:	4a1c      	ldr	r2, [pc, #112]	@ (8002b8c <_free_r+0x8c>)
 8002b1a:	6813      	ldr	r3, [r2, #0]
 8002b1c:	b933      	cbnz	r3, 8002b2c <_free_r+0x2c>
 8002b1e:	6063      	str	r3, [r4, #4]
 8002b20:	6014      	str	r4, [r2, #0]
 8002b22:	4628      	mov	r0, r5
 8002b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b28:	f7ff bf7e 	b.w	8002a28 <__malloc_unlock>
 8002b2c:	42a3      	cmp	r3, r4
 8002b2e:	d908      	bls.n	8002b42 <_free_r+0x42>
 8002b30:	6820      	ldr	r0, [r4, #0]
 8002b32:	1821      	adds	r1, r4, r0
 8002b34:	428b      	cmp	r3, r1
 8002b36:	bf01      	itttt	eq
 8002b38:	6819      	ldreq	r1, [r3, #0]
 8002b3a:	685b      	ldreq	r3, [r3, #4]
 8002b3c:	1809      	addeq	r1, r1, r0
 8002b3e:	6021      	streq	r1, [r4, #0]
 8002b40:	e7ed      	b.n	8002b1e <_free_r+0x1e>
 8002b42:	461a      	mov	r2, r3
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	b10b      	cbz	r3, 8002b4c <_free_r+0x4c>
 8002b48:	42a3      	cmp	r3, r4
 8002b4a:	d9fa      	bls.n	8002b42 <_free_r+0x42>
 8002b4c:	6811      	ldr	r1, [r2, #0]
 8002b4e:	1850      	adds	r0, r2, r1
 8002b50:	42a0      	cmp	r0, r4
 8002b52:	d10b      	bne.n	8002b6c <_free_r+0x6c>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	4401      	add	r1, r0
 8002b58:	1850      	adds	r0, r2, r1
 8002b5a:	4283      	cmp	r3, r0
 8002b5c:	6011      	str	r1, [r2, #0]
 8002b5e:	d1e0      	bne.n	8002b22 <_free_r+0x22>
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4408      	add	r0, r1
 8002b66:	6010      	str	r0, [r2, #0]
 8002b68:	6053      	str	r3, [r2, #4]
 8002b6a:	e7da      	b.n	8002b22 <_free_r+0x22>
 8002b6c:	d902      	bls.n	8002b74 <_free_r+0x74>
 8002b6e:	230c      	movs	r3, #12
 8002b70:	602b      	str	r3, [r5, #0]
 8002b72:	e7d6      	b.n	8002b22 <_free_r+0x22>
 8002b74:	6820      	ldr	r0, [r4, #0]
 8002b76:	1821      	adds	r1, r4, r0
 8002b78:	428b      	cmp	r3, r1
 8002b7a:	bf01      	itttt	eq
 8002b7c:	6819      	ldreq	r1, [r3, #0]
 8002b7e:	685b      	ldreq	r3, [r3, #4]
 8002b80:	1809      	addeq	r1, r1, r0
 8002b82:	6021      	streq	r1, [r4, #0]
 8002b84:	6063      	str	r3, [r4, #4]
 8002b86:	6054      	str	r4, [r2, #4]
 8002b88:	e7cb      	b.n	8002b22 <_free_r+0x22>
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	20000524 	.word	0x20000524

08002b90 <__ssputs_r>:
 8002b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b94:	461f      	mov	r7, r3
 8002b96:	688e      	ldr	r6, [r1, #8]
 8002b98:	4682      	mov	sl, r0
 8002b9a:	42be      	cmp	r6, r7
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	680b      	ldr	r3, [r1, #0]
 8002ba2:	d82d      	bhi.n	8002c00 <__ssputs_r+0x70>
 8002ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ba8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002bac:	d026      	beq.n	8002bfc <__ssputs_r+0x6c>
 8002bae:	6965      	ldr	r5, [r4, #20]
 8002bb0:	6909      	ldr	r1, [r1, #16]
 8002bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bb6:	eba3 0901 	sub.w	r9, r3, r1
 8002bba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bbe:	1c7b      	adds	r3, r7, #1
 8002bc0:	444b      	add	r3, r9
 8002bc2:	106d      	asrs	r5, r5, #1
 8002bc4:	429d      	cmp	r5, r3
 8002bc6:	bf38      	it	cc
 8002bc8:	461d      	movcc	r5, r3
 8002bca:	0553      	lsls	r3, r2, #21
 8002bcc:	d527      	bpl.n	8002c1e <__ssputs_r+0x8e>
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7ff fea4 	bl	800291c <_malloc_r>
 8002bd4:	4606      	mov	r6, r0
 8002bd6:	b360      	cbz	r0, 8002c32 <__ssputs_r+0xa2>
 8002bd8:	464a      	mov	r2, r9
 8002bda:	6921      	ldr	r1, [r4, #16]
 8002bdc:	f000 fae8 	bl	80031b0 <memcpy>
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bea:	81a3      	strh	r3, [r4, #12]
 8002bec:	6126      	str	r6, [r4, #16]
 8002bee:	444e      	add	r6, r9
 8002bf0:	6026      	str	r6, [r4, #0]
 8002bf2:	463e      	mov	r6, r7
 8002bf4:	6165      	str	r5, [r4, #20]
 8002bf6:	eba5 0509 	sub.w	r5, r5, r9
 8002bfa:	60a5      	str	r5, [r4, #8]
 8002bfc:	42be      	cmp	r6, r7
 8002bfe:	d900      	bls.n	8002c02 <__ssputs_r+0x72>
 8002c00:	463e      	mov	r6, r7
 8002c02:	4632      	mov	r2, r6
 8002c04:	4641      	mov	r1, r8
 8002c06:	6820      	ldr	r0, [r4, #0]
 8002c08:	f000 faaa 	bl	8003160 <memmove>
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	68a3      	ldr	r3, [r4, #8]
 8002c10:	1b9b      	subs	r3, r3, r6
 8002c12:	60a3      	str	r3, [r4, #8]
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	4433      	add	r3, r6
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1e:	462a      	mov	r2, r5
 8002c20:	f000 fad4 	bl	80031cc <_realloc_r>
 8002c24:	4606      	mov	r6, r0
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d1e0      	bne.n	8002bec <__ssputs_r+0x5c>
 8002c2a:	4650      	mov	r0, sl
 8002c2c:	6921      	ldr	r1, [r4, #16]
 8002c2e:	f7ff ff67 	bl	8002b00 <_free_r>
 8002c32:	230c      	movs	r3, #12
 8002c34:	f8ca 3000 	str.w	r3, [sl]
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	e7e9      	b.n	8002c1a <__ssputs_r+0x8a>
	...

08002c48 <_svfiprintf_r>:
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	4698      	mov	r8, r3
 8002c4e:	898b      	ldrh	r3, [r1, #12]
 8002c50:	4607      	mov	r7, r0
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	460d      	mov	r5, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	b09d      	sub	sp, #116	@ 0x74
 8002c5a:	d510      	bpl.n	8002c7e <_svfiprintf_r+0x36>
 8002c5c:	690b      	ldr	r3, [r1, #16]
 8002c5e:	b973      	cbnz	r3, 8002c7e <_svfiprintf_r+0x36>
 8002c60:	2140      	movs	r1, #64	@ 0x40
 8002c62:	f7ff fe5b 	bl	800291c <_malloc_r>
 8002c66:	6028      	str	r0, [r5, #0]
 8002c68:	6128      	str	r0, [r5, #16]
 8002c6a:	b930      	cbnz	r0, 8002c7a <_svfiprintf_r+0x32>
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	b01d      	add	sp, #116	@ 0x74
 8002c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7a:	2340      	movs	r3, #64	@ 0x40
 8002c7c:	616b      	str	r3, [r5, #20]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c82:	2320      	movs	r3, #32
 8002c84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c88:	2330      	movs	r3, #48	@ 0x30
 8002c8a:	f04f 0901 	mov.w	r9, #1
 8002c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c92:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002e2c <_svfiprintf_r+0x1e4>
 8002c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	469a      	mov	sl, r3
 8002c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ca2:	b10a      	cbz	r2, 8002ca8 <_svfiprintf_r+0x60>
 8002ca4:	2a25      	cmp	r2, #37	@ 0x25
 8002ca6:	d1f9      	bne.n	8002c9c <_svfiprintf_r+0x54>
 8002ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8002cac:	d00b      	beq.n	8002cc6 <_svfiprintf_r+0x7e>
 8002cae:	465b      	mov	r3, fp
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f7ff ff6b 	bl	8002b90 <__ssputs_r>
 8002cba:	3001      	adds	r0, #1
 8002cbc:	f000 80a7 	beq.w	8002e0e <_svfiprintf_r+0x1c6>
 8002cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cc2:	445a      	add	r2, fp
 8002cc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 809f 	beq.w	8002e0e <_svfiprintf_r+0x1c6>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cda:	f10a 0a01 	add.w	sl, sl, #1
 8002cde:	9304      	str	r3, [sp, #16]
 8002ce0:	9307      	str	r3, [sp, #28]
 8002ce2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ce6:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ce8:	4654      	mov	r4, sl
 8002cea:	2205      	movs	r2, #5
 8002cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf0:	484e      	ldr	r0, [pc, #312]	@ (8002e2c <_svfiprintf_r+0x1e4>)
 8002cf2:	f000 fa4f 	bl	8003194 <memchr>
 8002cf6:	9a04      	ldr	r2, [sp, #16]
 8002cf8:	b9d8      	cbnz	r0, 8002d32 <_svfiprintf_r+0xea>
 8002cfa:	06d0      	lsls	r0, r2, #27
 8002cfc:	bf44      	itt	mi
 8002cfe:	2320      	movmi	r3, #32
 8002d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d04:	0711      	lsls	r1, r2, #28
 8002d06:	bf44      	itt	mi
 8002d08:	232b      	movmi	r3, #43	@ 0x2b
 8002d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d14:	d015      	beq.n	8002d42 <_svfiprintf_r+0xfa>
 8002d16:	4654      	mov	r4, sl
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f04f 0c0a 	mov.w	ip, #10
 8002d1e:	9a07      	ldr	r2, [sp, #28]
 8002d20:	4621      	mov	r1, r4
 8002d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d26:	3b30      	subs	r3, #48	@ 0x30
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	d94b      	bls.n	8002dc4 <_svfiprintf_r+0x17c>
 8002d2c:	b1b0      	cbz	r0, 8002d5c <_svfiprintf_r+0x114>
 8002d2e:	9207      	str	r2, [sp, #28]
 8002d30:	e014      	b.n	8002d5c <_svfiprintf_r+0x114>
 8002d32:	eba0 0308 	sub.w	r3, r0, r8
 8002d36:	fa09 f303 	lsl.w	r3, r9, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	46a2      	mov	sl, r4
 8002d3e:	9304      	str	r3, [sp, #16]
 8002d40:	e7d2      	b.n	8002ce8 <_svfiprintf_r+0xa0>
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	1d19      	adds	r1, r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	9103      	str	r1, [sp, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bfbb      	ittet	lt
 8002d4e:	425b      	neglt	r3, r3
 8002d50:	f042 0202 	orrlt.w	r2, r2, #2
 8002d54:	9307      	strge	r3, [sp, #28]
 8002d56:	9307      	strlt	r3, [sp, #28]
 8002d58:	bfb8      	it	lt
 8002d5a:	9204      	strlt	r2, [sp, #16]
 8002d5c:	7823      	ldrb	r3, [r4, #0]
 8002d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d60:	d10a      	bne.n	8002d78 <_svfiprintf_r+0x130>
 8002d62:	7863      	ldrb	r3, [r4, #1]
 8002d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d66:	d132      	bne.n	8002dce <_svfiprintf_r+0x186>
 8002d68:	9b03      	ldr	r3, [sp, #12]
 8002d6a:	3402      	adds	r4, #2
 8002d6c:	1d1a      	adds	r2, r3, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	9203      	str	r2, [sp, #12]
 8002d72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d76:	9305      	str	r3, [sp, #20]
 8002d78:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002e30 <_svfiprintf_r+0x1e8>
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	4650      	mov	r0, sl
 8002d80:	7821      	ldrb	r1, [r4, #0]
 8002d82:	f000 fa07 	bl	8003194 <memchr>
 8002d86:	b138      	cbz	r0, 8002d98 <_svfiprintf_r+0x150>
 8002d88:	2240      	movs	r2, #64	@ 0x40
 8002d8a:	9b04      	ldr	r3, [sp, #16]
 8002d8c:	eba0 000a 	sub.w	r0, r0, sl
 8002d90:	4082      	lsls	r2, r0
 8002d92:	4313      	orrs	r3, r2
 8002d94:	3401      	adds	r4, #1
 8002d96:	9304      	str	r3, [sp, #16]
 8002d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d9c:	2206      	movs	r2, #6
 8002d9e:	4825      	ldr	r0, [pc, #148]	@ (8002e34 <_svfiprintf_r+0x1ec>)
 8002da0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002da4:	f000 f9f6 	bl	8003194 <memchr>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d036      	beq.n	8002e1a <_svfiprintf_r+0x1d2>
 8002dac:	4b22      	ldr	r3, [pc, #136]	@ (8002e38 <_svfiprintf_r+0x1f0>)
 8002dae:	bb1b      	cbnz	r3, 8002df8 <_svfiprintf_r+0x1b0>
 8002db0:	9b03      	ldr	r3, [sp, #12]
 8002db2:	3307      	adds	r3, #7
 8002db4:	f023 0307 	bic.w	r3, r3, #7
 8002db8:	3308      	adds	r3, #8
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dbe:	4433      	add	r3, r6
 8002dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dc2:	e76a      	b.n	8002c9a <_svfiprintf_r+0x52>
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dcc:	e7a8      	b.n	8002d20 <_svfiprintf_r+0xd8>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f04f 0c0a 	mov.w	ip, #10
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	3401      	adds	r4, #1
 8002dd8:	9305      	str	r3, [sp, #20]
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002de0:	3a30      	subs	r2, #48	@ 0x30
 8002de2:	2a09      	cmp	r2, #9
 8002de4:	d903      	bls.n	8002dee <_svfiprintf_r+0x1a6>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0c6      	beq.n	8002d78 <_svfiprintf_r+0x130>
 8002dea:	9105      	str	r1, [sp, #20]
 8002dec:	e7c4      	b.n	8002d78 <_svfiprintf_r+0x130>
 8002dee:	4604      	mov	r4, r0
 8002df0:	2301      	movs	r3, #1
 8002df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002df6:	e7f0      	b.n	8002dda <_svfiprintf_r+0x192>
 8002df8:	ab03      	add	r3, sp, #12
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	462a      	mov	r2, r5
 8002dfe:	4638      	mov	r0, r7
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <_svfiprintf_r+0x1f4>)
 8002e02:	a904      	add	r1, sp, #16
 8002e04:	f3af 8000 	nop.w
 8002e08:	1c42      	adds	r2, r0, #1
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	d1d6      	bne.n	8002dbc <_svfiprintf_r+0x174>
 8002e0e:	89ab      	ldrh	r3, [r5, #12]
 8002e10:	065b      	lsls	r3, r3, #25
 8002e12:	f53f af2d 	bmi.w	8002c70 <_svfiprintf_r+0x28>
 8002e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e18:	e72c      	b.n	8002c74 <_svfiprintf_r+0x2c>
 8002e1a:	ab03      	add	r3, sp, #12
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	462a      	mov	r2, r5
 8002e20:	4638      	mov	r0, r7
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <_svfiprintf_r+0x1f4>)
 8002e24:	a904      	add	r1, sp, #16
 8002e26:	f000 f87d 	bl	8002f24 <_printf_i>
 8002e2a:	e7ed      	b.n	8002e08 <_svfiprintf_r+0x1c0>
 8002e2c:	08003372 	.word	0x08003372
 8002e30:	08003378 	.word	0x08003378
 8002e34:	0800337c 	.word	0x0800337c
 8002e38:	00000000 	.word	0x00000000
 8002e3c:	08002b91 	.word	0x08002b91

08002e40 <_printf_common>:
 8002e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e44:	4616      	mov	r6, r2
 8002e46:	4698      	mov	r8, r3
 8002e48:	688a      	ldr	r2, [r1, #8]
 8002e4a:	690b      	ldr	r3, [r1, #16]
 8002e4c:	4607      	mov	r7, r0
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	bfb8      	it	lt
 8002e52:	4613      	movlt	r3, r2
 8002e54:	6033      	str	r3, [r6, #0]
 8002e56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e60:	b10a      	cbz	r2, 8002e66 <_printf_common+0x26>
 8002e62:	3301      	adds	r3, #1
 8002e64:	6033      	str	r3, [r6, #0]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	0699      	lsls	r1, r3, #26
 8002e6a:	bf42      	ittt	mi
 8002e6c:	6833      	ldrmi	r3, [r6, #0]
 8002e6e:	3302      	addmi	r3, #2
 8002e70:	6033      	strmi	r3, [r6, #0]
 8002e72:	6825      	ldr	r5, [r4, #0]
 8002e74:	f015 0506 	ands.w	r5, r5, #6
 8002e78:	d106      	bne.n	8002e88 <_printf_common+0x48>
 8002e7a:	f104 0a19 	add.w	sl, r4, #25
 8002e7e:	68e3      	ldr	r3, [r4, #12]
 8002e80:	6832      	ldr	r2, [r6, #0]
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	42ab      	cmp	r3, r5
 8002e86:	dc2b      	bgt.n	8002ee0 <_printf_common+0xa0>
 8002e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	3b00      	subs	r3, #0
 8002e90:	bf18      	it	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	0692      	lsls	r2, r2, #26
 8002e96:	d430      	bmi.n	8002efa <_printf_common+0xba>
 8002e98:	4641      	mov	r1, r8
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ea0:	47c8      	blx	r9
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d023      	beq.n	8002eee <_printf_common+0xae>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	6922      	ldr	r2, [r4, #16]
 8002eaa:	f003 0306 	and.w	r3, r3, #6
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf14      	ite	ne
 8002eb2:	2500      	movne	r5, #0
 8002eb4:	6833      	ldreq	r3, [r6, #0]
 8002eb6:	f04f 0600 	mov.w	r6, #0
 8002eba:	bf08      	it	eq
 8002ebc:	68e5      	ldreq	r5, [r4, #12]
 8002ebe:	f104 041a 	add.w	r4, r4, #26
 8002ec2:	bf08      	it	eq
 8002ec4:	1aed      	subeq	r5, r5, r3
 8002ec6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002eca:	bf08      	it	eq
 8002ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bfc4      	itt	gt
 8002ed4:	1a9b      	subgt	r3, r3, r2
 8002ed6:	18ed      	addgt	r5, r5, r3
 8002ed8:	42b5      	cmp	r5, r6
 8002eda:	d11a      	bne.n	8002f12 <_printf_common+0xd2>
 8002edc:	2000      	movs	r0, #0
 8002ede:	e008      	b.n	8002ef2 <_printf_common+0xb2>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	4652      	mov	r2, sl
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	47c8      	blx	r9
 8002eea:	3001      	adds	r0, #1
 8002eec:	d103      	bne.n	8002ef6 <_printf_common+0xb6>
 8002eee:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef6:	3501      	adds	r5, #1
 8002ef8:	e7c1      	b.n	8002e7e <_printf_common+0x3e>
 8002efa:	2030      	movs	r0, #48	@ 0x30
 8002efc:	18e1      	adds	r1, r4, r3
 8002efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f08:	4422      	add	r2, r4
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f10:	e7c2      	b.n	8002e98 <_printf_common+0x58>
 8002f12:	2301      	movs	r3, #1
 8002f14:	4622      	mov	r2, r4
 8002f16:	4641      	mov	r1, r8
 8002f18:	4638      	mov	r0, r7
 8002f1a:	47c8      	blx	r9
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d0e6      	beq.n	8002eee <_printf_common+0xae>
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7d9      	b.n	8002ed8 <_printf_common+0x98>

08002f24 <_printf_i>:
 8002f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	7e0f      	ldrb	r7, [r1, #24]
 8002f2a:	4691      	mov	r9, r2
 8002f2c:	2f78      	cmp	r7, #120	@ 0x78
 8002f2e:	4680      	mov	r8, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	469a      	mov	sl, r3
 8002f34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f3a:	d807      	bhi.n	8002f4c <_printf_i+0x28>
 8002f3c:	2f62      	cmp	r7, #98	@ 0x62
 8002f3e:	d80a      	bhi.n	8002f56 <_printf_i+0x32>
 8002f40:	2f00      	cmp	r7, #0
 8002f42:	f000 80d1 	beq.w	80030e8 <_printf_i+0x1c4>
 8002f46:	2f58      	cmp	r7, #88	@ 0x58
 8002f48:	f000 80b8 	beq.w	80030bc <_printf_i+0x198>
 8002f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f54:	e03a      	b.n	8002fcc <_printf_i+0xa8>
 8002f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f5a:	2b15      	cmp	r3, #21
 8002f5c:	d8f6      	bhi.n	8002f4c <_printf_i+0x28>
 8002f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8002f64 <_printf_i+0x40>)
 8002f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f64:	08002fbd 	.word	0x08002fbd
 8002f68:	08002fd1 	.word	0x08002fd1
 8002f6c:	08002f4d 	.word	0x08002f4d
 8002f70:	08002f4d 	.word	0x08002f4d
 8002f74:	08002f4d 	.word	0x08002f4d
 8002f78:	08002f4d 	.word	0x08002f4d
 8002f7c:	08002fd1 	.word	0x08002fd1
 8002f80:	08002f4d 	.word	0x08002f4d
 8002f84:	08002f4d 	.word	0x08002f4d
 8002f88:	08002f4d 	.word	0x08002f4d
 8002f8c:	08002f4d 	.word	0x08002f4d
 8002f90:	080030cf 	.word	0x080030cf
 8002f94:	08002ffb 	.word	0x08002ffb
 8002f98:	08003089 	.word	0x08003089
 8002f9c:	08002f4d 	.word	0x08002f4d
 8002fa0:	08002f4d 	.word	0x08002f4d
 8002fa4:	080030f1 	.word	0x080030f1
 8002fa8:	08002f4d 	.word	0x08002f4d
 8002fac:	08002ffb 	.word	0x08002ffb
 8002fb0:	08002f4d 	.word	0x08002f4d
 8002fb4:	08002f4d 	.word	0x08002f4d
 8002fb8:	08003091 	.word	0x08003091
 8002fbc:	6833      	ldr	r3, [r6, #0]
 8002fbe:	1d1a      	adds	r2, r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6032      	str	r2, [r6, #0]
 8002fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e09c      	b.n	800310a <_printf_i+0x1e6>
 8002fd0:	6833      	ldr	r3, [r6, #0]
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	1d19      	adds	r1, r3, #4
 8002fd6:	6031      	str	r1, [r6, #0]
 8002fd8:	0606      	lsls	r6, r0, #24
 8002fda:	d501      	bpl.n	8002fe0 <_printf_i+0xbc>
 8002fdc:	681d      	ldr	r5, [r3, #0]
 8002fde:	e003      	b.n	8002fe8 <_printf_i+0xc4>
 8002fe0:	0645      	lsls	r5, r0, #25
 8002fe2:	d5fb      	bpl.n	8002fdc <_printf_i+0xb8>
 8002fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002fe8:	2d00      	cmp	r5, #0
 8002fea:	da03      	bge.n	8002ff4 <_printf_i+0xd0>
 8002fec:	232d      	movs	r3, #45	@ 0x2d
 8002fee:	426d      	negs	r5, r5
 8002ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ff4:	230a      	movs	r3, #10
 8002ff6:	4858      	ldr	r0, [pc, #352]	@ (8003158 <_printf_i+0x234>)
 8002ff8:	e011      	b.n	800301e <_printf_i+0xfa>
 8002ffa:	6821      	ldr	r1, [r4, #0]
 8002ffc:	6833      	ldr	r3, [r6, #0]
 8002ffe:	0608      	lsls	r0, r1, #24
 8003000:	f853 5b04 	ldr.w	r5, [r3], #4
 8003004:	d402      	bmi.n	800300c <_printf_i+0xe8>
 8003006:	0649      	lsls	r1, r1, #25
 8003008:	bf48      	it	mi
 800300a:	b2ad      	uxthmi	r5, r5
 800300c:	2f6f      	cmp	r7, #111	@ 0x6f
 800300e:	6033      	str	r3, [r6, #0]
 8003010:	bf14      	ite	ne
 8003012:	230a      	movne	r3, #10
 8003014:	2308      	moveq	r3, #8
 8003016:	4850      	ldr	r0, [pc, #320]	@ (8003158 <_printf_i+0x234>)
 8003018:	2100      	movs	r1, #0
 800301a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800301e:	6866      	ldr	r6, [r4, #4]
 8003020:	2e00      	cmp	r6, #0
 8003022:	60a6      	str	r6, [r4, #8]
 8003024:	db05      	blt.n	8003032 <_printf_i+0x10e>
 8003026:	6821      	ldr	r1, [r4, #0]
 8003028:	432e      	orrs	r6, r5
 800302a:	f021 0104 	bic.w	r1, r1, #4
 800302e:	6021      	str	r1, [r4, #0]
 8003030:	d04b      	beq.n	80030ca <_printf_i+0x1a6>
 8003032:	4616      	mov	r6, r2
 8003034:	fbb5 f1f3 	udiv	r1, r5, r3
 8003038:	fb03 5711 	mls	r7, r3, r1, r5
 800303c:	5dc7      	ldrb	r7, [r0, r7]
 800303e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003042:	462f      	mov	r7, r5
 8003044:	42bb      	cmp	r3, r7
 8003046:	460d      	mov	r5, r1
 8003048:	d9f4      	bls.n	8003034 <_printf_i+0x110>
 800304a:	2b08      	cmp	r3, #8
 800304c:	d10b      	bne.n	8003066 <_printf_i+0x142>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	07df      	lsls	r7, r3, #31
 8003052:	d508      	bpl.n	8003066 <_printf_i+0x142>
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	6861      	ldr	r1, [r4, #4]
 8003058:	4299      	cmp	r1, r3
 800305a:	bfde      	ittt	le
 800305c:	2330      	movle	r3, #48	@ 0x30
 800305e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003062:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003066:	1b92      	subs	r2, r2, r6
 8003068:	6122      	str	r2, [r4, #16]
 800306a:	464b      	mov	r3, r9
 800306c:	4621      	mov	r1, r4
 800306e:	4640      	mov	r0, r8
 8003070:	f8cd a000 	str.w	sl, [sp]
 8003074:	aa03      	add	r2, sp, #12
 8003076:	f7ff fee3 	bl	8002e40 <_printf_common>
 800307a:	3001      	adds	r0, #1
 800307c:	d14a      	bne.n	8003114 <_printf_i+0x1f0>
 800307e:	f04f 30ff 	mov.w	r0, #4294967295
 8003082:	b004      	add	sp, #16
 8003084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	f043 0320 	orr.w	r3, r3, #32
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	2778      	movs	r7, #120	@ 0x78
 8003092:	4832      	ldr	r0, [pc, #200]	@ (800315c <_printf_i+0x238>)
 8003094:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	6831      	ldr	r1, [r6, #0]
 800309c:	061f      	lsls	r7, r3, #24
 800309e:	f851 5b04 	ldr.w	r5, [r1], #4
 80030a2:	d402      	bmi.n	80030aa <_printf_i+0x186>
 80030a4:	065f      	lsls	r7, r3, #25
 80030a6:	bf48      	it	mi
 80030a8:	b2ad      	uxthmi	r5, r5
 80030aa:	6031      	str	r1, [r6, #0]
 80030ac:	07d9      	lsls	r1, r3, #31
 80030ae:	bf44      	itt	mi
 80030b0:	f043 0320 	orrmi.w	r3, r3, #32
 80030b4:	6023      	strmi	r3, [r4, #0]
 80030b6:	b11d      	cbz	r5, 80030c0 <_printf_i+0x19c>
 80030b8:	2310      	movs	r3, #16
 80030ba:	e7ad      	b.n	8003018 <_printf_i+0xf4>
 80030bc:	4826      	ldr	r0, [pc, #152]	@ (8003158 <_printf_i+0x234>)
 80030be:	e7e9      	b.n	8003094 <_printf_i+0x170>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	f023 0320 	bic.w	r3, r3, #32
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	e7f6      	b.n	80030b8 <_printf_i+0x194>
 80030ca:	4616      	mov	r6, r2
 80030cc:	e7bd      	b.n	800304a <_printf_i+0x126>
 80030ce:	6833      	ldr	r3, [r6, #0]
 80030d0:	6825      	ldr	r5, [r4, #0]
 80030d2:	1d18      	adds	r0, r3, #4
 80030d4:	6961      	ldr	r1, [r4, #20]
 80030d6:	6030      	str	r0, [r6, #0]
 80030d8:	062e      	lsls	r6, r5, #24
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	d501      	bpl.n	80030e2 <_printf_i+0x1be>
 80030de:	6019      	str	r1, [r3, #0]
 80030e0:	e002      	b.n	80030e8 <_printf_i+0x1c4>
 80030e2:	0668      	lsls	r0, r5, #25
 80030e4:	d5fb      	bpl.n	80030de <_printf_i+0x1ba>
 80030e6:	8019      	strh	r1, [r3, #0]
 80030e8:	2300      	movs	r3, #0
 80030ea:	4616      	mov	r6, r2
 80030ec:	6123      	str	r3, [r4, #16]
 80030ee:	e7bc      	b.n	800306a <_printf_i+0x146>
 80030f0:	6833      	ldr	r3, [r6, #0]
 80030f2:	2100      	movs	r1, #0
 80030f4:	1d1a      	adds	r2, r3, #4
 80030f6:	6032      	str	r2, [r6, #0]
 80030f8:	681e      	ldr	r6, [r3, #0]
 80030fa:	6862      	ldr	r2, [r4, #4]
 80030fc:	4630      	mov	r0, r6
 80030fe:	f000 f849 	bl	8003194 <memchr>
 8003102:	b108      	cbz	r0, 8003108 <_printf_i+0x1e4>
 8003104:	1b80      	subs	r0, r0, r6
 8003106:	6060      	str	r0, [r4, #4]
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	6123      	str	r3, [r4, #16]
 800310c:	2300      	movs	r3, #0
 800310e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003112:	e7aa      	b.n	800306a <_printf_i+0x146>
 8003114:	4632      	mov	r2, r6
 8003116:	4649      	mov	r1, r9
 8003118:	4640      	mov	r0, r8
 800311a:	6923      	ldr	r3, [r4, #16]
 800311c:	47d0      	blx	sl
 800311e:	3001      	adds	r0, #1
 8003120:	d0ad      	beq.n	800307e <_printf_i+0x15a>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	079b      	lsls	r3, r3, #30
 8003126:	d413      	bmi.n	8003150 <_printf_i+0x22c>
 8003128:	68e0      	ldr	r0, [r4, #12]
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	4298      	cmp	r0, r3
 800312e:	bfb8      	it	lt
 8003130:	4618      	movlt	r0, r3
 8003132:	e7a6      	b.n	8003082 <_printf_i+0x15e>
 8003134:	2301      	movs	r3, #1
 8003136:	4632      	mov	r2, r6
 8003138:	4649      	mov	r1, r9
 800313a:	4640      	mov	r0, r8
 800313c:	47d0      	blx	sl
 800313e:	3001      	adds	r0, #1
 8003140:	d09d      	beq.n	800307e <_printf_i+0x15a>
 8003142:	3501      	adds	r5, #1
 8003144:	68e3      	ldr	r3, [r4, #12]
 8003146:	9903      	ldr	r1, [sp, #12]
 8003148:	1a5b      	subs	r3, r3, r1
 800314a:	42ab      	cmp	r3, r5
 800314c:	dcf2      	bgt.n	8003134 <_printf_i+0x210>
 800314e:	e7eb      	b.n	8003128 <_printf_i+0x204>
 8003150:	2500      	movs	r5, #0
 8003152:	f104 0619 	add.w	r6, r4, #25
 8003156:	e7f5      	b.n	8003144 <_printf_i+0x220>
 8003158:	08003383 	.word	0x08003383
 800315c:	08003394 	.word	0x08003394

08003160 <memmove>:
 8003160:	4288      	cmp	r0, r1
 8003162:	b510      	push	{r4, lr}
 8003164:	eb01 0402 	add.w	r4, r1, r2
 8003168:	d902      	bls.n	8003170 <memmove+0x10>
 800316a:	4284      	cmp	r4, r0
 800316c:	4623      	mov	r3, r4
 800316e:	d807      	bhi.n	8003180 <memmove+0x20>
 8003170:	1e43      	subs	r3, r0, #1
 8003172:	42a1      	cmp	r1, r4
 8003174:	d008      	beq.n	8003188 <memmove+0x28>
 8003176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800317a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800317e:	e7f8      	b.n	8003172 <memmove+0x12>
 8003180:	4601      	mov	r1, r0
 8003182:	4402      	add	r2, r0
 8003184:	428a      	cmp	r2, r1
 8003186:	d100      	bne.n	800318a <memmove+0x2a>
 8003188:	bd10      	pop	{r4, pc}
 800318a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800318e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003192:	e7f7      	b.n	8003184 <memmove+0x24>

08003194 <memchr>:
 8003194:	4603      	mov	r3, r0
 8003196:	b510      	push	{r4, lr}
 8003198:	b2c9      	uxtb	r1, r1
 800319a:	4402      	add	r2, r0
 800319c:	4293      	cmp	r3, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	d101      	bne.n	80031a6 <memchr+0x12>
 80031a2:	2000      	movs	r0, #0
 80031a4:	e003      	b.n	80031ae <memchr+0x1a>
 80031a6:	7804      	ldrb	r4, [r0, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	428c      	cmp	r4, r1
 80031ac:	d1f6      	bne.n	800319c <memchr+0x8>
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <memcpy>:
 80031b0:	440a      	add	r2, r1
 80031b2:	4291      	cmp	r1, r2
 80031b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80031b8:	d100      	bne.n	80031bc <memcpy+0xc>
 80031ba:	4770      	bx	lr
 80031bc:	b510      	push	{r4, lr}
 80031be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031c2:	4291      	cmp	r1, r2
 80031c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031c8:	d1f9      	bne.n	80031be <memcpy+0xe>
 80031ca:	bd10      	pop	{r4, pc}

080031cc <_realloc_r>:
 80031cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d0:	4607      	mov	r7, r0
 80031d2:	4614      	mov	r4, r2
 80031d4:	460d      	mov	r5, r1
 80031d6:	b921      	cbnz	r1, 80031e2 <_realloc_r+0x16>
 80031d8:	4611      	mov	r1, r2
 80031da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031de:	f7ff bb9d 	b.w	800291c <_malloc_r>
 80031e2:	b92a      	cbnz	r2, 80031f0 <_realloc_r+0x24>
 80031e4:	f7ff fc8c 	bl	8002b00 <_free_r>
 80031e8:	4625      	mov	r5, r4
 80031ea:	4628      	mov	r0, r5
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f0:	f000 f81a 	bl	8003228 <_malloc_usable_size_r>
 80031f4:	4284      	cmp	r4, r0
 80031f6:	4606      	mov	r6, r0
 80031f8:	d802      	bhi.n	8003200 <_realloc_r+0x34>
 80031fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031fe:	d8f4      	bhi.n	80031ea <_realloc_r+0x1e>
 8003200:	4621      	mov	r1, r4
 8003202:	4638      	mov	r0, r7
 8003204:	f7ff fb8a 	bl	800291c <_malloc_r>
 8003208:	4680      	mov	r8, r0
 800320a:	b908      	cbnz	r0, 8003210 <_realloc_r+0x44>
 800320c:	4645      	mov	r5, r8
 800320e:	e7ec      	b.n	80031ea <_realloc_r+0x1e>
 8003210:	42b4      	cmp	r4, r6
 8003212:	4622      	mov	r2, r4
 8003214:	4629      	mov	r1, r5
 8003216:	bf28      	it	cs
 8003218:	4632      	movcs	r2, r6
 800321a:	f7ff ffc9 	bl	80031b0 <memcpy>
 800321e:	4629      	mov	r1, r5
 8003220:	4638      	mov	r0, r7
 8003222:	f7ff fc6d 	bl	8002b00 <_free_r>
 8003226:	e7f1      	b.n	800320c <_realloc_r+0x40>

08003228 <_malloc_usable_size_r>:
 8003228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800322c:	1f18      	subs	r0, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	bfbc      	itt	lt
 8003232:	580b      	ldrlt	r3, [r1, r0]
 8003234:	18c0      	addlt	r0, r0, r3
 8003236:	4770      	bx	lr

08003238 <_init>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr

08003244 <_fini>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr
