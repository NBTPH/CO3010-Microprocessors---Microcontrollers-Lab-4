
Lab4SCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003154  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003260  08003260  00004260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033b8  080033b8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080033b8  080033b8  000043b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033c0  080033c0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c0  080033c0  000043c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033c4  080033c4  000043c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080033c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  2000005c  08003424  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  08003424  00005668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdb7  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da4  00000000  00000000  00010e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00012be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000977  00000000  00000000  00013800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db8  00000000  00000000  00014177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd2d  00000000  00000000  0002bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088411  00000000  00000000  00039c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c206d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  000c20b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c5818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003248 	.word	0x08003248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003248 	.word	0x08003248

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fe83 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f863 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f913 	bl	8000394 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f89b 	bl	80002a8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8e5 	bl	8000340 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8000176:	f000 fa25 	bl	80005c4 <SCH_Init>
  SCH_Add_Task(toggle_led_1, 5, 50);
 800017a:	2232      	movs	r2, #50	@ 0x32
 800017c:	2105      	movs	r1, #5
 800017e:	4821      	ldr	r0, [pc, #132]	@ (8000204 <main+0xa8>)
 8000180:	f000 fa9a 	bl	80006b8 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_2, 5, 100);
 8000184:	2264      	movs	r2, #100	@ 0x64
 8000186:	2105      	movs	r1, #5
 8000188:	481f      	ldr	r0, [pc, #124]	@ (8000208 <main+0xac>)
 800018a:	f000 fa95 	bl	80006b8 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_3, 5, 150);
 800018e:	2296      	movs	r2, #150	@ 0x96
 8000190:	2105      	movs	r1, #5
 8000192:	481e      	ldr	r0, [pc, #120]	@ (800020c <main+0xb0>)
 8000194:	f000 fa90 	bl	80006b8 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_4, 5, 200);
 8000198:	22c8      	movs	r2, #200	@ 0xc8
 800019a:	2105      	movs	r1, #5
 800019c:	481c      	ldr	r0, [pc, #112]	@ (8000210 <main+0xb4>)
 800019e:	f000 fa8b 	bl	80006b8 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_5, 5, 250);
 80001a2:	22fa      	movs	r2, #250	@ 0xfa
 80001a4:	2105      	movs	r1, #5
 80001a6:	481b      	ldr	r0, [pc, #108]	@ (8000214 <main+0xb8>)
 80001a8:	f000 fa86 	bl	80006b8 <SCH_Add_Task>
  SCH_Add_Task(toggle_led_6, 200, 0);
 80001ac:	2200      	movs	r2, #0
 80001ae:	21c8      	movs	r1, #200	@ 0xc8
 80001b0:	4819      	ldr	r0, [pc, #100]	@ (8000218 <main+0xbc>)
 80001b2:	f000 fa81 	bl	80006b8 <SCH_Add_Task>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 80001b6:	2201      	movs	r2, #1
 80001b8:	217e      	movs	r1, #126	@ 0x7e
 80001ba:	4818      	ldr	r0, [pc, #96]	@ (800021c <main+0xc0>)
 80001bc:	f001 f942 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 80001c0:	4817      	ldr	r0, [pc, #92]	@ (8000220 <main+0xc4>)
 80001c2:	f001 fdd1 	bl	8001d68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  uint32_t delay = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80001ca:	f000 fbab 	bl	8000924 <SCH_Dispatch_Tasks>
	  if(delay >= 10000){
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d910      	bls.n	80001fa <main+0x9e>
		  sprintf(c, "Current tick: %6ld\r\n\n", ticks);
 80001d8:	4b12      	ldr	r3, [pc, #72]	@ (8000224 <main+0xc8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	461a      	mov	r2, r3
 80001de:	4912      	ldr	r1, [pc, #72]	@ (8000228 <main+0xcc>)
 80001e0:	4812      	ldr	r0, [pc, #72]	@ (800022c <main+0xd0>)
 80001e2:	f002 fc2f 	bl	8002a44 <siprintf>
		  UART_Print(c, strlen(c));
 80001e6:	4811      	ldr	r0, [pc, #68]	@ (800022c <main+0xd0>)
 80001e8:	f7ff ffb0 	bl	800014c <strlen>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	480e      	ldr	r0, [pc, #56]	@ (800022c <main+0xd0>)
 80001f2:	f000 f9cd 	bl	8000590 <UART_Print>
		  delay = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]
	  }
	  delay++;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	3301      	adds	r3, #1
 80001fe:	607b      	str	r3, [r7, #4]
	  SCH_Dispatch_Tasks();
 8000200:	e7e3      	b.n	80001ca <main+0x6e>
 8000202:	bf00      	nop
 8000204:	08000411 	.word	0x08000411
 8000208:	08000451 	.word	0x08000451
 800020c:	08000491 	.word	0x08000491
 8000210:	080004d1 	.word	0x080004d1
 8000214:	08000511 	.word	0x08000511
 8000218:	08000551 	.word	0x08000551
 800021c:	40010800 	.word	0x40010800
 8000220:	20000078 	.word	0x20000078
 8000224:	20000108 	.word	0x20000108
 8000228:	08003260 	.word	0x08003260
 800022c:	2000010c 	.word	0x2000010c

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	@ 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	@ 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fc22 	bl	8002a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f91e 	bl	80014a8 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000272:	f000 f9a1 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fb8c 	bl	80019ac <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f98d 	bl	80005b8 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	@ 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c4:	4b1d      	ldr	r3, [pc, #116]	@ (800033c <MX_TIM2_Init+0x94>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	@ (800033c <MX_TIM2_Init+0x94>)
 80002ce:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <MX_TIM2_Init+0x94>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002da:	4b18      	ldr	r3, [pc, #96]	@ (800033c <MX_TIM2_Init+0x94>)
 80002dc:	2209      	movs	r2, #9
 80002de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e0:	4b16      	ldr	r3, [pc, #88]	@ (800033c <MX_TIM2_Init+0x94>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e6:	4b15      	ldr	r3, [pc, #84]	@ (800033c <MX_TIM2_Init+0x94>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ec:	4813      	ldr	r0, [pc, #76]	@ (800033c <MX_TIM2_Init+0x94>)
 80002ee:	f001 fceb 	bl	8001cc8 <HAL_TIM_Base_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002f8:	f000 f95e 	bl	80005b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	4619      	mov	r1, r3
 8000308:	480c      	ldr	r0, [pc, #48]	@ (800033c <MX_TIM2_Init+0x94>)
 800030a:	f001 fe69 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000314:	f000 f950 	bl	80005b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000318:	2300      	movs	r3, #0
 800031a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031c:	2300      	movs	r3, #0
 800031e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000320:	463b      	mov	r3, r7
 8000322:	4619      	mov	r1, r3
 8000324:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_TIM2_Init+0x94>)
 8000326:	f002 f841 	bl	80023ac <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000330:	f000 f942 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000334:	bf00      	nop
 8000336:	3718      	adds	r7, #24
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000078 	.word	0x20000078

08000340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000344:	4b11      	ldr	r3, [pc, #68]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 8000346:	4a12      	ldr	r2, [pc, #72]	@ (8000390 <MX_USART1_UART_Init+0x50>)
 8000348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800034a:	4b10      	ldr	r3, [pc, #64]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 800034c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b08      	ldr	r3, [pc, #32]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <MX_USART1_UART_Init+0x4c>)
 8000378:	f002 f882 	bl	8002480 <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000382:	f000 f919 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000c0 	.word	0x200000c0
 8000390:	40013800 	.word	0x40013800

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <MX_GPIO_Init+0x74>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a16      	ldr	r2, [pc, #88]	@ (8000408 <MX_GPIO_Init+0x74>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <MX_GPIO_Init+0x74>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <MX_GPIO_Init+0x74>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a10      	ldr	r2, [pc, #64]	@ (8000408 <MX_GPIO_Init+0x74>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <MX_GPIO_Init+0x74>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003d8:	2200      	movs	r2, #0
 80003da:	217e      	movs	r1, #126	@ 0x7e
 80003dc:	480b      	ldr	r0, [pc, #44]	@ (800040c <MX_GPIO_Init+0x78>)
 80003de:	f001 f831 	bl	8001444 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003e2:	237e      	movs	r3, #126	@ 0x7e
 80003e4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2302      	movs	r3, #2
 80003f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	4804      	ldr	r0, [pc, #16]	@ (800040c <MX_GPIO_Init+0x78>)
 80003fa:	f000 fea7 	bl	800114c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40010800 	.word	0x40010800

08000410 <toggle_led_1>:

/* USER CODE BEGIN 4 */
void toggle_led_1(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000414:	2102      	movs	r1, #2
 8000416:	480a      	ldr	r0, [pc, #40]	@ (8000440 <toggle_led_1+0x30>)
 8000418:	f001 f82c 	bl	8001474 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 1 RED CALLED AT %6ld TICK \r\n", ticks);
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <toggle_led_1+0x34>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	4909      	ldr	r1, [pc, #36]	@ (8000448 <toggle_led_1+0x38>)
 8000424:	4809      	ldr	r0, [pc, #36]	@ (800044c <toggle_led_1+0x3c>)
 8000426:	f002 fb0d 	bl	8002a44 <siprintf>
	UART_Print(c, strlen(c));
 800042a:	4808      	ldr	r0, [pc, #32]	@ (800044c <toggle_led_1+0x3c>)
 800042c:	f7ff fe8e 	bl	800014c <strlen>
 8000430:	4603      	mov	r3, r0
 8000432:	4619      	mov	r1, r3
 8000434:	4805      	ldr	r0, [pc, #20]	@ (800044c <toggle_led_1+0x3c>)
 8000436:	f000 f8ab 	bl	8000590 <UART_Print>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010800 	.word	0x40010800
 8000444:	20000108 	.word	0x20000108
 8000448:	08003278 	.word	0x08003278
 800044c:	2000010c 	.word	0x2000010c

08000450 <toggle_led_2>:
void toggle_led_2(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000454:	2104      	movs	r1, #4
 8000456:	480a      	ldr	r0, [pc, #40]	@ (8000480 <toggle_led_2+0x30>)
 8000458:	f001 f80c 	bl	8001474 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 2 YELLOW CALLED AT %6ld TICK \r\n", ticks);
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <toggle_led_2+0x34>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	461a      	mov	r2, r3
 8000462:	4909      	ldr	r1, [pc, #36]	@ (8000488 <toggle_led_2+0x38>)
 8000464:	4809      	ldr	r0, [pc, #36]	@ (800048c <toggle_led_2+0x3c>)
 8000466:	f002 faed 	bl	8002a44 <siprintf>
	UART_Print(c, strlen(c));
 800046a:	4808      	ldr	r0, [pc, #32]	@ (800048c <toggle_led_2+0x3c>)
 800046c:	f7ff fe6e 	bl	800014c <strlen>
 8000470:	4603      	mov	r3, r0
 8000472:	4619      	mov	r1, r3
 8000474:	4805      	ldr	r0, [pc, #20]	@ (800048c <toggle_led_2+0x3c>)
 8000476:	f000 f88b 	bl	8000590 <UART_Print>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010800 	.word	0x40010800
 8000484:	20000108 	.word	0x20000108
 8000488:	0800329c 	.word	0x0800329c
 800048c:	2000010c 	.word	0x2000010c

08000490 <toggle_led_3>:
void toggle_led_3(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000494:	2108      	movs	r1, #8
 8000496:	480a      	ldr	r0, [pc, #40]	@ (80004c0 <toggle_led_3+0x30>)
 8000498:	f000 ffec 	bl	8001474 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 3 GREEN CALLED AT %6ld TICK \r\n", ticks);
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <toggle_led_3+0x34>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	461a      	mov	r2, r3
 80004a2:	4909      	ldr	r1, [pc, #36]	@ (80004c8 <toggle_led_3+0x38>)
 80004a4:	4809      	ldr	r0, [pc, #36]	@ (80004cc <toggle_led_3+0x3c>)
 80004a6:	f002 facd 	bl	8002a44 <siprintf>
	UART_Print(c, strlen(c));
 80004aa:	4808      	ldr	r0, [pc, #32]	@ (80004cc <toggle_led_3+0x3c>)
 80004ac:	f7ff fe4e 	bl	800014c <strlen>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4619      	mov	r1, r3
 80004b4:	4805      	ldr	r0, [pc, #20]	@ (80004cc <toggle_led_3+0x3c>)
 80004b6:	f000 f86b 	bl	8000590 <UART_Print>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010800 	.word	0x40010800
 80004c4:	20000108 	.word	0x20000108
 80004c8:	080032c4 	.word	0x080032c4
 80004cc:	2000010c 	.word	0x2000010c

080004d0 <toggle_led_4>:
void toggle_led_4(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80004d4:	2110      	movs	r1, #16
 80004d6:	480a      	ldr	r0, [pc, #40]	@ (8000500 <toggle_led_4+0x30>)
 80004d8:	f000 ffcc 	bl	8001474 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 4 WHITE CALLED AT %6ld TICK \r\n", ticks);
 80004dc:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <toggle_led_4+0x34>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4909      	ldr	r1, [pc, #36]	@ (8000508 <toggle_led_4+0x38>)
 80004e4:	4809      	ldr	r0, [pc, #36]	@ (800050c <toggle_led_4+0x3c>)
 80004e6:	f002 faad 	bl	8002a44 <siprintf>
	UART_Print(c, strlen(c));
 80004ea:	4808      	ldr	r0, [pc, #32]	@ (800050c <toggle_led_4+0x3c>)
 80004ec:	f7ff fe2e 	bl	800014c <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <toggle_led_4+0x3c>)
 80004f6:	f000 f84b 	bl	8000590 <UART_Print>
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40010800 	.word	0x40010800
 8000504:	20000108 	.word	0x20000108
 8000508:	080032e8 	.word	0x080032e8
 800050c:	2000010c 	.word	0x2000010c

08000510 <toggle_led_5>:
void toggle_led_5(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000514:	2120      	movs	r1, #32
 8000516:	480a      	ldr	r0, [pc, #40]	@ (8000540 <toggle_led_5+0x30>)
 8000518:	f000 ffac 	bl	8001474 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 5 BLUE CALLED AT %6ld TICK \r\n", ticks);
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <toggle_led_5+0x34>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4909      	ldr	r1, [pc, #36]	@ (8000548 <toggle_led_5+0x38>)
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <toggle_led_5+0x3c>)
 8000526:	f002 fa8d 	bl	8002a44 <siprintf>
	UART_Print(c, strlen(c));
 800052a:	4808      	ldr	r0, [pc, #32]	@ (800054c <toggle_led_5+0x3c>)
 800052c:	f7ff fe0e 	bl	800014c <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	4619      	mov	r1, r3
 8000534:	4805      	ldr	r0, [pc, #20]	@ (800054c <toggle_led_5+0x3c>)
 8000536:	f000 f82b 	bl	8000590 <UART_Print>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010800 	.word	0x40010800
 8000544:	20000108 	.word	0x20000108
 8000548:	0800330c 	.word	0x0800330c
 800054c:	2000010c 	.word	0x2000010c

08000550 <toggle_led_6>:
void toggle_led_6(void){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	480a      	ldr	r0, [pc, #40]	@ (8000580 <toggle_led_6+0x30>)
 8000558:	f000 ff8c 	bl	8001474 <HAL_GPIO_TogglePin>
	sprintf(c, "TASK 6 ORANGE CALLED AT %6ld TICK \r\n", ticks);
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <toggle_led_6+0x34>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4909      	ldr	r1, [pc, #36]	@ (8000588 <toggle_led_6+0x38>)
 8000564:	4809      	ldr	r0, [pc, #36]	@ (800058c <toggle_led_6+0x3c>)
 8000566:	f002 fa6d 	bl	8002a44 <siprintf>
	UART_Print(c, strlen(c));
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <toggle_led_6+0x3c>)
 800056c:	f7ff fdee 	bl	800014c <strlen>
 8000570:	4603      	mov	r3, r0
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <toggle_led_6+0x3c>)
 8000576:	f000 f80b 	bl	8000590 <UART_Print>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010800 	.word	0x40010800
 8000584:	20000108 	.word	0x20000108
 8000588:	08003330 	.word	0x08003330
 800058c:	2000010c 	.word	0x2000010c

08000590 <UART_Print>:

void UART_Print(char *c, size_t length){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)c, length, HAL_MAX_DELAY);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <UART_Print+0x24>)
 80005a6:	f001 ffbb 	bl	8002520 <HAL_UART_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000c0 	.word	0x200000c0

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <Error_Handler+0x8>

080005c4 <SCH_Init>:
uint32_t queue_tasks_num = 0;
ERROR_REPORT Error_code_G;
ERROR_REPORT Last_error_code_G;
uint16_t Error_tick_count_G = 0;

void SCH_Init(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	if(!(queue_head == NULL && queue_tasks_num == 0)){ //if queue not empty, delete the queue
 80005ca:	4b37      	ldr	r3, [pc, #220]	@ (80006a8 <SCH_Init+0xe4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d103      	bne.n	80005da <SCH_Init+0x16>
 80005d2:	4b36      	ldr	r3, [pc, #216]	@ (80006ac <SCH_Init+0xe8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d014      	beq.n	8000604 <SCH_Init+0x40>
		sTask* temp = NULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
		while(queue_head){
 80005de:	e00a      	b.n	80005f6 <SCH_Init+0x32>
			temp = queue_head;
 80005e0:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <SCH_Init+0xe4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	603b      	str	r3, [r7, #0]
			queue_head = queue_head->next;
 80005e6:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <SCH_Init+0xe4>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a2e      	ldr	r2, [pc, #184]	@ (80006a8 <SCH_Init+0xe4>)
 80005ee:	6013      	str	r3, [r2, #0]
			free(temp);
 80005f0:	6838      	ldr	r0, [r7, #0]
 80005f2:	f002 f971 	bl	80028d8 <free>
		while(queue_head){
 80005f6:	4b2c      	ldr	r3, [pc, #176]	@ (80006a8 <SCH_Init+0xe4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f0      	bne.n	80005e0 <SCH_Init+0x1c>
		}
		queue_tasks_num = 0;
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <SCH_Init+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	}

	for(uint32_t i = 0; i < SCH_MAX_TASK; i++){ //initialize tasks array
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	e044      	b.n	8000694 <SCH_Init+0xd0>
		SCH_tasks_G[i].pTask = NULL;
 800060a:	4929      	ldr	r1, [pc, #164]	@ (80006b0 <SCH_Init+0xec>)
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	440b      	add	r3, r1
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].delay = SCH_tasks_G[i].period = SCH_tasks_G[i].RunMe = SCH_tasks_G[i].TaskID = 0;
 800061c:	4924      	ldr	r1, [pc, #144]	@ (80006b0 <SCH_Init+0xec>)
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4613      	mov	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	440b      	add	r3, r1
 800062a:	3310      	adds	r3, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	491f      	ldr	r1, [pc, #124]	@ (80006b0 <SCH_Init+0xec>)
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	440b      	add	r3, r1
 800063e:	330c      	adds	r3, #12
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	491a      	ldr	r1, [pc, #104]	@ (80006b0 <SCH_Init+0xec>)
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4613      	mov	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4413      	add	r3, r2
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	440b      	add	r3, r1
 8000652:	330c      	adds	r3, #12
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	4915      	ldr	r1, [pc, #84]	@ (80006b0 <SCH_Init+0xec>)
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	440b      	add	r3, r1
 8000666:	3308      	adds	r3, #8
 8000668:	6018      	str	r0, [r3, #0]
 800066a:	4911      	ldr	r1, [pc, #68]	@ (80006b0 <SCH_Init+0xec>)
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	440b      	add	r3, r1
 8000678:	3308      	adds	r3, #8
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <SCH_Init+0xec>)
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	4403      	add	r3, r0
 800068a:	3304      	adds	r3, #4
 800068c:	6019      	str	r1, [r3, #0]
	for(uint32_t i = 0; i < SCH_MAX_TASK; i++){ //initialize tasks array
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3301      	adds	r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b27      	cmp	r3, #39	@ 0x27
 8000698:	d9b7      	bls.n	800060a <SCH_Init+0x46>
	}

	Error_code_G = 0;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <SCH_Init+0xf0>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000050c 	.word	0x2000050c
 80006ac:	20000510 	.word	0x20000510
 80006b0:	2000014c 	.word	0x2000014c
 80006b4:	20000514 	.word	0x20000514

080006b8 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction) () , uint32_t DELAY, uint32_t PERIOD){
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	if(pFunction == NULL){ //check if invalid add
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d105      	bne.n	80006d6 <SCH_Add_Task+0x1e>
		Error_code_G = ERROR_SCH_INVALID_TASK_INIT;
 80006ca:	4b7b      	ldr	r3, [pc, #492]	@ (80008b8 <SCH_Add_Task+0x200>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	701a      	strb	r2, [r3, #0]
		return -1;
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	e0ec      	b.n	80008b0 <SCH_Add_Task+0x1f8>
	}

	uint32_t i = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
	while((i < SCH_MAX_TASK) && (SCH_tasks_G[i].pTask != NULL)){
 80006da:	e002      	b.n	80006e2 <SCH_Add_Task+0x2a>
		i++;
 80006dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006de:	3301      	adds	r3, #1
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
	while((i < SCH_MAX_TASK) && (SCH_tasks_G[i].pTask != NULL)){
 80006e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e4:	2b27      	cmp	r3, #39	@ 0x27
 80006e6:	d809      	bhi.n	80006fc <SCH_Add_Task+0x44>
 80006e8:	4974      	ldr	r1, [pc, #464]	@ (80008bc <SCH_Add_Task+0x204>)
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	440b      	add	r3, r1
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1ef      	bne.n	80006dc <SCH_Add_Task+0x24>
	}

	if(i == SCH_MAX_TASK){
 80006fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fe:	2b28      	cmp	r3, #40	@ 0x28
 8000700:	d104      	bne.n	800070c <SCH_Add_Task+0x54>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000702:	4b6d      	ldr	r3, [pc, #436]	@ (80008b8 <SCH_Add_Task+0x200>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASK;
 8000708:	2328      	movs	r3, #40	@ 0x28
 800070a:	e0d1      	b.n	80008b0 <SCH_Add_Task+0x1f8>
	}

	SCH_tasks_G[i].pTask = pFunction;
 800070c:	496b      	ldr	r1, [pc, #428]	@ (80008bc <SCH_Add_Task+0x204>)
 800070e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	440b      	add	r3, r1
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].delay = DELAY;
 800071e:	4967      	ldr	r1, [pc, #412]	@ (80008bc <SCH_Add_Task+0x204>)
 8000720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000722:	4613      	mov	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4413      	add	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	440b      	add	r3, r1
 800072c:	3304      	adds	r3, #4
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].period = PERIOD;
 8000732:	4962      	ldr	r1, [pc, #392]	@ (80008bc <SCH_Add_Task+0x204>)
 8000734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	440b      	add	r3, r1
 8000740:	3308      	adds	r3, #8
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].RunMe = 0;
 8000746:	495d      	ldr	r1, [pc, #372]	@ (80008bc <SCH_Add_Task+0x204>)
 8000748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	440b      	add	r3, r1
 8000754:	330c      	adds	r3, #12
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[i].TaskID = i;
 800075a:	4958      	ldr	r1, [pc, #352]	@ (80008bc <SCH_Add_Task+0x204>)
 800075c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	440b      	add	r3, r1
 8000768:	3310      	adds	r3, #16
 800076a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800076c:	601a      	str	r2, [r3, #0]

	if(queue_head == NULL && queue_tasks_num == 0){//if queue is empty, add one task to queue
 800076e:	4b54      	ldr	r3, [pc, #336]	@ (80008c0 <SCH_Add_Task+0x208>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d12a      	bne.n	80007cc <SCH_Add_Task+0x114>
 8000776:	4b53      	ldr	r3, [pc, #332]	@ (80008c4 <SCH_Add_Task+0x20c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d126      	bne.n	80007cc <SCH_Add_Task+0x114>
		queue_head = (sTask*) malloc(sizeof(sTask));
 800077e:	2018      	movs	r0, #24
 8000780:	f002 f8a2 	bl	80028c8 <malloc>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b4d      	ldr	r3, [pc, #308]	@ (80008c0 <SCH_Add_Task+0x208>)
 800078a:	601a      	str	r2, [r3, #0]
		if(queue_head == NULL){
 800078c:	4b4c      	ldr	r3, [pc, #304]	@ (80008c0 <SCH_Add_Task+0x208>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d105      	bne.n	80007a0 <SCH_Add_Task+0xe8>
			Error_code_G = ERROR_SCH_QUEUE_INITIALIZATION_FAILED;
 8000794:	4b48      	ldr	r3, [pc, #288]	@ (80008b8 <SCH_Add_Task+0x200>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
			return -1; // allocation failed
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e087      	b.n	80008b0 <SCH_Add_Task+0x1f8>
		}
		*queue_head = SCH_tasks_G[i];
 80007a0:	4b47      	ldr	r3, [pc, #284]	@ (80008c0 <SCH_Add_Task+0x208>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	4945      	ldr	r1, [pc, #276]	@ (80008bc <SCH_Add_Task+0x204>)
 80007a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	440b      	add	r3, r1
 80007b2:	4604      	mov	r4, r0
 80007b4:	461d      	mov	r5, r3
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007be:	e884 0003 	stmia.w	r4, {r0, r1}
		queue_head->next = NULL;
 80007c2:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <SCH_Add_Task+0x208>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	e06b      	b.n	80008a4 <SCH_Add_Task+0x1ec>
	}
	else{//if not
		sTask* new_task = (sTask*) malloc(sizeof(sTask));
 80007cc:	2018      	movs	r0, #24
 80007ce:	f002 f87b 	bl	80028c8 <malloc>
 80007d2:	4603      	mov	r3, r0
 80007d4:	617b      	str	r3, [r7, #20]
		if (new_task == NULL) {
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d105      	bne.n	80007e8 <SCH_Add_Task+0x130>
			Error_code_G = ERROR_SCH_QUEUE_INITIALIZATION_FAILED;
 80007dc:	4b36      	ldr	r3, [pc, #216]	@ (80008b8 <SCH_Add_Task+0x200>)
 80007de:	2202      	movs	r2, #2
 80007e0:	701a      	strb	r2, [r3, #0]
			return -1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e063      	b.n	80008b0 <SCH_Add_Task+0x1f8>
		}
		*new_task = SCH_tasks_G[i];
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	4934      	ldr	r1, [pc, #208]	@ (80008bc <SCH_Add_Task+0x204>)
 80007ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007ee:	4613      	mov	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	440b      	add	r3, r1
 80007f8:	4604      	mov	r4, r0
 80007fa:	461d      	mov	r5, r3
 80007fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000804:	e884 0003 	stmia.w	r4, {r0, r1}
		new_task->next = NULL;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]

		sTask* cursor = queue_head; //create a cursor
 800080e:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <SCH_Add_Task+0x208>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	623b      	str	r3, [r7, #32]
		sTask* prev = NULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
		uint32_t delay_accumulate = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]

		while (cursor != NULL && (new_task->delay > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than tasks delay
 800081c:	e009      	b.n	8000832 <SCH_Add_Task+0x17a>
			delay_accumulate += cursor->delay; //accumulate delay
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	4413      	add	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]
			prev = cursor;
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	61fb      	str	r3, [r7, #28]
			cursor = cursor->next; // keep moving to next
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	623b      	str	r3, [r7, #32]
		while (cursor != NULL && (new_task->delay > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than tasks delay
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d007      	beq.n	8000848 <SCH_Add_Task+0x190>
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	6859      	ldr	r1, [r3, #4]
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	440b      	add	r3, r1
 8000844:	429a      	cmp	r2, r3
 8000846:	d8ea      	bhi.n	800081e <SCH_Add_Task+0x166>
		}

		new_task->delay -= delay_accumulate; //calculate relative delay
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	1ad2      	subs	r2, r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	605a      	str	r2, [r3, #4]

		if (prev == NULL) { //if task needed to be insert at head
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d114      	bne.n	8000884 <SCH_Add_Task+0x1cc>
			new_task->next = queue_head;
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <SCH_Add_Task+0x208>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	615a      	str	r2, [r3, #20]
			if (queue_head != NULL) {
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <SCH_Add_Task+0x208>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d008      	beq.n	800087c <SCH_Add_Task+0x1c4>
				queue_head->delay -= new_task->delay;
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <SCH_Add_Task+0x208>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6859      	ldr	r1, [r3, #4]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <SCH_Add_Task+0x208>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1a8a      	subs	r2, r1, r2
 800087a:	605a      	str	r2, [r3, #4]
			}
			queue_head = new_task;
 800087c:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <SCH_Add_Task+0x208>)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	6013      	str	r3, [r2, #0]
 8000882:	e00f      	b.n	80008a4 <SCH_Add_Task+0x1ec>
		}
		else { // if not
			new_task->next = cursor; //insert in between node
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	6a3a      	ldr	r2, [r7, #32]
 8000888:	615a      	str	r2, [r3, #20]
			prev->next = new_task;
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	615a      	str	r2, [r3, #20]

			if (cursor != NULL) { //recalculate the next task delay
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <SCH_Add_Task+0x1ec>
				cursor->delay -= new_task->delay;
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	605a      	str	r2, [r3, #4]
			}
		}
	}
	queue_tasks_num++;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <SCH_Add_Task+0x20c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a06      	ldr	r2, [pc, #24]	@ (80008c4 <SCH_Add_Task+0x20c>)
 80008ac:	6013      	str	r3, [r2, #0]

	return i;
 80008ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3728      	adds	r7, #40	@ 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}
 80008b8:	20000514 	.word	0x20000514
 80008bc:	2000014c 	.word	0x2000014c
 80008c0:	2000050c 	.word	0x2000050c
 80008c4:	20000510 	.word	0x20000510

080008c8 <SCH_Update>:

void SCH_Update(void){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
	if (queue_head == NULL) return; //if empty queue return
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <SCH_Update+0x58>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01e      	beq.n	8000914 <SCH_Update+0x4c>

	if(queue_head->delay > 0){ //decrement head
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <SCH_Update+0x58>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d004      	beq.n	80008ea <SCH_Update+0x22>
		queue_head->delay--;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <SCH_Update+0x58>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	3a01      	subs	r2, #1
 80008e8:	605a      	str	r2, [r3, #4]
	}

	sTask* cursor = queue_head;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <SCH_Update+0x58>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	607b      	str	r3, [r7, #4]
	while(cursor != NULL && cursor->delay == 0){
 80008f0:	e008      	b.n	8000904 <SCH_Update+0x3c>
		cursor->RunMe++;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7b1b      	ldrb	r3, [r3, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	731a      	strb	r2, [r3, #12]
		cursor = cursor->next;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	607b      	str	r3, [r7, #4]
	while(cursor != NULL && cursor->delay == 0){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d005      	beq.n	8000916 <SCH_Update+0x4e>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0ef      	beq.n	80008f2 <SCH_Update+0x2a>
 8000912:	e000      	b.n	8000916 <SCH_Update+0x4e>
	if (queue_head == NULL) return; //if empty queue return
 8000914:	bf00      	nop
	}
}
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	2000050c 	.word	0x2000050c

08000924 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	while(queue_head != NULL && queue_head->RunMe > 0){ //Loop through all task that's had runme flag on from head
 8000928:	e01a      	b.n	8000960 <SCH_Dispatch_Tasks+0x3c>

		if(queue_head->pTask != NULL){
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <SCH_Dispatch_Tasks+0x5c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d015      	beq.n	8000960 <SCH_Dispatch_Tasks+0x3c>
			(*queue_head->pTask)(); //run the tasks
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <SCH_Dispatch_Tasks+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4798      	blx	r3
			queue_head->RunMe = 0;
 800093c:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <SCH_Dispatch_Tasks+0x5c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2200      	movs	r2, #0
 8000942:	731a      	strb	r2, [r3, #12]

			if(queue_head->period > 0){ //if it is periodically
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <SCH_Dispatch_Tasks+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <SCH_Dispatch_Tasks+0x30>
				SCH_RescheduleTask();
 800094e:	f000 f8bf 	bl	8000ad0 <SCH_RescheduleTask>
 8000952:	e005      	b.n	8000960 <SCH_Dispatch_Tasks+0x3c>
			}
			else{
				SCH_Delete_Task(queue_head->TaskID);
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <SCH_Dispatch_Tasks+0x5c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f812 	bl	8000984 <SCH_Delete_Task>
	while(queue_head != NULL && queue_head->RunMe > 0){ //Loop through all task that's had runme flag on from head
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <SCH_Dispatch_Tasks+0x5c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d004      	beq.n	8000972 <SCH_Dispatch_Tasks+0x4e>
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <SCH_Dispatch_Tasks+0x5c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	7b1b      	ldrb	r3, [r3, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1db      	bne.n	800092a <SCH_Dispatch_Tasks+0x6>

		}

	}

	SCH_Report_Status(); //output status
 8000972:	f000 f917 	bl	8000ba4 <SCH_Report_Status>
	SCH_Go_To_Sleep(); //sleep
 8000976:	f000 f90f 	bl	8000b98 <SCH_Go_To_Sleep>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000050c 	.word	0x2000050c

08000984 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	if(TASK_INDEX < 0 || TASK_INDEX >= SCH_MAX_TASK || SCH_tasks_G[TASK_INDEX].pTask == NULL){ //invalid index
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b27      	cmp	r3, #39	@ 0x27
 8000990:	d809      	bhi.n	80009a6 <SCH_Delete_Task+0x22>
 8000992:	494b      	ldr	r1, [pc, #300]	@ (8000ac0 <SCH_Delete_Task+0x13c>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	440b      	add	r3, r1
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d104      	bne.n	80009b0 <SCH_Delete_Task+0x2c>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80009a6:	4b47      	ldr	r3, [pc, #284]	@ (8000ac4 <SCH_Delete_Task+0x140>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	701a      	strb	r2, [r3, #0]
		return -1;
 80009ac:	23ff      	movs	r3, #255	@ 0xff
 80009ae:	e083      	b.n	8000ab8 <SCH_Delete_Task+0x134>
	}
	//delete from tasks array
	SCH_tasks_G[TASK_INDEX].pTask = NULL;
 80009b0:	4943      	ldr	r1, [pc, #268]	@ (8000ac0 <SCH_Delete_Task+0x13c>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	440b      	add	r3, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].delay = 0;
 80009c2:	493f      	ldr	r1, [pc, #252]	@ (8000ac0 <SCH_Delete_Task+0x13c>)
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	3304      	adds	r3, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].period = 0;
 80009d6:	493a      	ldr	r1, [pc, #232]	@ (8000ac0 <SCH_Delete_Task+0x13c>)
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	3308      	adds	r3, #8
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80009ea:	4935      	ldr	r1, [pc, #212]	@ (8000ac0 <SCH_Delete_Task+0x13c>)
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	330c      	adds	r3, #12
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].TaskID = 0;
 80009fe:	4930      	ldr	r1, [pc, #192]	@ (8000ac0 <SCH_Delete_Task+0x13c>)
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	440b      	add	r3, r1
 8000a0c:	3310      	adds	r3, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]

	//delete from queue
	sTask* cursor = queue_head;
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	617b      	str	r3, [r7, #20]
	sTask* prev = NULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
	while(cursor != NULL){
 8000a1c:	e009      	b.n	8000a32 <SCH_Delete_Task+0xae>
		if(cursor->TaskID == TASK_INDEX){
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d008      	beq.n	8000a3a <SCH_Delete_Task+0xb6>
			break;
		}
		prev = cursor;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
		cursor = cursor->next;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	617b      	str	r3, [r7, #20]
	while(cursor != NULL){
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f2      	bne.n	8000a1e <SCH_Delete_Task+0x9a>
 8000a38:	e000      	b.n	8000a3c <SCH_Delete_Task+0xb8>
			break;
 8000a3a:	bf00      	nop
	}
	if(cursor != NULL){
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d038      	beq.n	8000ab4 <SCH_Delete_Task+0x130>
		if(queue_head->TaskID == cursor->TaskID){ //delete head
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	691a      	ldr	r2, [r3, #16]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d118      	bne.n	8000a82 <SCH_Delete_Task+0xfe>
			sTask* temp = queue_head;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
			queue_head = queue_head->next;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a5e:	6013      	str	r3, [r2, #0]
			if(queue_head != NULL){
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d008      	beq.n	8000a7a <SCH_Delete_Task+0xf6>
				queue_head->delay += temp->delay;
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6859      	ldr	r1, [r3, #4]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <SCH_Delete_Task+0x144>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	440a      	add	r2, r1
 8000a78:	605a      	str	r2, [r3, #4]
			}
			free(temp);
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f001 ff2c 	bl	80028d8 <free>
 8000a80:	e013      	b.n	8000aaa <SCH_Delete_Task+0x126>
		}
		else{
			prev->next = cursor->next;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	695a      	ldr	r2, [r3, #20]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	615a      	str	r2, [r3, #20]
			if (cursor->next != NULL){
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <SCH_Delete_Task+0x120>
				cursor->next->delay += cursor->delay;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	6859      	ldr	r1, [r3, #4]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	440a      	add	r2, r1
 8000aa2:	605a      	str	r2, [r3, #4]
			}
			free(cursor);
 8000aa4:	6978      	ldr	r0, [r7, #20]
 8000aa6:	f001 ff17 	bl	80028d8 <free>
		}
		queue_tasks_num--;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <SCH_Delete_Task+0x148>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	4a06      	ldr	r2, [pc, #24]	@ (8000acc <SCH_Delete_Task+0x148>)
 8000ab2:	6013      	str	r3, [r2, #0]
	}

	return TASK_INDEX;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000014c 	.word	0x2000014c
 8000ac4:	20000514 	.word	0x20000514
 8000ac8:	2000050c 	.word	0x2000050c
 8000acc:	20000510 	.word	0x20000510

08000ad0 <SCH_RescheduleTask>:

void SCH_RescheduleTask(void){
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
	if (queue_head == NULL) return;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d055      	beq.n	8000b8a <SCH_RescheduleTask+0xba>

	sTask* temp = queue_head;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	603b      	str	r3, [r7, #0]
	sTask* cursor = queue_head->next;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	60fb      	str	r3, [r7, #12]
	sTask* prev = NULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
	uint32_t delay_accumulate = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]

	while (cursor != NULL && (queue_head->period > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than delay of task that is being rescheduled
 8000af4:	e009      	b.n	8000b0a <SCH_RescheduleTask+0x3a>
		delay_accumulate += cursor->delay; //accumulate delay
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
		prev = cursor;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	60bb      	str	r3, [r7, #8]
		cursor = cursor->next; // keep moving to next
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	60fb      	str	r3, [r7, #12]
	while (cursor != NULL && (queue_head->period > delay_accumulate + cursor->delay)) { //if cursor is not at the end of the queue and accumulated delay is still smaller than delay of task that is being rescheduled
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d008      	beq.n	8000b22 <SCH_RescheduleTask+0x52>
 8000b10:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6859      	ldr	r1, [r3, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	440b      	add	r3, r1
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d8e9      	bhi.n	8000af6 <SCH_RescheduleTask+0x26>
	}

	queue_head = queue_head->next;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	4a1a      	ldr	r2, [pc, #104]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b2a:	6013      	str	r3, [r2, #0]
	temp->delay = temp->period - delay_accumulate;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	1ad2      	subs	r2, r2, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	605a      	str	r2, [r3, #4]

	if (prev == NULL) {
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d114      	bne.n	8000b68 <SCH_RescheduleTask+0x98>
		temp->next = queue_head;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	615a      	str	r2, [r3, #20]
		if (queue_head != NULL){
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d008      	beq.n	8000b60 <SCH_RescheduleTask+0x90>
			queue_head->delay -= temp->delay;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6859      	ldr	r1, [r3, #4]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	1a8a      	subs	r2, r1, r2
 8000b5e:	605a      	str	r2, [r3, #4]
		}
		queue_head = temp;
 8000b60:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <SCH_RescheduleTask+0xc4>)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e011      	b.n	8000b8c <SCH_RescheduleTask+0xbc>
	}
	else {
		// Insert after 'prev'
		temp->next = cursor;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	615a      	str	r2, [r3, #20]
		prev->next = temp;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	615a      	str	r2, [r3, #20]
		if (cursor != NULL){
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <SCH_RescheduleTask+0xbc>
			cursor->delay -= temp->delay;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	1ad2      	subs	r2, r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	e000      	b.n	8000b8c <SCH_RescheduleTask+0xbc>
	if (queue_head == NULL) return;
 8000b8a:	bf00      	nop
		}
	}
}
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	2000050c 	.word	0x2000050c

08000b98 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(void){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SCH_Report_Status>:
		break;
	}
	UART_Print(c, strlen(c));
}

void SCH_Report_Status(void){
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
#endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_MspInit+0x60>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_MspInit+0x60>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000

08000c14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c24:	d113      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <HAL_TIM_Base_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_TIM_Base_MspInit+0x44>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_TIM_Base_MspInit+0x44>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	201c      	movs	r0, #28
 8000c44:	f000 fa4b 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c48:	201c      	movs	r0, #28
 8000c4a:	f000 fa64 	bl	8001116 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <HAL_UART_MspInit+0xa4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d13d      	bne.n	8000cf8 <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <HAL_UART_MspInit+0xa8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a20      	ldr	r2, [pc, #128]	@ (8000d04 <HAL_UART_MspInit+0xa8>)
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <HAL_UART_MspInit+0xa8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <HAL_UART_MspInit+0xa8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a1a      	ldr	r2, [pc, #104]	@ (8000d04 <HAL_UART_MspInit+0xa8>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_UART_MspInit+0xa8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cac:	2340      	movs	r3, #64	@ 0x40
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4812      	ldr	r0, [pc, #72]	@ (8000d08 <HAL_UART_MspInit+0xac>)
 8000cc0:	f000 fa44 	bl	800114c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <HAL_UART_MspInit+0xac>)
 8000cd8:	f000 fa38 	bl	800114c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <HAL_UART_MspInit+0xb0>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cf2:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_UART_MspInit+0xb0>)
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf6:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	@ 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40013800 	.word	0x40013800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	40010000 	.word	0x40010000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f8ca 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <TIM2_IRQHandler+0x10>)
 8000d6e:	f001 f847 	bl	8001e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000078 	.word	0x20000078

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f001 fe84 	bl	8002ab8 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20002800 	.word	0x20002800
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000518 	.word	0x20000518
 8000de4:	20000668 	.word	0x20000668

08000de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: NGUYEN BINH
 */
#include "main.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e04:	d106      	bne.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x20>
		SCH_Update();
 8000e06:	f7ff fd5f 	bl	80008c8 <SCH_Update>
		ticks++;
 8000e0a:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a02      	ldr	r2, [pc, #8]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e12:	6013      	str	r3, [r2, #0]
	}
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000108 	.word	0x20000108

08000e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff ffe2 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480b      	ldr	r0, [pc, #44]	@ (8000e54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e26:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e28:	4a0c      	ldr	r2, [pc, #48]	@ (8000e5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e3c:	4c09      	ldr	r4, [pc, #36]	@ (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f001 fe3b 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff f985 	bl	800015c <main>
  bx lr
 8000e52:	4770      	bx	lr
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e5c:	080033c8 	.word	0x080033c8
  ldr r2, =_sbss
 8000e60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e64:	20000668 	.word	0x20000668

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_Init+0x28>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f923 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fe92 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f93b 	bl	8001132 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f903 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_IncTick+0x20>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a03      	ldr	r2, [pc, #12]	@ (8000f18 <HAL_IncTick+0x20>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000008 	.word	0x20000008
 8000f18:	2000051c 	.word	0x2000051c

08000f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	@ (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	2000051c 	.word	0x2000051c

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4906      	ldr	r1, [pc, #24]	@ (8000fc8 <__NVIC_EnableIRQ+0x34>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	@ (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff90 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff2d 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff42 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff90 	bl	8001020 <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5f 	bl	8000fcc <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff35 	bl	8000f94 <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b08b      	sub	sp, #44	@ 0x2c
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e161      	b.n	8001424 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001160:	2201      	movs	r2, #1
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8150 	bne.w	800141e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a97      	ldr	r2, [pc, #604]	@ (80013e0 <HAL_GPIO_Init+0x294>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d05e      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001188:	4a95      	ldr	r2, [pc, #596]	@ (80013e0 <HAL_GPIO_Init+0x294>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d875      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800118e:	4a95      	ldr	r2, [pc, #596]	@ (80013e4 <HAL_GPIO_Init+0x298>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d058      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001194:	4a93      	ldr	r2, [pc, #588]	@ (80013e4 <HAL_GPIO_Init+0x298>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d86f      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800119a:	4a93      	ldr	r2, [pc, #588]	@ (80013e8 <HAL_GPIO_Init+0x29c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d052      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011a0:	4a91      	ldr	r2, [pc, #580]	@ (80013e8 <HAL_GPIO_Init+0x29c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d869      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011a6:	4a91      	ldr	r2, [pc, #580]	@ (80013ec <HAL_GPIO_Init+0x2a0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d04c      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011ac:	4a8f      	ldr	r2, [pc, #572]	@ (80013ec <HAL_GPIO_Init+0x2a0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d863      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011b2:	4a8f      	ldr	r2, [pc, #572]	@ (80013f0 <HAL_GPIO_Init+0x2a4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d046      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011b8:	4a8d      	ldr	r2, [pc, #564]	@ (80013f0 <HAL_GPIO_Init+0x2a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d85d      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d82a      	bhi.n	8001218 <HAL_GPIO_Init+0xcc>
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d859      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011c6:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <HAL_GPIO_Init+0x80>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	08001247 	.word	0x08001247
 80011d0:	08001221 	.word	0x08001221
 80011d4:	08001233 	.word	0x08001233
 80011d8:	08001275 	.word	0x08001275
 80011dc:	0800127b 	.word	0x0800127b
 80011e0:	0800127b 	.word	0x0800127b
 80011e4:	0800127b 	.word	0x0800127b
 80011e8:	0800127b 	.word	0x0800127b
 80011ec:	0800127b 	.word	0x0800127b
 80011f0:	0800127b 	.word	0x0800127b
 80011f4:	0800127b 	.word	0x0800127b
 80011f8:	0800127b 	.word	0x0800127b
 80011fc:	0800127b 	.word	0x0800127b
 8001200:	0800127b 	.word	0x0800127b
 8001204:	0800127b 	.word	0x0800127b
 8001208:	0800127b 	.word	0x0800127b
 800120c:	0800127b 	.word	0x0800127b
 8001210:	08001229 	.word	0x08001229
 8001214:	0800123d 	.word	0x0800123d
 8001218:	4a76      	ldr	r2, [pc, #472]	@ (80013f4 <HAL_GPIO_Init+0x2a8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121e:	e02c      	b.n	800127a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e029      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	3304      	adds	r3, #4
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e024      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	3308      	adds	r3, #8
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e01f      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	330c      	adds	r3, #12
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e01a      	b.n	800127c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124e:	2304      	movs	r3, #4
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e013      	b.n	800127c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d105      	bne.n	8001268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	611a      	str	r2, [r3, #16]
          break;
 8001266:	e009      	b.n	800127c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001268:	2308      	movs	r3, #8
 800126a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	615a      	str	r2, [r3, #20]
          break;
 8001272:	e003      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x130>
          break;
 800127a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d801      	bhi.n	8001286 <HAL_GPIO_Init+0x13a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	e001      	b.n	800128a <HAL_GPIO_Init+0x13e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3304      	adds	r3, #4
 800128a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2bff      	cmp	r3, #255	@ 0xff
 8001290:	d802      	bhi.n	8001298 <HAL_GPIO_Init+0x14c>
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x152>
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	3b08      	subs	r3, #8
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	210f      	movs	r1, #15
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	6a39      	ldr	r1, [r7, #32]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80a9 	beq.w	800141e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012cc:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <HAL_GPIO_Init+0x2ac>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a49      	ldr	r2, [pc, #292]	@ (80013f8 <HAL_GPIO_Init+0x2ac>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <HAL_GPIO_Init+0x2ac>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e4:	4a45      	ldr	r2, [pc, #276]	@ (80013fc <HAL_GPIO_Init+0x2b0>)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a3d      	ldr	r2, [pc, #244]	@ (8001400 <HAL_GPIO_Init+0x2b4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00d      	beq.n	800132c <HAL_GPIO_Init+0x1e0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3c      	ldr	r2, [pc, #240]	@ (8001404 <HAL_GPIO_Init+0x2b8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x1dc>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3b      	ldr	r2, [pc, #236]	@ (8001408 <HAL_GPIO_Init+0x2bc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_GPIO_Init+0x1d8>
 8001320:	2302      	movs	r3, #2
 8001322:	e004      	b.n	800132e <HAL_GPIO_Init+0x1e2>
 8001324:	2303      	movs	r3, #3
 8001326:	e002      	b.n	800132e <HAL_GPIO_Init+0x1e2>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_GPIO_Init+0x1e2>
 800132c:	2300      	movs	r3, #0
 800132e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001330:	f002 0203 	and.w	r2, r2, #3
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	4093      	lsls	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800133e:	492f      	ldr	r1, [pc, #188]	@ (80013fc <HAL_GPIO_Init+0x2b0>)
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	492b      	ldr	r1, [pc, #172]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	43db      	mvns	r3, r3
 800136e:	4927      	ldr	r1, [pc, #156]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 8001370:	4013      	ands	r3, r2
 8001372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	4921      	ldr	r1, [pc, #132]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	43db      	mvns	r3, r3
 8001396:	491d      	ldr	r1, [pc, #116]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 8001398:	4013      	ands	r3, r2
 800139a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4917      	ldr	r1, [pc, #92]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	4913      	ldr	r1, [pc, #76]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d01f      	beq.n	8001410 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	490d      	ldr	r1, [pc, #52]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e01f      	b.n	800141e <HAL_GPIO_Init+0x2d2>
 80013de:	bf00      	nop
 80013e0:	10320000 	.word	0x10320000
 80013e4:	10310000 	.word	0x10310000
 80013e8:	10220000 	.word	0x10220000
 80013ec:	10210000 	.word	0x10210000
 80013f0:	10120000 	.word	0x10120000
 80013f4:	10110000 	.word	0x10110000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	40010800 	.word	0x40010800
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40011000 	.word	0x40011000
 800140c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_GPIO_Init+0x2f4>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	43db      	mvns	r3, r3
 8001418:	4909      	ldr	r1, [pc, #36]	@ (8001440 <HAL_GPIO_Init+0x2f4>)
 800141a:	4013      	ands	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	3301      	adds	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f47f ae96 	bne.w	8001160 <HAL_GPIO_Init+0x14>
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	372c      	adds	r7, #44	@ 0x2c
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43d9      	mvns	r1, r3
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	400b      	ands	r3, r1
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e272      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8087 	beq.w	80015d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c8:	4b92      	ldr	r3, [pc, #584]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d00c      	beq.n	80014ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d112      	bne.n	8001506 <HAL_RCC_OscConfig+0x5e>
 80014e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ec:	d10b      	bne.n	8001506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ee:	4b89      	ldr	r3, [pc, #548]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d06c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x12c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d168      	bne.n	80015d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e24c      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x76>
 8001510:	4b80      	ldr	r3, [pc, #512]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a7f      	ldr	r2, [pc, #508]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e02e      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x98>
 8001526:	4b7b      	ldr	r3, [pc, #492]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a7a      	ldr	r2, [pc, #488]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b78      	ldr	r3, [pc, #480]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a77      	ldr	r2, [pc, #476]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001538:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0xbc>
 800154a:	4b72      	ldr	r3, [pc, #456]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a71      	ldr	r2, [pc, #452]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6f      	ldr	r3, [pc, #444]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6e      	ldr	r2, [pc, #440]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 8001564:	4b6b      	ldr	r3, [pc, #428]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a6a      	ldr	r2, [pc, #424]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b68      	ldr	r3, [pc, #416]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a67      	ldr	r2, [pc, #412]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcca 	bl	8000f1c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcc6 	bl	8000f1c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e200      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xe4>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fcb6 	bl	8000f1c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fcb2 	bl	8000f1c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	@ 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1ec      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x10c>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ee:	4b49      	ldr	r3, [pc, #292]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x18c>
 80015fa:	4b46      	ldr	r3, [pc, #280]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b43      	ldr	r3, [pc, #268]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x176>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1c0      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4939      	ldr	r1, [pc, #228]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fc6b 	bl	8000f1c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fc67 	bl	8000f1c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1a1      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4927      	ldr	r1, [pc, #156]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fc4a 	bl	8000f1c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fc46 	bl	8000f1c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e180      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d03a      	beq.n	800172c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d019      	beq.n	80016f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_RCC_OscConfig+0x274>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc2a 	bl	8000f1c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc26 	bl	8000f1c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e160      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 face 	bl	8001c8c <RCC_Delay>
 80016f0:	e01c      	b.n	800172c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_RCC_OscConfig+0x274>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fc10 	bl	8000f1c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fe:	e00f      	b.n	8001720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fc0c 	bl	8000f1c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d908      	bls.n	8001720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e146      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	42420000 	.word	0x42420000
 800171c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b92      	ldr	r3, [pc, #584]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e9      	bne.n	8001700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a6 	beq.w	8001886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b8b      	ldr	r3, [pc, #556]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b88      	ldr	r3, [pc, #544]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a87      	ldr	r2, [pc, #540]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b85      	ldr	r3, [pc, #532]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001762:	2301      	movs	r3, #1
 8001764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	4b82      	ldr	r3, [pc, #520]	@ (8001970 <HAL_RCC_OscConfig+0x4c8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001772:	4b7f      	ldr	r3, [pc, #508]	@ (8001970 <HAL_RCC_OscConfig+0x4c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7e      	ldr	r2, [pc, #504]	@ (8001970 <HAL_RCC_OscConfig+0x4c8>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff fbcd 	bl	8000f1c <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff fbc9 	bl	8000f1c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	@ 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e103      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b75      	ldr	r3, [pc, #468]	@ (8001970 <HAL_RCC_OscConfig+0x4c8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x312>
 80017ac:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a6e      	ldr	r2, [pc, #440]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	e02d      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x334>
 80017c2:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a69      	ldr	r2, [pc, #420]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	4b67      	ldr	r3, [pc, #412]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a66      	ldr	r2, [pc, #408]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	e01c      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x356>
 80017e4:	4b61      	ldr	r3, [pc, #388]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a60      	ldr	r2, [pc, #384]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	4b5e      	ldr	r3, [pc, #376]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a5d      	ldr	r2, [pc, #372]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017fe:	4b5b      	ldr	r3, [pc, #364]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a5a      	ldr	r2, [pc, #360]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	4b58      	ldr	r3, [pc, #352]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a57      	ldr	r2, [pc, #348]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fb7d 	bl	8000f1c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fb79 	bl	8000f1c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0b1      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ee      	beq.n	8001826 <HAL_RCC_OscConfig+0x37e>
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb67 	bl	8000f1c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fb63 	bl	8000f1c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e09b      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b40      	ldr	r3, [pc, #256]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b3c      	ldr	r3, [pc, #240]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a3b      	ldr	r2, [pc, #236]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8087 	beq.w	800199e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	4b36      	ldr	r3, [pc, #216]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d061      	beq.n	8001960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d146      	bne.n	8001932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b33      	ldr	r3, [pc, #204]	@ (8001974 <HAL_RCC_OscConfig+0x4cc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb37 	bl	8000f1c <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff fb33 	bl	8000f1c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e06d      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c4:	4b29      	ldr	r3, [pc, #164]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d8:	d108      	bne.n	80018ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4921      	ldr	r1, [pc, #132]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a19      	ldr	r1, [r3, #32]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	430b      	orrs	r3, r1
 80018fe:	491b      	ldr	r1, [pc, #108]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_RCC_OscConfig+0x4cc>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fb07 	bl	8000f1c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fb03 	bl	8000f1c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e03d      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x46a>
 8001930:	e035      	b.n	800199e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_RCC_OscConfig+0x4cc>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff faf0 	bl	8000f1c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff faec 	bl	8000f1c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e026      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_RCC_OscConfig+0x4c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x498>
 800195e:	e01e      	b.n	800199e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d107      	bne.n	8001978 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e019      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
 800196c:	40021000 	.word	0x40021000
 8001970:	40007000 	.word	0x40007000
 8001974:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_RCC_OscConfig+0x500>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	429a      	cmp	r2, r3
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0d0      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d910      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b67      	ldr	r3, [pc, #412]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 0207 	bic.w	r2, r3, #7
 80019d6:	4965      	ldr	r1, [pc, #404]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b63      	ldr	r3, [pc, #396]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0b8      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a08:	4b59      	ldr	r3, [pc, #356]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a58      	ldr	r2, [pc, #352]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a20:	4b53      	ldr	r3, [pc, #332]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a52      	ldr	r2, [pc, #328]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b50      	ldr	r3, [pc, #320]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	494d      	ldr	r1, [pc, #308]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d040      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d115      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e07f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b41      	ldr	r3, [pc, #260]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e073      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06b      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b39      	ldr	r3, [pc, #228]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4936      	ldr	r1, [pc, #216]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fa3e 	bl	8000f1c <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff fa3a 	bl	8000f1c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e053      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d210      	bcs.n	8001afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	4922      	ldr	r1, [pc, #136]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e032      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4916      	ldr	r1, [pc, #88]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	490e      	ldr	r1, [pc, #56]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3a:	f000 f821 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	490a      	ldr	r1, [pc, #40]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	5ccb      	ldrb	r3, [r1, r3]
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	4a09      	ldr	r2, [pc, #36]	@ (8001b78 <HAL_RCC_ClockConfig+0x1cc>)
 8001b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1d0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f99c 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08003358 	.word	0x08003358
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x30>
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x36>
 8001bae:	e027      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb2:	613b      	str	r3, [r7, #16]
      break;
 8001bb4:	e027      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d010      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0c5b      	lsrs	r3, r3, #17
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001be2:	fb03 f202 	mul.w	r2, r3, r2
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e004      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	613b      	str	r3, [r7, #16]
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c02:	613b      	str	r3, [r7, #16]
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	693b      	ldr	r3, [r7, #16]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	007a1200 	.word	0x007a1200
 8001c1c:	08003370 	.word	0x08003370
 8001c20:	08003380 	.word	0x08003380
 8001c24:	003d0900 	.word	0x003d0900

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	@ (8001c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c40:	f7ff fff2 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08003368 	.word	0x08003368

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	0adb      	lsrs	r3, r3, #11
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08003368 	.word	0x08003368

08001c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <RCC_Delay+0x34>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <RCC_Delay+0x38>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0a5b      	lsrs	r3, r3, #9
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca8:	bf00      	nop
  }
  while (Delay --);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f9      	bne.n	8001ca8 <RCC_Delay+0x1c>
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	10624dd3 	.word	0x10624dd3

08001cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e041      	b.n	8001d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe ff90 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f000 fa56 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d001      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e035      	b.n	8001dec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_TIM_Base_Start_IT+0x90>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d009      	beq.n	8001db6 <HAL_TIM_Base_Start_IT+0x4e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001daa:	d004      	beq.n	8001db6 <HAL_TIM_Base_Start_IT+0x4e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <HAL_TIM_Base_Start_IT+0x94>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d111      	bne.n	8001dda <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b06      	cmp	r3, #6
 8001dc6:	d010      	beq.n	8001dea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd8:	e007      	b.n	8001dea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40000400 	.word	0x40000400

08001e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0202 	mvn.w	r2, #2
 8001e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f998 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f98b 	bl	800216e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f99a 	bl	8002192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d020      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01b      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0204 	mvn.w	r2, #4
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f972 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f965 	bl	800216e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f974 	bl	8002192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0208 	mvn.w	r2, #8
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f94c 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f93f 	bl	800216e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f94e 	bl	8002192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d020      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0210 	mvn.w	r2, #16
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f926 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f919 	bl	800216e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f928 	bl	8002192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0201 	mvn.w	r2, #1
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe ff44 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa6f 	bl	800246e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8f8 	bl	80021a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0220 	mvn.w	r2, #32
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa42 	bl	800245c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_ConfigClockSource+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0b4      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x186>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800201a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002034:	d03e      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800203a:	f200 8087 	bhi.w	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002042:	f000 8086 	beq.w	8002152 <HAL_TIM_ConfigClockSource+0x172>
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800204a:	d87f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b70      	cmp	r3, #112	@ 0x70
 800204e:	d01a      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0xa6>
 8002050:	2b70      	cmp	r3, #112	@ 0x70
 8002052:	d87b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b60      	cmp	r3, #96	@ 0x60
 8002056:	d050      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x11a>
 8002058:	2b60      	cmp	r3, #96	@ 0x60
 800205a:	d877      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b50      	cmp	r3, #80	@ 0x50
 800205e:	d03c      	beq.n	80020da <HAL_TIM_ConfigClockSource+0xfa>
 8002060:	2b50      	cmp	r3, #80	@ 0x50
 8002062:	d873      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b40      	cmp	r3, #64	@ 0x40
 8002066:	d058      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x13a>
 8002068:	2b40      	cmp	r3, #64	@ 0x40
 800206a:	d86f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b30      	cmp	r3, #48	@ 0x30
 800206e:	d064      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002070:	2b30      	cmp	r3, #48	@ 0x30
 8002072:	d86b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b20      	cmp	r3, #32
 8002076:	d060      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002078:	2b20      	cmp	r3, #32
 800207a:	d867      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05c      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002080:	2b10      	cmp	r3, #16
 8002082:	d05a      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002084:	e062      	b.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	f000 f96a 	bl	800236e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	609a      	str	r2, [r3, #8]
      break;
 80020b2:	e04f      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020c4:	f000 f953 	bl	800236e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020d6:	609a      	str	r2, [r3, #8]
      break;
 80020d8:	e03c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e6:	461a      	mov	r2, r3
 80020e8:	f000 f8ca 	bl	8002280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2150      	movs	r1, #80	@ 0x50
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f921 	bl	800233a <TIM_ITRx_SetConfig>
      break;
 80020f8:	e02c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002106:	461a      	mov	r2, r3
 8002108:	f000 f8e8 	bl	80022dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2160      	movs	r1, #96	@ 0x60
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f911 	bl	800233a <TIM_ITRx_SetConfig>
      break;
 8002118:	e01c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002126:	461a      	mov	r2, r3
 8002128:	f000 f8aa 	bl	8002280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f901 	bl	800233a <TIM_ITRx_SetConfig>
      break;
 8002138:	e00c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f000 f8f8 	bl	800233a <TIM_ITRx_SetConfig>
      break;
 800214a:	e003      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      break;
 8002150:	e000      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002278 <TIM_Base_SetConfig+0xc0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d007      	beq.n	80021e0 <TIM_Base_SetConfig+0x28>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d6:	d003      	beq.n	80021e0 <TIM_Base_SetConfig+0x28>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a28      	ldr	r2, [pc, #160]	@ (800227c <TIM_Base_SetConfig+0xc4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d108      	bne.n	80021f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a20      	ldr	r2, [pc, #128]	@ (8002278 <TIM_Base_SetConfig+0xc0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0x52>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0x52>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <TIM_Base_SetConfig+0xc4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <TIM_Base_SetConfig+0xc0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f023 0201 	bic.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
  }
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40000400 	.word	0x40000400

08002280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0201 	bic.w	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f023 030a 	bic.w	r3, r3, #10
 80022bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	621a      	str	r2, [r3, #32]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f023 0210 	bic.w	r2, r3, #16
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	031b      	lsls	r3, r3, #12
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002318:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	621a      	str	r2, [r3, #32]
}
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	f043 0307 	orr.w	r3, r3, #7
 800235c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800236e:	b480      	push	{r7}
 8002370:	b087      	sub	sp, #28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002388:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	021a      	lsls	r2, r3, #8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	431a      	orrs	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4313      	orrs	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	609a      	str	r2, [r3, #8]
}
 80023a2:	bf00      	nop
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e041      	b.n	8002448 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002410:	d004      	beq.n	800241c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a10      	ldr	r2, [pc, #64]	@ (8002458 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10c      	bne.n	8002436 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	4313      	orrs	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40000400 	.word	0x40000400

0800245c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e042      	b.n	8002518 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fbd8 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	@ 0x24
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f971 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	@ 0x28
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	d175      	bne.n	800262c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_UART_Transmit+0x2c>
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e06e      	b.n	800262e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2221      	movs	r2, #33	@ 0x21
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255e:	f7fe fcdd 	bl	8000f1c <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002578:	d108      	bne.n	800258c <HAL_UART_Transmit+0x6c>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e003      	b.n	8002594 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002594:	e02e      	b.n	80025f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	2180      	movs	r1, #128	@ 0x80
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f848 	bl	8002636 <UART_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e03a      	b.n	800262e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10b      	bne.n	80025d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	3302      	adds	r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	e007      	b.n	80025e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1cb      	bne.n	8002596 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	@ 0x40
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f814 	bl	8002636 <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e006      	b.n	800262e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4613      	mov	r3, r2
 8002644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002646:	e03b      	b.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d037      	beq.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002650:	f7fe fc64 	bl	8000f1c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	6a3a      	ldr	r2, [r7, #32]
 800265c:	429a      	cmp	r2, r3
 800265e:	d302      	bcc.n	8002666 <UART_WaitOnFlagUntilTimeout+0x30>
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e03a      	b.n	80026e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d023      	beq.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b80      	cmp	r3, #128	@ 0x80
 800267c:	d020      	beq.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b40      	cmp	r3, #64	@ 0x40
 8002682:	d01d      	beq.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b08      	cmp	r3, #8
 8002690:	d116      	bne.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f81d 	bl	80026e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2208      	movs	r2, #8
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e00f      	b.n	80026e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d0b4      	beq.n	8002648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b095      	sub	sp, #84	@ 0x54
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fa:	e853 3f00 	ldrex	r3, [r3]
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002710:	643a      	str	r2, [r7, #64]	@ 0x40
 8002712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002718:	e841 2300 	strex	r3, r2, [r1]
 800271c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800271e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e5      	bne.n	80026f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3314      	adds	r3, #20
 800272a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	e853 3f00 	ldrex	r3, [r3]
 8002732:	61fb      	str	r3, [r7, #28]
   return(result);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3314      	adds	r3, #20
 8002742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800274a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800274c:	e841 2300 	strex	r3, r2, [r1]
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e5      	bne.n	8002724 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275c:	2b01      	cmp	r3, #1
 800275e:	d119      	bne.n	8002794 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f023 0310 	bic.w	r3, r3, #16
 8002776:	647b      	str	r3, [r7, #68]	@ 0x44
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002780:	61ba      	str	r2, [r7, #24]
 8002782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	6979      	ldr	r1, [r7, #20]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	613b      	str	r3, [r7, #16]
   return(result);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e5      	bne.n	8002760 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027a2:	bf00      	nop
 80027a4:	3754      	adds	r7, #84	@ 0x54
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80027e6:	f023 030c 	bic.w	r3, r3, #12
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2c      	ldr	r2, [pc, #176]	@ (80028c0 <UART_SetConfig+0x114>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002814:	f7ff fa26 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	e002      	b.n	8002822 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800281c:	f7ff fa0e 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009a      	lsls	r2, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	4a22      	ldr	r2, [pc, #136]	@ (80028c4 <UART_SetConfig+0x118>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	0119      	lsls	r1, r3, #4
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009a      	lsls	r2, r3, #2
 800284c:	441a      	add	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fbb2 f2f3 	udiv	r2, r2, r3
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <UART_SetConfig+0x118>)
 800285a:	fba3 0302 	umull	r0, r3, r3, r2
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2064      	movs	r0, #100	@ 0x64
 8002862:	fb00 f303 	mul.w	r3, r0, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	3332      	adds	r3, #50	@ 0x32
 800286c:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <UART_SetConfig+0x118>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002878:	4419      	add	r1, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009a      	lsls	r2, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <UART_SetConfig+0x118>)
 8002892:	fba3 0302 	umull	r0, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2064      	movs	r0, #100	@ 0x64
 800289a:	fb00 f303 	mul.w	r3, r0, r3
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	3332      	adds	r3, #50	@ 0x32
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <UART_SetConfig+0x118>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	f003 020f 	and.w	r2, r3, #15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	440a      	add	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40013800 	.word	0x40013800
 80028c4:	51eb851f 	.word	0x51eb851f

080028c8 <malloc>:
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <malloc+0xc>)
 80028ca:	4601      	mov	r1, r0
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	f000 b82d 	b.w	800292c <_malloc_r>
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <free>:
 80028d8:	4b02      	ldr	r3, [pc, #8]	@ (80028e4 <free+0xc>)
 80028da:	4601      	mov	r1, r0
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	f000 b917 	b.w	8002b10 <_free_r>
 80028e2:	bf00      	nop
 80028e4:	2000000c 	.word	0x2000000c

080028e8 <sbrk_aligned>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	4e0f      	ldr	r6, [pc, #60]	@ (8002928 <sbrk_aligned+0x40>)
 80028ec:	460c      	mov	r4, r1
 80028ee:	6831      	ldr	r1, [r6, #0]
 80028f0:	4605      	mov	r5, r0
 80028f2:	b911      	cbnz	r1, 80028fa <sbrk_aligned+0x12>
 80028f4:	f000 f8d0 	bl	8002a98 <_sbrk_r>
 80028f8:	6030      	str	r0, [r6, #0]
 80028fa:	4621      	mov	r1, r4
 80028fc:	4628      	mov	r0, r5
 80028fe:	f000 f8cb 	bl	8002a98 <_sbrk_r>
 8002902:	1c43      	adds	r3, r0, #1
 8002904:	d103      	bne.n	800290e <sbrk_aligned+0x26>
 8002906:	f04f 34ff 	mov.w	r4, #4294967295
 800290a:	4620      	mov	r0, r4
 800290c:	bd70      	pop	{r4, r5, r6, pc}
 800290e:	1cc4      	adds	r4, r0, #3
 8002910:	f024 0403 	bic.w	r4, r4, #3
 8002914:	42a0      	cmp	r0, r4
 8002916:	d0f8      	beq.n	800290a <sbrk_aligned+0x22>
 8002918:	1a21      	subs	r1, r4, r0
 800291a:	4628      	mov	r0, r5
 800291c:	f000 f8bc 	bl	8002a98 <_sbrk_r>
 8002920:	3001      	adds	r0, #1
 8002922:	d1f2      	bne.n	800290a <sbrk_aligned+0x22>
 8002924:	e7ef      	b.n	8002906 <sbrk_aligned+0x1e>
 8002926:	bf00      	nop
 8002928:	20000520 	.word	0x20000520

0800292c <_malloc_r>:
 800292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002930:	1ccd      	adds	r5, r1, #3
 8002932:	f025 0503 	bic.w	r5, r5, #3
 8002936:	3508      	adds	r5, #8
 8002938:	2d0c      	cmp	r5, #12
 800293a:	bf38      	it	cc
 800293c:	250c      	movcc	r5, #12
 800293e:	2d00      	cmp	r5, #0
 8002940:	4606      	mov	r6, r0
 8002942:	db01      	blt.n	8002948 <_malloc_r+0x1c>
 8002944:	42a9      	cmp	r1, r5
 8002946:	d904      	bls.n	8002952 <_malloc_r+0x26>
 8002948:	230c      	movs	r3, #12
 800294a:	6033      	str	r3, [r6, #0]
 800294c:	2000      	movs	r0, #0
 800294e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a28 <_malloc_r+0xfc>
 8002956:	f000 f869 	bl	8002a2c <__malloc_lock>
 800295a:	f8d8 3000 	ldr.w	r3, [r8]
 800295e:	461c      	mov	r4, r3
 8002960:	bb44      	cbnz	r4, 80029b4 <_malloc_r+0x88>
 8002962:	4629      	mov	r1, r5
 8002964:	4630      	mov	r0, r6
 8002966:	f7ff ffbf 	bl	80028e8 <sbrk_aligned>
 800296a:	1c43      	adds	r3, r0, #1
 800296c:	4604      	mov	r4, r0
 800296e:	d158      	bne.n	8002a22 <_malloc_r+0xf6>
 8002970:	f8d8 4000 	ldr.w	r4, [r8]
 8002974:	4627      	mov	r7, r4
 8002976:	2f00      	cmp	r7, #0
 8002978:	d143      	bne.n	8002a02 <_malloc_r+0xd6>
 800297a:	2c00      	cmp	r4, #0
 800297c:	d04b      	beq.n	8002a16 <_malloc_r+0xea>
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	4639      	mov	r1, r7
 8002982:	4630      	mov	r0, r6
 8002984:	eb04 0903 	add.w	r9, r4, r3
 8002988:	f000 f886 	bl	8002a98 <_sbrk_r>
 800298c:	4581      	cmp	r9, r0
 800298e:	d142      	bne.n	8002a16 <_malloc_r+0xea>
 8002990:	6821      	ldr	r1, [r4, #0]
 8002992:	4630      	mov	r0, r6
 8002994:	1a6d      	subs	r5, r5, r1
 8002996:	4629      	mov	r1, r5
 8002998:	f7ff ffa6 	bl	80028e8 <sbrk_aligned>
 800299c:	3001      	adds	r0, #1
 800299e:	d03a      	beq.n	8002a16 <_malloc_r+0xea>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	442b      	add	r3, r5
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	f8d8 3000 	ldr.w	r3, [r8]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	bb62      	cbnz	r2, 8002a08 <_malloc_r+0xdc>
 80029ae:	f8c8 7000 	str.w	r7, [r8]
 80029b2:	e00f      	b.n	80029d4 <_malloc_r+0xa8>
 80029b4:	6822      	ldr	r2, [r4, #0]
 80029b6:	1b52      	subs	r2, r2, r5
 80029b8:	d420      	bmi.n	80029fc <_malloc_r+0xd0>
 80029ba:	2a0b      	cmp	r2, #11
 80029bc:	d917      	bls.n	80029ee <_malloc_r+0xc2>
 80029be:	1961      	adds	r1, r4, r5
 80029c0:	42a3      	cmp	r3, r4
 80029c2:	6025      	str	r5, [r4, #0]
 80029c4:	bf18      	it	ne
 80029c6:	6059      	strne	r1, [r3, #4]
 80029c8:	6863      	ldr	r3, [r4, #4]
 80029ca:	bf08      	it	eq
 80029cc:	f8c8 1000 	streq.w	r1, [r8]
 80029d0:	5162      	str	r2, [r4, r5]
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	4630      	mov	r0, r6
 80029d6:	f000 f82f 	bl	8002a38 <__malloc_unlock>
 80029da:	f104 000b 	add.w	r0, r4, #11
 80029de:	1d23      	adds	r3, r4, #4
 80029e0:	f020 0007 	bic.w	r0, r0, #7
 80029e4:	1ac2      	subs	r2, r0, r3
 80029e6:	bf1c      	itt	ne
 80029e8:	1a1b      	subne	r3, r3, r0
 80029ea:	50a3      	strne	r3, [r4, r2]
 80029ec:	e7af      	b.n	800294e <_malloc_r+0x22>
 80029ee:	6862      	ldr	r2, [r4, #4]
 80029f0:	42a3      	cmp	r3, r4
 80029f2:	bf0c      	ite	eq
 80029f4:	f8c8 2000 	streq.w	r2, [r8]
 80029f8:	605a      	strne	r2, [r3, #4]
 80029fa:	e7eb      	b.n	80029d4 <_malloc_r+0xa8>
 80029fc:	4623      	mov	r3, r4
 80029fe:	6864      	ldr	r4, [r4, #4]
 8002a00:	e7ae      	b.n	8002960 <_malloc_r+0x34>
 8002a02:	463c      	mov	r4, r7
 8002a04:	687f      	ldr	r7, [r7, #4]
 8002a06:	e7b6      	b.n	8002976 <_malloc_r+0x4a>
 8002a08:	461a      	mov	r2, r3
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	42a3      	cmp	r3, r4
 8002a0e:	d1fb      	bne.n	8002a08 <_malloc_r+0xdc>
 8002a10:	2300      	movs	r3, #0
 8002a12:	6053      	str	r3, [r2, #4]
 8002a14:	e7de      	b.n	80029d4 <_malloc_r+0xa8>
 8002a16:	230c      	movs	r3, #12
 8002a18:	4630      	mov	r0, r6
 8002a1a:	6033      	str	r3, [r6, #0]
 8002a1c:	f000 f80c 	bl	8002a38 <__malloc_unlock>
 8002a20:	e794      	b.n	800294c <_malloc_r+0x20>
 8002a22:	6005      	str	r5, [r0, #0]
 8002a24:	e7d6      	b.n	80029d4 <_malloc_r+0xa8>
 8002a26:	bf00      	nop
 8002a28:	20000524 	.word	0x20000524

08002a2c <__malloc_lock>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	@ (8002a34 <__malloc_lock+0x8>)
 8002a2e:	f000 b86d 	b.w	8002b0c <__retarget_lock_acquire_recursive>
 8002a32:	bf00      	nop
 8002a34:	20000664 	.word	0x20000664

08002a38 <__malloc_unlock>:
 8002a38:	4801      	ldr	r0, [pc, #4]	@ (8002a40 <__malloc_unlock+0x8>)
 8002a3a:	f000 b868 	b.w	8002b0e <__retarget_lock_release_recursive>
 8002a3e:	bf00      	nop
 8002a40:	20000664 	.word	0x20000664

08002a44 <siprintf>:
 8002a44:	b40e      	push	{r1, r2, r3}
 8002a46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	2400      	movs	r4, #0
 8002a4e:	b09d      	sub	sp, #116	@ 0x74
 8002a50:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002a52:	9002      	str	r0, [sp, #8]
 8002a54:	9006      	str	r0, [sp, #24]
 8002a56:	9107      	str	r1, [sp, #28]
 8002a58:	9104      	str	r1, [sp, #16]
 8002a5a:	4809      	ldr	r0, [pc, #36]	@ (8002a80 <siprintf+0x3c>)
 8002a5c:	4909      	ldr	r1, [pc, #36]	@ (8002a84 <siprintf+0x40>)
 8002a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a62:	9105      	str	r1, [sp, #20]
 8002a64:	6800      	ldr	r0, [r0, #0]
 8002a66:	a902      	add	r1, sp, #8
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002a6c:	f000 f8f4 	bl	8002c58 <_svfiprintf_r>
 8002a70:	9b02      	ldr	r3, [sp, #8]
 8002a72:	701c      	strb	r4, [r3, #0]
 8002a74:	b01d      	add	sp, #116	@ 0x74
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a7a:	b003      	add	sp, #12
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	2000000c 	.word	0x2000000c
 8002a84:	ffff0208 	.word	0xffff0208

08002a88 <memset>:
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4402      	add	r2, r0
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <memset+0xa>
 8002a90:	4770      	bx	lr
 8002a92:	f803 1b01 	strb.w	r1, [r3], #1
 8002a96:	e7f9      	b.n	8002a8c <memset+0x4>

08002a98 <_sbrk_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	4d05      	ldr	r5, [pc, #20]	@ (8002ab4 <_sbrk_r+0x1c>)
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	602b      	str	r3, [r5, #0]
 8002aa4:	f7fe f96a 	bl	8000d7c <_sbrk>
 8002aa8:	1c43      	adds	r3, r0, #1
 8002aaa:	d102      	bne.n	8002ab2 <_sbrk_r+0x1a>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	b103      	cbz	r3, 8002ab2 <_sbrk_r+0x1a>
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
 8002ab4:	20000660 	.word	0x20000660

08002ab8 <__errno>:
 8002ab8:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__errno+0x8>)
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	4d0c      	ldr	r5, [pc, #48]	@ (8002afc <__libc_init_array+0x38>)
 8002aca:	4c0d      	ldr	r4, [pc, #52]	@ (8002b00 <__libc_init_array+0x3c>)
 8002acc:	1b64      	subs	r4, r4, r5
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	f000 fbb8 	bl	8003248 <_init>
 8002ad8:	2600      	movs	r6, #0
 8002ada:	4d0a      	ldr	r5, [pc, #40]	@ (8002b04 <__libc_init_array+0x40>)
 8002adc:	4c0a      	ldr	r4, [pc, #40]	@ (8002b08 <__libc_init_array+0x44>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	42a6      	cmp	r6, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aec:	4798      	blx	r3
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af6:	4798      	blx	r3
 8002af8:	3601      	adds	r6, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	080033c0 	.word	0x080033c0
 8002b00:	080033c0 	.word	0x080033c0
 8002b04:	080033c0 	.word	0x080033c0
 8002b08:	080033c4 	.word	0x080033c4

08002b0c <__retarget_lock_acquire_recursive>:
 8002b0c:	4770      	bx	lr

08002b0e <__retarget_lock_release_recursive>:
 8002b0e:	4770      	bx	lr

08002b10 <_free_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	4605      	mov	r5, r0
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d040      	beq.n	8002b9a <_free_r+0x8a>
 8002b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b1c:	1f0c      	subs	r4, r1, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bfb8      	it	lt
 8002b22:	18e4      	addlt	r4, r4, r3
 8002b24:	f7ff ff82 	bl	8002a2c <__malloc_lock>
 8002b28:	4a1c      	ldr	r2, [pc, #112]	@ (8002b9c <_free_r+0x8c>)
 8002b2a:	6813      	ldr	r3, [r2, #0]
 8002b2c:	b933      	cbnz	r3, 8002b3c <_free_r+0x2c>
 8002b2e:	6063      	str	r3, [r4, #4]
 8002b30:	6014      	str	r4, [r2, #0]
 8002b32:	4628      	mov	r0, r5
 8002b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b38:	f7ff bf7e 	b.w	8002a38 <__malloc_unlock>
 8002b3c:	42a3      	cmp	r3, r4
 8002b3e:	d908      	bls.n	8002b52 <_free_r+0x42>
 8002b40:	6820      	ldr	r0, [r4, #0]
 8002b42:	1821      	adds	r1, r4, r0
 8002b44:	428b      	cmp	r3, r1
 8002b46:	bf01      	itttt	eq
 8002b48:	6819      	ldreq	r1, [r3, #0]
 8002b4a:	685b      	ldreq	r3, [r3, #4]
 8002b4c:	1809      	addeq	r1, r1, r0
 8002b4e:	6021      	streq	r1, [r4, #0]
 8002b50:	e7ed      	b.n	8002b2e <_free_r+0x1e>
 8002b52:	461a      	mov	r2, r3
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	b10b      	cbz	r3, 8002b5c <_free_r+0x4c>
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	d9fa      	bls.n	8002b52 <_free_r+0x42>
 8002b5c:	6811      	ldr	r1, [r2, #0]
 8002b5e:	1850      	adds	r0, r2, r1
 8002b60:	42a0      	cmp	r0, r4
 8002b62:	d10b      	bne.n	8002b7c <_free_r+0x6c>
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	4401      	add	r1, r0
 8002b68:	1850      	adds	r0, r2, r1
 8002b6a:	4283      	cmp	r3, r0
 8002b6c:	6011      	str	r1, [r2, #0]
 8002b6e:	d1e0      	bne.n	8002b32 <_free_r+0x22>
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4408      	add	r0, r1
 8002b76:	6010      	str	r0, [r2, #0]
 8002b78:	6053      	str	r3, [r2, #4]
 8002b7a:	e7da      	b.n	8002b32 <_free_r+0x22>
 8002b7c:	d902      	bls.n	8002b84 <_free_r+0x74>
 8002b7e:	230c      	movs	r3, #12
 8002b80:	602b      	str	r3, [r5, #0]
 8002b82:	e7d6      	b.n	8002b32 <_free_r+0x22>
 8002b84:	6820      	ldr	r0, [r4, #0]
 8002b86:	1821      	adds	r1, r4, r0
 8002b88:	428b      	cmp	r3, r1
 8002b8a:	bf01      	itttt	eq
 8002b8c:	6819      	ldreq	r1, [r3, #0]
 8002b8e:	685b      	ldreq	r3, [r3, #4]
 8002b90:	1809      	addeq	r1, r1, r0
 8002b92:	6021      	streq	r1, [r4, #0]
 8002b94:	6063      	str	r3, [r4, #4]
 8002b96:	6054      	str	r4, [r2, #4]
 8002b98:	e7cb      	b.n	8002b32 <_free_r+0x22>
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
 8002b9c:	20000524 	.word	0x20000524

08002ba0 <__ssputs_r>:
 8002ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba4:	461f      	mov	r7, r3
 8002ba6:	688e      	ldr	r6, [r1, #8]
 8002ba8:	4682      	mov	sl, r0
 8002baa:	42be      	cmp	r6, r7
 8002bac:	460c      	mov	r4, r1
 8002bae:	4690      	mov	r8, r2
 8002bb0:	680b      	ldr	r3, [r1, #0]
 8002bb2:	d82d      	bhi.n	8002c10 <__ssputs_r+0x70>
 8002bb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002bbc:	d026      	beq.n	8002c0c <__ssputs_r+0x6c>
 8002bbe:	6965      	ldr	r5, [r4, #20]
 8002bc0:	6909      	ldr	r1, [r1, #16]
 8002bc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bc6:	eba3 0901 	sub.w	r9, r3, r1
 8002bca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bce:	1c7b      	adds	r3, r7, #1
 8002bd0:	444b      	add	r3, r9
 8002bd2:	106d      	asrs	r5, r5, #1
 8002bd4:	429d      	cmp	r5, r3
 8002bd6:	bf38      	it	cc
 8002bd8:	461d      	movcc	r5, r3
 8002bda:	0553      	lsls	r3, r2, #21
 8002bdc:	d527      	bpl.n	8002c2e <__ssputs_r+0x8e>
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7ff fea4 	bl	800292c <_malloc_r>
 8002be4:	4606      	mov	r6, r0
 8002be6:	b360      	cbz	r0, 8002c42 <__ssputs_r+0xa2>
 8002be8:	464a      	mov	r2, r9
 8002bea:	6921      	ldr	r1, [r4, #16]
 8002bec:	f000 fae8 	bl	80031c0 <memcpy>
 8002bf0:	89a3      	ldrh	r3, [r4, #12]
 8002bf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bfa:	81a3      	strh	r3, [r4, #12]
 8002bfc:	6126      	str	r6, [r4, #16]
 8002bfe:	444e      	add	r6, r9
 8002c00:	6026      	str	r6, [r4, #0]
 8002c02:	463e      	mov	r6, r7
 8002c04:	6165      	str	r5, [r4, #20]
 8002c06:	eba5 0509 	sub.w	r5, r5, r9
 8002c0a:	60a5      	str	r5, [r4, #8]
 8002c0c:	42be      	cmp	r6, r7
 8002c0e:	d900      	bls.n	8002c12 <__ssputs_r+0x72>
 8002c10:	463e      	mov	r6, r7
 8002c12:	4632      	mov	r2, r6
 8002c14:	4641      	mov	r1, r8
 8002c16:	6820      	ldr	r0, [r4, #0]
 8002c18:	f000 faaa 	bl	8003170 <memmove>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	68a3      	ldr	r3, [r4, #8]
 8002c20:	1b9b      	subs	r3, r3, r6
 8002c22:	60a3      	str	r3, [r4, #8]
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	4433      	add	r3, r6
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c2e:	462a      	mov	r2, r5
 8002c30:	f000 fad4 	bl	80031dc <_realloc_r>
 8002c34:	4606      	mov	r6, r0
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d1e0      	bne.n	8002bfc <__ssputs_r+0x5c>
 8002c3a:	4650      	mov	r0, sl
 8002c3c:	6921      	ldr	r1, [r4, #16]
 8002c3e:	f7ff ff67 	bl	8002b10 <_free_r>
 8002c42:	230c      	movs	r3, #12
 8002c44:	f8ca 3000 	str.w	r3, [sl]
 8002c48:	89a3      	ldrh	r3, [r4, #12]
 8002c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c52:	81a3      	strh	r3, [r4, #12]
 8002c54:	e7e9      	b.n	8002c2a <__ssputs_r+0x8a>
	...

08002c58 <_svfiprintf_r>:
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	898b      	ldrh	r3, [r1, #12]
 8002c60:	4607      	mov	r7, r0
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	460d      	mov	r5, r1
 8002c66:	4614      	mov	r4, r2
 8002c68:	b09d      	sub	sp, #116	@ 0x74
 8002c6a:	d510      	bpl.n	8002c8e <_svfiprintf_r+0x36>
 8002c6c:	690b      	ldr	r3, [r1, #16]
 8002c6e:	b973      	cbnz	r3, 8002c8e <_svfiprintf_r+0x36>
 8002c70:	2140      	movs	r1, #64	@ 0x40
 8002c72:	f7ff fe5b 	bl	800292c <_malloc_r>
 8002c76:	6028      	str	r0, [r5, #0]
 8002c78:	6128      	str	r0, [r5, #16]
 8002c7a:	b930      	cbnz	r0, 8002c8a <_svfiprintf_r+0x32>
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	b01d      	add	sp, #116	@ 0x74
 8002c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c8a:	2340      	movs	r3, #64	@ 0x40
 8002c8c:	616b      	str	r3, [r5, #20]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c92:	2320      	movs	r3, #32
 8002c94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c98:	2330      	movs	r3, #48	@ 0x30
 8002c9a:	f04f 0901 	mov.w	r9, #1
 8002c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ca2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002e3c <_svfiprintf_r+0x1e4>
 8002ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002caa:	4623      	mov	r3, r4
 8002cac:	469a      	mov	sl, r3
 8002cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cb2:	b10a      	cbz	r2, 8002cb8 <_svfiprintf_r+0x60>
 8002cb4:	2a25      	cmp	r2, #37	@ 0x25
 8002cb6:	d1f9      	bne.n	8002cac <_svfiprintf_r+0x54>
 8002cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8002cbc:	d00b      	beq.n	8002cd6 <_svfiprintf_r+0x7e>
 8002cbe:	465b      	mov	r3, fp
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	f7ff ff6b 	bl	8002ba0 <__ssputs_r>
 8002cca:	3001      	adds	r0, #1
 8002ccc:	f000 80a7 	beq.w	8002e1e <_svfiprintf_r+0x1c6>
 8002cd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cd2:	445a      	add	r2, fp
 8002cd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 809f 	beq.w	8002e1e <_svfiprintf_r+0x1c6>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cea:	f10a 0a01 	add.w	sl, sl, #1
 8002cee:	9304      	str	r3, [sp, #16]
 8002cf0:	9307      	str	r3, [sp, #28]
 8002cf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002cf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8002cf8:	4654      	mov	r4, sl
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d00:	484e      	ldr	r0, [pc, #312]	@ (8002e3c <_svfiprintf_r+0x1e4>)
 8002d02:	f000 fa4f 	bl	80031a4 <memchr>
 8002d06:	9a04      	ldr	r2, [sp, #16]
 8002d08:	b9d8      	cbnz	r0, 8002d42 <_svfiprintf_r+0xea>
 8002d0a:	06d0      	lsls	r0, r2, #27
 8002d0c:	bf44      	itt	mi
 8002d0e:	2320      	movmi	r3, #32
 8002d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d14:	0711      	lsls	r1, r2, #28
 8002d16:	bf44      	itt	mi
 8002d18:	232b      	movmi	r3, #43	@ 0x2b
 8002d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d22:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d24:	d015      	beq.n	8002d52 <_svfiprintf_r+0xfa>
 8002d26:	4654      	mov	r4, sl
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f04f 0c0a 	mov.w	ip, #10
 8002d2e:	9a07      	ldr	r2, [sp, #28]
 8002d30:	4621      	mov	r1, r4
 8002d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d36:	3b30      	subs	r3, #48	@ 0x30
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	d94b      	bls.n	8002dd4 <_svfiprintf_r+0x17c>
 8002d3c:	b1b0      	cbz	r0, 8002d6c <_svfiprintf_r+0x114>
 8002d3e:	9207      	str	r2, [sp, #28]
 8002d40:	e014      	b.n	8002d6c <_svfiprintf_r+0x114>
 8002d42:	eba0 0308 	sub.w	r3, r0, r8
 8002d46:	fa09 f303 	lsl.w	r3, r9, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	46a2      	mov	sl, r4
 8002d4e:	9304      	str	r3, [sp, #16]
 8002d50:	e7d2      	b.n	8002cf8 <_svfiprintf_r+0xa0>
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	1d19      	adds	r1, r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	9103      	str	r1, [sp, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bfbb      	ittet	lt
 8002d5e:	425b      	neglt	r3, r3
 8002d60:	f042 0202 	orrlt.w	r2, r2, #2
 8002d64:	9307      	strge	r3, [sp, #28]
 8002d66:	9307      	strlt	r3, [sp, #28]
 8002d68:	bfb8      	it	lt
 8002d6a:	9204      	strlt	r2, [sp, #16]
 8002d6c:	7823      	ldrb	r3, [r4, #0]
 8002d6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d70:	d10a      	bne.n	8002d88 <_svfiprintf_r+0x130>
 8002d72:	7863      	ldrb	r3, [r4, #1]
 8002d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d76:	d132      	bne.n	8002dde <_svfiprintf_r+0x186>
 8002d78:	9b03      	ldr	r3, [sp, #12]
 8002d7a:	3402      	adds	r4, #2
 8002d7c:	1d1a      	adds	r2, r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	9203      	str	r2, [sp, #12]
 8002d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d86:	9305      	str	r3, [sp, #20]
 8002d88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002e40 <_svfiprintf_r+0x1e8>
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	4650      	mov	r0, sl
 8002d90:	7821      	ldrb	r1, [r4, #0]
 8002d92:	f000 fa07 	bl	80031a4 <memchr>
 8002d96:	b138      	cbz	r0, 8002da8 <_svfiprintf_r+0x150>
 8002d98:	2240      	movs	r2, #64	@ 0x40
 8002d9a:	9b04      	ldr	r3, [sp, #16]
 8002d9c:	eba0 000a 	sub.w	r0, r0, sl
 8002da0:	4082      	lsls	r2, r0
 8002da2:	4313      	orrs	r3, r2
 8002da4:	3401      	adds	r4, #1
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dac:	2206      	movs	r2, #6
 8002dae:	4825      	ldr	r0, [pc, #148]	@ (8002e44 <_svfiprintf_r+0x1ec>)
 8002db0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002db4:	f000 f9f6 	bl	80031a4 <memchr>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d036      	beq.n	8002e2a <_svfiprintf_r+0x1d2>
 8002dbc:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <_svfiprintf_r+0x1f0>)
 8002dbe:	bb1b      	cbnz	r3, 8002e08 <_svfiprintf_r+0x1b0>
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	3307      	adds	r3, #7
 8002dc4:	f023 0307 	bic.w	r3, r3, #7
 8002dc8:	3308      	adds	r3, #8
 8002dca:	9303      	str	r3, [sp, #12]
 8002dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dce:	4433      	add	r3, r6
 8002dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dd2:	e76a      	b.n	8002caa <_svfiprintf_r+0x52>
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ddc:	e7a8      	b.n	8002d30 <_svfiprintf_r+0xd8>
 8002dde:	2300      	movs	r3, #0
 8002de0:	f04f 0c0a 	mov.w	ip, #10
 8002de4:	4619      	mov	r1, r3
 8002de6:	3401      	adds	r4, #1
 8002de8:	9305      	str	r3, [sp, #20]
 8002dea:	4620      	mov	r0, r4
 8002dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df0:	3a30      	subs	r2, #48	@ 0x30
 8002df2:	2a09      	cmp	r2, #9
 8002df4:	d903      	bls.n	8002dfe <_svfiprintf_r+0x1a6>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0c6      	beq.n	8002d88 <_svfiprintf_r+0x130>
 8002dfa:	9105      	str	r1, [sp, #20]
 8002dfc:	e7c4      	b.n	8002d88 <_svfiprintf_r+0x130>
 8002dfe:	4604      	mov	r4, r0
 8002e00:	2301      	movs	r3, #1
 8002e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e06:	e7f0      	b.n	8002dea <_svfiprintf_r+0x192>
 8002e08:	ab03      	add	r3, sp, #12
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	4638      	mov	r0, r7
 8002e10:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <_svfiprintf_r+0x1f4>)
 8002e12:	a904      	add	r1, sp, #16
 8002e14:	f3af 8000 	nop.w
 8002e18:	1c42      	adds	r2, r0, #1
 8002e1a:	4606      	mov	r6, r0
 8002e1c:	d1d6      	bne.n	8002dcc <_svfiprintf_r+0x174>
 8002e1e:	89ab      	ldrh	r3, [r5, #12]
 8002e20:	065b      	lsls	r3, r3, #25
 8002e22:	f53f af2d 	bmi.w	8002c80 <_svfiprintf_r+0x28>
 8002e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e28:	e72c      	b.n	8002c84 <_svfiprintf_r+0x2c>
 8002e2a:	ab03      	add	r3, sp, #12
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	462a      	mov	r2, r5
 8002e30:	4638      	mov	r0, r7
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <_svfiprintf_r+0x1f4>)
 8002e34:	a904      	add	r1, sp, #16
 8002e36:	f000 f87d 	bl	8002f34 <_printf_i>
 8002e3a:	e7ed      	b.n	8002e18 <_svfiprintf_r+0x1c0>
 8002e3c:	08003382 	.word	0x08003382
 8002e40:	08003388 	.word	0x08003388
 8002e44:	0800338c 	.word	0x0800338c
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	08002ba1 	.word	0x08002ba1

08002e50 <_printf_common>:
 8002e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e54:	4616      	mov	r6, r2
 8002e56:	4698      	mov	r8, r3
 8002e58:	688a      	ldr	r2, [r1, #8]
 8002e5a:	690b      	ldr	r3, [r1, #16]
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	bfb8      	it	lt
 8002e62:	4613      	movlt	r3, r2
 8002e64:	6033      	str	r3, [r6, #0]
 8002e66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e70:	b10a      	cbz	r2, 8002e76 <_printf_common+0x26>
 8002e72:	3301      	adds	r3, #1
 8002e74:	6033      	str	r3, [r6, #0]
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	0699      	lsls	r1, r3, #26
 8002e7a:	bf42      	ittt	mi
 8002e7c:	6833      	ldrmi	r3, [r6, #0]
 8002e7e:	3302      	addmi	r3, #2
 8002e80:	6033      	strmi	r3, [r6, #0]
 8002e82:	6825      	ldr	r5, [r4, #0]
 8002e84:	f015 0506 	ands.w	r5, r5, #6
 8002e88:	d106      	bne.n	8002e98 <_printf_common+0x48>
 8002e8a:	f104 0a19 	add.w	sl, r4, #25
 8002e8e:	68e3      	ldr	r3, [r4, #12]
 8002e90:	6832      	ldr	r2, [r6, #0]
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	42ab      	cmp	r3, r5
 8002e96:	dc2b      	bgt.n	8002ef0 <_printf_common+0xa0>
 8002e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e9c:	6822      	ldr	r2, [r4, #0]
 8002e9e:	3b00      	subs	r3, #0
 8002ea0:	bf18      	it	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	0692      	lsls	r2, r2, #26
 8002ea6:	d430      	bmi.n	8002f0a <_printf_common+0xba>
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	4638      	mov	r0, r7
 8002eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002eb0:	47c8      	blx	r9
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d023      	beq.n	8002efe <_printf_common+0xae>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	6922      	ldr	r2, [r4, #16]
 8002eba:	f003 0306 	and.w	r3, r3, #6
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf14      	ite	ne
 8002ec2:	2500      	movne	r5, #0
 8002ec4:	6833      	ldreq	r3, [r6, #0]
 8002ec6:	f04f 0600 	mov.w	r6, #0
 8002eca:	bf08      	it	eq
 8002ecc:	68e5      	ldreq	r5, [r4, #12]
 8002ece:	f104 041a 	add.w	r4, r4, #26
 8002ed2:	bf08      	it	eq
 8002ed4:	1aed      	subeq	r5, r5, r3
 8002ed6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002eda:	bf08      	it	eq
 8002edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bfc4      	itt	gt
 8002ee4:	1a9b      	subgt	r3, r3, r2
 8002ee6:	18ed      	addgt	r5, r5, r3
 8002ee8:	42b5      	cmp	r5, r6
 8002eea:	d11a      	bne.n	8002f22 <_printf_common+0xd2>
 8002eec:	2000      	movs	r0, #0
 8002eee:	e008      	b.n	8002f02 <_printf_common+0xb2>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4652      	mov	r2, sl
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c8      	blx	r9
 8002efa:	3001      	adds	r0, #1
 8002efc:	d103      	bne.n	8002f06 <_printf_common+0xb6>
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295
 8002f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f06:	3501      	adds	r5, #1
 8002f08:	e7c1      	b.n	8002e8e <_printf_common+0x3e>
 8002f0a:	2030      	movs	r0, #48	@ 0x30
 8002f0c:	18e1      	adds	r1, r4, r3
 8002f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f18:	4422      	add	r2, r4
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f20:	e7c2      	b.n	8002ea8 <_printf_common+0x58>
 8002f22:	2301      	movs	r3, #1
 8002f24:	4622      	mov	r2, r4
 8002f26:	4641      	mov	r1, r8
 8002f28:	4638      	mov	r0, r7
 8002f2a:	47c8      	blx	r9
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d0e6      	beq.n	8002efe <_printf_common+0xae>
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7d9      	b.n	8002ee8 <_printf_common+0x98>

08002f34 <_printf_i>:
 8002f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f38:	7e0f      	ldrb	r7, [r1, #24]
 8002f3a:	4691      	mov	r9, r2
 8002f3c:	2f78      	cmp	r7, #120	@ 0x78
 8002f3e:	4680      	mov	r8, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	469a      	mov	sl, r3
 8002f44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f4a:	d807      	bhi.n	8002f5c <_printf_i+0x28>
 8002f4c:	2f62      	cmp	r7, #98	@ 0x62
 8002f4e:	d80a      	bhi.n	8002f66 <_printf_i+0x32>
 8002f50:	2f00      	cmp	r7, #0
 8002f52:	f000 80d1 	beq.w	80030f8 <_printf_i+0x1c4>
 8002f56:	2f58      	cmp	r7, #88	@ 0x58
 8002f58:	f000 80b8 	beq.w	80030cc <_printf_i+0x198>
 8002f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f64:	e03a      	b.n	8002fdc <_printf_i+0xa8>
 8002f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f6a:	2b15      	cmp	r3, #21
 8002f6c:	d8f6      	bhi.n	8002f5c <_printf_i+0x28>
 8002f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8002f74 <_printf_i+0x40>)
 8002f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f74:	08002fcd 	.word	0x08002fcd
 8002f78:	08002fe1 	.word	0x08002fe1
 8002f7c:	08002f5d 	.word	0x08002f5d
 8002f80:	08002f5d 	.word	0x08002f5d
 8002f84:	08002f5d 	.word	0x08002f5d
 8002f88:	08002f5d 	.word	0x08002f5d
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002f5d 	.word	0x08002f5d
 8002f94:	08002f5d 	.word	0x08002f5d
 8002f98:	08002f5d 	.word	0x08002f5d
 8002f9c:	08002f5d 	.word	0x08002f5d
 8002fa0:	080030df 	.word	0x080030df
 8002fa4:	0800300b 	.word	0x0800300b
 8002fa8:	08003099 	.word	0x08003099
 8002fac:	08002f5d 	.word	0x08002f5d
 8002fb0:	08002f5d 	.word	0x08002f5d
 8002fb4:	08003101 	.word	0x08003101
 8002fb8:	08002f5d 	.word	0x08002f5d
 8002fbc:	0800300b 	.word	0x0800300b
 8002fc0:	08002f5d 	.word	0x08002f5d
 8002fc4:	08002f5d 	.word	0x08002f5d
 8002fc8:	080030a1 	.word	0x080030a1
 8002fcc:	6833      	ldr	r3, [r6, #0]
 8002fce:	1d1a      	adds	r2, r3, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6032      	str	r2, [r6, #0]
 8002fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e09c      	b.n	800311a <_printf_i+0x1e6>
 8002fe0:	6833      	ldr	r3, [r6, #0]
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	1d19      	adds	r1, r3, #4
 8002fe6:	6031      	str	r1, [r6, #0]
 8002fe8:	0606      	lsls	r6, r0, #24
 8002fea:	d501      	bpl.n	8002ff0 <_printf_i+0xbc>
 8002fec:	681d      	ldr	r5, [r3, #0]
 8002fee:	e003      	b.n	8002ff8 <_printf_i+0xc4>
 8002ff0:	0645      	lsls	r5, r0, #25
 8002ff2:	d5fb      	bpl.n	8002fec <_printf_i+0xb8>
 8002ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ff8:	2d00      	cmp	r5, #0
 8002ffa:	da03      	bge.n	8003004 <_printf_i+0xd0>
 8002ffc:	232d      	movs	r3, #45	@ 0x2d
 8002ffe:	426d      	negs	r5, r5
 8003000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003004:	230a      	movs	r3, #10
 8003006:	4858      	ldr	r0, [pc, #352]	@ (8003168 <_printf_i+0x234>)
 8003008:	e011      	b.n	800302e <_printf_i+0xfa>
 800300a:	6821      	ldr	r1, [r4, #0]
 800300c:	6833      	ldr	r3, [r6, #0]
 800300e:	0608      	lsls	r0, r1, #24
 8003010:	f853 5b04 	ldr.w	r5, [r3], #4
 8003014:	d402      	bmi.n	800301c <_printf_i+0xe8>
 8003016:	0649      	lsls	r1, r1, #25
 8003018:	bf48      	it	mi
 800301a:	b2ad      	uxthmi	r5, r5
 800301c:	2f6f      	cmp	r7, #111	@ 0x6f
 800301e:	6033      	str	r3, [r6, #0]
 8003020:	bf14      	ite	ne
 8003022:	230a      	movne	r3, #10
 8003024:	2308      	moveq	r3, #8
 8003026:	4850      	ldr	r0, [pc, #320]	@ (8003168 <_printf_i+0x234>)
 8003028:	2100      	movs	r1, #0
 800302a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800302e:	6866      	ldr	r6, [r4, #4]
 8003030:	2e00      	cmp	r6, #0
 8003032:	60a6      	str	r6, [r4, #8]
 8003034:	db05      	blt.n	8003042 <_printf_i+0x10e>
 8003036:	6821      	ldr	r1, [r4, #0]
 8003038:	432e      	orrs	r6, r5
 800303a:	f021 0104 	bic.w	r1, r1, #4
 800303e:	6021      	str	r1, [r4, #0]
 8003040:	d04b      	beq.n	80030da <_printf_i+0x1a6>
 8003042:	4616      	mov	r6, r2
 8003044:	fbb5 f1f3 	udiv	r1, r5, r3
 8003048:	fb03 5711 	mls	r7, r3, r1, r5
 800304c:	5dc7      	ldrb	r7, [r0, r7]
 800304e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003052:	462f      	mov	r7, r5
 8003054:	42bb      	cmp	r3, r7
 8003056:	460d      	mov	r5, r1
 8003058:	d9f4      	bls.n	8003044 <_printf_i+0x110>
 800305a:	2b08      	cmp	r3, #8
 800305c:	d10b      	bne.n	8003076 <_printf_i+0x142>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	07df      	lsls	r7, r3, #31
 8003062:	d508      	bpl.n	8003076 <_printf_i+0x142>
 8003064:	6923      	ldr	r3, [r4, #16]
 8003066:	6861      	ldr	r1, [r4, #4]
 8003068:	4299      	cmp	r1, r3
 800306a:	bfde      	ittt	le
 800306c:	2330      	movle	r3, #48	@ 0x30
 800306e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003072:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003076:	1b92      	subs	r2, r2, r6
 8003078:	6122      	str	r2, [r4, #16]
 800307a:	464b      	mov	r3, r9
 800307c:	4621      	mov	r1, r4
 800307e:	4640      	mov	r0, r8
 8003080:	f8cd a000 	str.w	sl, [sp]
 8003084:	aa03      	add	r2, sp, #12
 8003086:	f7ff fee3 	bl	8002e50 <_printf_common>
 800308a:	3001      	adds	r0, #1
 800308c:	d14a      	bne.n	8003124 <_printf_i+0x1f0>
 800308e:	f04f 30ff 	mov.w	r0, #4294967295
 8003092:	b004      	add	sp, #16
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	f043 0320 	orr.w	r3, r3, #32
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	2778      	movs	r7, #120	@ 0x78
 80030a2:	4832      	ldr	r0, [pc, #200]	@ (800316c <_printf_i+0x238>)
 80030a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	6831      	ldr	r1, [r6, #0]
 80030ac:	061f      	lsls	r7, r3, #24
 80030ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80030b2:	d402      	bmi.n	80030ba <_printf_i+0x186>
 80030b4:	065f      	lsls	r7, r3, #25
 80030b6:	bf48      	it	mi
 80030b8:	b2ad      	uxthmi	r5, r5
 80030ba:	6031      	str	r1, [r6, #0]
 80030bc:	07d9      	lsls	r1, r3, #31
 80030be:	bf44      	itt	mi
 80030c0:	f043 0320 	orrmi.w	r3, r3, #32
 80030c4:	6023      	strmi	r3, [r4, #0]
 80030c6:	b11d      	cbz	r5, 80030d0 <_printf_i+0x19c>
 80030c8:	2310      	movs	r3, #16
 80030ca:	e7ad      	b.n	8003028 <_printf_i+0xf4>
 80030cc:	4826      	ldr	r0, [pc, #152]	@ (8003168 <_printf_i+0x234>)
 80030ce:	e7e9      	b.n	80030a4 <_printf_i+0x170>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	f023 0320 	bic.w	r3, r3, #32
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	e7f6      	b.n	80030c8 <_printf_i+0x194>
 80030da:	4616      	mov	r6, r2
 80030dc:	e7bd      	b.n	800305a <_printf_i+0x126>
 80030de:	6833      	ldr	r3, [r6, #0]
 80030e0:	6825      	ldr	r5, [r4, #0]
 80030e2:	1d18      	adds	r0, r3, #4
 80030e4:	6961      	ldr	r1, [r4, #20]
 80030e6:	6030      	str	r0, [r6, #0]
 80030e8:	062e      	lsls	r6, r5, #24
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	d501      	bpl.n	80030f2 <_printf_i+0x1be>
 80030ee:	6019      	str	r1, [r3, #0]
 80030f0:	e002      	b.n	80030f8 <_printf_i+0x1c4>
 80030f2:	0668      	lsls	r0, r5, #25
 80030f4:	d5fb      	bpl.n	80030ee <_printf_i+0x1ba>
 80030f6:	8019      	strh	r1, [r3, #0]
 80030f8:	2300      	movs	r3, #0
 80030fa:	4616      	mov	r6, r2
 80030fc:	6123      	str	r3, [r4, #16]
 80030fe:	e7bc      	b.n	800307a <_printf_i+0x146>
 8003100:	6833      	ldr	r3, [r6, #0]
 8003102:	2100      	movs	r1, #0
 8003104:	1d1a      	adds	r2, r3, #4
 8003106:	6032      	str	r2, [r6, #0]
 8003108:	681e      	ldr	r6, [r3, #0]
 800310a:	6862      	ldr	r2, [r4, #4]
 800310c:	4630      	mov	r0, r6
 800310e:	f000 f849 	bl	80031a4 <memchr>
 8003112:	b108      	cbz	r0, 8003118 <_printf_i+0x1e4>
 8003114:	1b80      	subs	r0, r0, r6
 8003116:	6060      	str	r0, [r4, #4]
 8003118:	6863      	ldr	r3, [r4, #4]
 800311a:	6123      	str	r3, [r4, #16]
 800311c:	2300      	movs	r3, #0
 800311e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003122:	e7aa      	b.n	800307a <_printf_i+0x146>
 8003124:	4632      	mov	r2, r6
 8003126:	4649      	mov	r1, r9
 8003128:	4640      	mov	r0, r8
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	47d0      	blx	sl
 800312e:	3001      	adds	r0, #1
 8003130:	d0ad      	beq.n	800308e <_printf_i+0x15a>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	079b      	lsls	r3, r3, #30
 8003136:	d413      	bmi.n	8003160 <_printf_i+0x22c>
 8003138:	68e0      	ldr	r0, [r4, #12]
 800313a:	9b03      	ldr	r3, [sp, #12]
 800313c:	4298      	cmp	r0, r3
 800313e:	bfb8      	it	lt
 8003140:	4618      	movlt	r0, r3
 8003142:	e7a6      	b.n	8003092 <_printf_i+0x15e>
 8003144:	2301      	movs	r3, #1
 8003146:	4632      	mov	r2, r6
 8003148:	4649      	mov	r1, r9
 800314a:	4640      	mov	r0, r8
 800314c:	47d0      	blx	sl
 800314e:	3001      	adds	r0, #1
 8003150:	d09d      	beq.n	800308e <_printf_i+0x15a>
 8003152:	3501      	adds	r5, #1
 8003154:	68e3      	ldr	r3, [r4, #12]
 8003156:	9903      	ldr	r1, [sp, #12]
 8003158:	1a5b      	subs	r3, r3, r1
 800315a:	42ab      	cmp	r3, r5
 800315c:	dcf2      	bgt.n	8003144 <_printf_i+0x210>
 800315e:	e7eb      	b.n	8003138 <_printf_i+0x204>
 8003160:	2500      	movs	r5, #0
 8003162:	f104 0619 	add.w	r6, r4, #25
 8003166:	e7f5      	b.n	8003154 <_printf_i+0x220>
 8003168:	08003393 	.word	0x08003393
 800316c:	080033a4 	.word	0x080033a4

08003170 <memmove>:
 8003170:	4288      	cmp	r0, r1
 8003172:	b510      	push	{r4, lr}
 8003174:	eb01 0402 	add.w	r4, r1, r2
 8003178:	d902      	bls.n	8003180 <memmove+0x10>
 800317a:	4284      	cmp	r4, r0
 800317c:	4623      	mov	r3, r4
 800317e:	d807      	bhi.n	8003190 <memmove+0x20>
 8003180:	1e43      	subs	r3, r0, #1
 8003182:	42a1      	cmp	r1, r4
 8003184:	d008      	beq.n	8003198 <memmove+0x28>
 8003186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800318a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800318e:	e7f8      	b.n	8003182 <memmove+0x12>
 8003190:	4601      	mov	r1, r0
 8003192:	4402      	add	r2, r0
 8003194:	428a      	cmp	r2, r1
 8003196:	d100      	bne.n	800319a <memmove+0x2a>
 8003198:	bd10      	pop	{r4, pc}
 800319a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800319e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031a2:	e7f7      	b.n	8003194 <memmove+0x24>

080031a4 <memchr>:
 80031a4:	4603      	mov	r3, r0
 80031a6:	b510      	push	{r4, lr}
 80031a8:	b2c9      	uxtb	r1, r1
 80031aa:	4402      	add	r2, r0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	d101      	bne.n	80031b6 <memchr+0x12>
 80031b2:	2000      	movs	r0, #0
 80031b4:	e003      	b.n	80031be <memchr+0x1a>
 80031b6:	7804      	ldrb	r4, [r0, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	428c      	cmp	r4, r1
 80031bc:	d1f6      	bne.n	80031ac <memchr+0x8>
 80031be:	bd10      	pop	{r4, pc}

080031c0 <memcpy>:
 80031c0:	440a      	add	r2, r1
 80031c2:	4291      	cmp	r1, r2
 80031c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80031c8:	d100      	bne.n	80031cc <memcpy+0xc>
 80031ca:	4770      	bx	lr
 80031cc:	b510      	push	{r4, lr}
 80031ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031d2:	4291      	cmp	r1, r2
 80031d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031d8:	d1f9      	bne.n	80031ce <memcpy+0xe>
 80031da:	bd10      	pop	{r4, pc}

080031dc <_realloc_r>:
 80031dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e0:	4607      	mov	r7, r0
 80031e2:	4614      	mov	r4, r2
 80031e4:	460d      	mov	r5, r1
 80031e6:	b921      	cbnz	r1, 80031f2 <_realloc_r+0x16>
 80031e8:	4611      	mov	r1, r2
 80031ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ee:	f7ff bb9d 	b.w	800292c <_malloc_r>
 80031f2:	b92a      	cbnz	r2, 8003200 <_realloc_r+0x24>
 80031f4:	f7ff fc8c 	bl	8002b10 <_free_r>
 80031f8:	4625      	mov	r5, r4
 80031fa:	4628      	mov	r0, r5
 80031fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003200:	f000 f81a 	bl	8003238 <_malloc_usable_size_r>
 8003204:	4284      	cmp	r4, r0
 8003206:	4606      	mov	r6, r0
 8003208:	d802      	bhi.n	8003210 <_realloc_r+0x34>
 800320a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800320e:	d8f4      	bhi.n	80031fa <_realloc_r+0x1e>
 8003210:	4621      	mov	r1, r4
 8003212:	4638      	mov	r0, r7
 8003214:	f7ff fb8a 	bl	800292c <_malloc_r>
 8003218:	4680      	mov	r8, r0
 800321a:	b908      	cbnz	r0, 8003220 <_realloc_r+0x44>
 800321c:	4645      	mov	r5, r8
 800321e:	e7ec      	b.n	80031fa <_realloc_r+0x1e>
 8003220:	42b4      	cmp	r4, r6
 8003222:	4622      	mov	r2, r4
 8003224:	4629      	mov	r1, r5
 8003226:	bf28      	it	cs
 8003228:	4632      	movcs	r2, r6
 800322a:	f7ff ffc9 	bl	80031c0 <memcpy>
 800322e:	4629      	mov	r1, r5
 8003230:	4638      	mov	r0, r7
 8003232:	f7ff fc6d 	bl	8002b10 <_free_r>
 8003236:	e7f1      	b.n	800321c <_realloc_r+0x40>

08003238 <_malloc_usable_size_r>:
 8003238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800323c:	1f18      	subs	r0, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	bfbc      	itt	lt
 8003242:	580b      	ldrlt	r3, [r1, r0]
 8003244:	18c0      	addlt	r0, r0, r3
 8003246:	4770      	bx	lr

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
